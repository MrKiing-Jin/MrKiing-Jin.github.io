<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蜡笔小金QAQ的个人主页</title>
  
  <subtitle>Re0:从零开始的IT码农生活</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-16T08:49:24.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蜡笔小金QAQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习-pytorch-经典CNN模型-LeNet</title>
    <link href="http://example.com/2024/07/31/%E7%BB%8F%E5%85%B8CNN%E6%A8%A1%E5%9E%8B-LeNet/"/>
    <id>http://example.com/2024/07/31/%E7%BB%8F%E5%85%B8CNN%E6%A8%A1%E5%9E%8B-LeNet/</id>
    <published>2024-07-31T02:29:36.466Z</published>
    <updated>2022-08-16T08:49:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LeNet模型"><a href="#LeNet模型" class="headerlink" title="LeNet模型"></a>LeNet模型</h1><h3 id="原理框架图"><a href="#原理框架图" class="headerlink" title="原理框架图"></a>原理框架图</h3><p><img src="https://pic.rmb.bdstatic.com/bjh/1d11764b466cd12abf3937679b390416.png"><br><img src="https://pic.rmb.bdstatic.com/bjh/21ba07bf44df0966f0d9d2e590f153f6.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>首先定义我们的LeNet模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reshape</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> x.view(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建网络</span></span><br><span class="line">net = torch.nn.Sequential(</span><br><span class="line">    Reshape(),  <span class="comment"># 对应 阶段1</span></span><br><span class="line">    nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>), nn.Sigmoid(),  <span class="comment"># 对应 阶段2</span></span><br><span class="line">    nn.AvgPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>),  <span class="comment"># 对应 阶段3</span></span><br><span class="line">    nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>), nn.Sigmoid(),  <span class="comment"># 对应 阶段4</span></span><br><span class="line">    nn.AvgPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>), nn.Flatten(),  <span class="comment"># 对应 阶段5</span></span><br><span class="line">    nn.Linear(<span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>, <span class="number">120</span>), nn.Sigmoid(),  <span class="comment"># 对应 阶段6</span></span><br><span class="line">    nn.Linear(<span class="number">120</span>, <span class="number">84</span>), nn.Sigmoid(),  <span class="comment"># 对应 阶段7</span></span><br><span class="line">    nn.Linear(<span class="number">84</span>, <span class="number">10</span>)  <span class="comment"># 对应 阶段8</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode=&#x27;zeros&#x27;, device=None, dtype=None)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检验模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X = torch.rand(size=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>), dtype=torch.float32)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> net:</span><br><span class="line">    X = layer(X)</span><br><span class="line">    <span class="built_in">print</span>(layer.__class__.__name__, <span class="string">&#x27;output shape:\t&#x27;</span>, X.shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Reshape output shape:     torch.Size([1, 1, 28, 28])Conv2d output shape:     torch.Size([1, 6, 28, 28])Sigmoid output shape:     torch.Size([1, 6, 28, 28])AvgPool2d output shape:     torch.Size([1, 6, 14, 14])Conv2d output shape:     torch.Size([1, 16, 10, 10])Sigmoid output shape:     torch.Size([1, 16, 10, 10])AvgPool2d output shape:     torch.Size([1, 16, 5, 5])Flatten output shape:     torch.Size([1, 400])Linear output shape:     torch.Size([1, 120])Sigmoid output shape:     torch.Size([1, 120])Linear output shape:     torch.Size([1, 84])Sigmoid output shape:     torch.Size([1, 84])Linear output shape:     torch.Size([1, 10])</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LeNet模型&quot;&gt;&lt;a href=&quot;#LeNet模型&quot; class=&quot;headerlink&quot; title=&quot;LeNet模型&quot;&gt;&lt;/a&gt;LeNet模型&lt;/h1&gt;&lt;h3 id=&quot;原理框架图&quot;&gt;&lt;a href=&quot;#原理框架图&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-经典CNN模型-AlexNet</title>
    <link href="http://example.com/2024/07/31/%E7%BB%8F%E5%85%B8CNN%E6%A8%A1%E5%9E%8B-AlexNet/"/>
    <id>http://example.com/2024/07/31/%E7%BB%8F%E5%85%B8CNN%E6%A8%A1%E5%9E%8B-AlexNet/</id>
    <published>2024-07-31T02:29:36.459Z</published>
    <updated>2022-08-18T03:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AlexNet模型"><a href="#AlexNet模型" class="headerlink" title="AlexNet模型"></a>AlexNet模型</h1><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><img src="https://pic.rmb.bdstatic.com/bjh/92b7e57362bcd0cced6a833a55f8c4d1.png"><br><img src="https://pic.rmb.bdstatic.com/bjh/840fceff6de46d9d6ef96112f4138057.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">d2l.use_svg_display()</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(</span><br><span class="line">    nn.Conv2d(<span class="number">1</span>, <span class="number">96</span>, kernel_size=<span class="number">11</span>, stride=<span class="number">4</span>, padding=<span class="number">1</span>), nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">96</span>, <span class="number">256</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>), nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>),</span><br><span class="line">    nn.Conv2d(<span class="number">256</span>, <span class="number">384</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>), nn.ReLU(),</span><br><span class="line">    nn.Conv2d(<span class="number">384</span>, <span class="number">384</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>), nn.ReLU(),</span><br><span class="line">    nn.Conv2d(<span class="number">384</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>), nn.ReLU(),</span><br><span class="line">    nn.MaxPool2d(kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>), nn.Flatten(),</span><br><span class="line">    nn.Linear(<span class="number">6400</span>, <span class="number">4096</span>), nn.ReLU(), nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">    nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>), nn.ReLU(), nn.Dropout(p=<span class="number">0.5</span>),</span><br><span class="line">    nn.Linear(<span class="number">4096</span>, <span class="number">10</span>)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> net:</span><br><span class="line">    X = layer(X)</span><br><span class="line">    <span class="built_in">print</span>(layer.__class__.__name__, <span class="string">&quot;Output shape:\t&quot;</span>, X.shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Conv2d Output shape:     torch.Size([1, 96, 54, 54])ReLU Output shape:     torch.Size([1, 96, 54, 54])MaxPool2d Output shape:     torch.Size([1, 96, 26, 26])Conv2d Output shape:     torch.Size([1, 256, 26, 26])ReLU Output shape:     torch.Size([1, 256, 26, 26])MaxPool2d Output shape:     torch.Size([1, 256, 12, 12])Conv2d Output shape:     torch.Size([1, 384, 12, 12])ReLU Output shape:     torch.Size([1, 384, 12, 12])Conv2d Output shape:     torch.Size([1, 384, 12, 12])ReLU Output shape:     torch.Size([1, 384, 12, 12])Conv2d Output shape:     torch.Size([1, 256, 12, 12])ReLU Output shape:     torch.Size([1, 256, 12, 12])MaxPool2d Output shape:     torch.Size([1, 256, 5, 5])Flatten Output shape:     torch.Size([1, 6400])Linear Output shape:     torch.Size([1, 4096])ReLU Output shape:     torch.Size([1, 4096])Dropout Output shape:     torch.Size([1, 4096])Linear Output shape:     torch.Size([1, 4096])ReLU Output shape:     torch.Size([1, 4096])Dropout Output shape:     torch.Size([1, 4096])Linear Output shape:     torch.Size([1, 10])</code></pre><p>拿Fashion-MINST的数据集跑一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_dataloader_workers</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_fashion_mnist</span>(<span class="params">batch_size, resize=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中&quot;&quot;&quot;</span></span><br><span class="line">    trans = [transforms.ToTensor()]</span><br><span class="line">    <span class="keyword">if</span> resize:</span><br><span class="line">        trans.insert(<span class="number">0</span>, transforms.Resize(resize))</span><br><span class="line">    trans = transforms.Compose(trans)</span><br><span class="line">    mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">True</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">False</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()),</span><br><span class="line">            data.DataLoader(mnist_test, batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">128</span></span><br><span class="line">train_iter, test_iter = load_data_fashion_mnist(</span><br><span class="line">    batch_size=batch_size, resize=<span class="number">224</span>)</span><br><span class="line"><span class="comment"># 因为Fashion-MNIST图像的分辨率，低于ImageNet图像，我们将它们强行拉长到224×224</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lr, num_epochs = <span class="number">0.05</span>, <span class="number">10</span></span><br><span class="line">d2l.train_ch6(net, train_iter=train_iter, test_iter=test_iter, num_epochs=num_epochs, lr=lr, device=d2l.try_gpu())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于手头上的电脑没有独立显卡，这是沐神的截图</p><p><img src="https://pic.rmb.bdstatic.com/bjh/0ae32699f034861f2eb65ba2a09f796f.png"></p><p><del>(鼠鼠暂时没有能跑cuda的机器，只能拿李沐老师的运行效果图充数了QAQ)</del><br><del>今晚就去给拯救者配置cuda环境(逃)</del></p><h3 id="2022-8-18日更新"><a href="#2022-8-18日更新" class="headerlink" title="2022/8/18日更新"></a>2022/8/18日更新</h3><p><del>我回来辣</del><br>成功在游戏本上安装pytorch运行环境，并且可以使用cuda<br>电脑所支持的cuda版本<br><img src="https://pic.rmb.bdstatic.com/bjh/ecd7fdae19bd353d77f8a0f9a864edba.png"><br>电脑所装的的cuda版本<br><img src="https://pic.rmb.bdstatic.com/bjh/9e78cfe9c9e7dca1565719e323f6f046.png"><br>从pytorch官网装的是pytorch11.6版本(向下兼容)</p><p>我们来看一下运行效果<del>(装了一下午加一晚上人整麻了)</del><br><img src="https://pic.rmb.bdstatic.com/bjh/27af23b4d9d767ca4e396cbf65f1ea40.png"><br>运行时间<br><img src="https://pic.rmb.bdstatic.com/bjh/8c1882ec56c6ef9f3bc63c749617896f.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AlexNet模型&quot;&gt;&lt;a href=&quot;#AlexNet模型&quot; class=&quot;headerlink&quot; title=&quot;AlexNet模型&quot;&gt;&lt;/a&gt;AlexNet模型&lt;/h1&gt;&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-经典CNN模型-VGG网络</title>
    <link href="http://example.com/2024/07/31/%E7%BB%8F%E5%85%B8CNN-VGG/"/>
    <id>http://example.com/2024/07/31/%E7%BB%8F%E5%85%B8CNN-VGG/</id>
    <published>2024-07-31T02:29:36.452Z</published>
    <updated>2022-08-18T09:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VGG网络模型"><a href="#VGG网络模型" class="headerlink" title="VGG网络模型"></a>VGG网络模型</h1><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="https://pic.rmb.bdstatic.com/bjh/f0cab66ca59de0925cf9b44eaefd5c41.png"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vgg_block</span>(<span class="params">num_convs, in_channels, out_channels</span>):</span><br><span class="line">    layers = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_convs):</span><br><span class="line">        layers.append(nn.Conv2d(in_channels, out_channels,</span><br><span class="line">                                kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>))</span><br><span class="line">        layers.append(nn.ReLU())</span><br><span class="line">        in_channels = out_channels</span><br><span class="line">    layers.append(nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(*layers)</span><br><span class="line"><span class="comment"># 等效之前的Sequential装网络</span></span><br><span class="line"><span class="comment"># 这是一个单独的块</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">conv_arch = ((<span class="number">1</span>, <span class="number">64</span>), (<span class="number">1</span>, <span class="number">128</span>), (<span class="number">2</span>, <span class="number">256</span>), (<span class="number">2</span>, <span class="number">512</span>), (<span class="number">2</span>, <span class="number">512</span>))</span><br><span class="line"><span class="comment"># 分成5块，高宽减半，通道数翻倍</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg</span>(<span class="params">conv_arch</span>):</span><br><span class="line">    conv_blks = []  <span class="comment"># 建立一个列表</span></span><br><span class="line">    in_channels = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(num_convs, out_channels) <span class="keyword">in</span> conv_arch:</span><br><span class="line">        conv_blks.append(vgg_block(num_convs=num_convs,</span><br><span class="line">                         in_channels=in_channels, out_channels=out_channels))</span><br><span class="line">        in_channels = out_channels</span><br><span class="line">    <span class="comment"># 建立多个块</span></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        *conv_blks, nn.Flatten(),</span><br><span class="line">        nn.Linear(out_channels*<span class="number">7</span>*<span class="number">7</span>, <span class="number">4096</span>), nn.ReLU(),</span><br><span class="line">        nn.Dropout(<span class="number">0.5</span>), nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>), nn.ReLU(),</span><br><span class="line">        nn.Dropout(<span class="number">0.5</span>), nn.Linear(<span class="number">4096</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = vgg(conv_arch=conv_arch)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察一下每一层的形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = torch.randn(size=(<span class="number">1</span>, <span class="number">1</span>, <span class="number">224</span>, <span class="number">224</span>))</span><br><span class="line"><span class="keyword">for</span> blk <span class="keyword">in</span> net:</span><br><span class="line">    X = blk(X)</span><br><span class="line">    <span class="built_in">print</span>(blk.__class__.__name__, <span class="string">&#x27;output shape:\t&#x27;</span>, X.shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Sequential output shape:     torch.Size([1, 64, 112, 112])Sequential output shape:     torch.Size([1, 128, 56, 56])Sequential output shape:     torch.Size([1, 256, 28, 28])Sequential output shape:     torch.Size([1, 512, 14, 14])Sequential output shape:     torch.Size([1, 512, 7, 7])Flatten output shape:     torch.Size([1, 25088])Linear output shape:     torch.Size([1, 4096])ReLU output shape:     torch.Size([1, 4096])Dropout output shape:     torch.Size([1, 4096])Linear output shape:     torch.Size([1, 4096])ReLU output shape:     torch.Size([1, 4096])Dropout output shape:     torch.Size([1, 4096])Linear output shape:     torch.Size([1, 10])</code></pre><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ratio = <span class="number">4</span></span><br><span class="line">small_conv_arch = [(pair[<span class="number">0</span>], pair[<span class="number">1</span>]//ratio)<span class="keyword">for</span> pair <span class="keyword">in</span> conv_arch]</span><br><span class="line">net = vgg(small_conv_arch)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_dataloader_workers</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_fashion_mnist</span>(<span class="params">batch_size, resize=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中&quot;&quot;&quot;</span></span><br><span class="line">    trans = [transforms.ToTensor()]</span><br><span class="line">    <span class="keyword">if</span> resize:</span><br><span class="line">        trans.insert(<span class="number">0</span>, transforms.Resize(resize))</span><br><span class="line">    trans = transforms.Compose(trans)</span><br><span class="line">    mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">True</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">False</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()),</span><br><span class="line">            data.DataLoader(mnist_test, batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lr, num_epochs, batch_size = <span class="number">0.05</span>, <span class="number">10</span>, <span class="number">128</span></span><br><span class="line">train_iter, test_iter = load_data_fashion_mnist(batch_size, resize=<span class="number">224</span>)</span><br><span class="line">d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.rmb.bdstatic.com/bjh/19b9f7d52be0b70cc19416ea9a9c81e2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VGG网络模型&quot;&gt;&lt;a href=&quot;#VGG网络模型&quot; class=&quot;headerlink&quot; title=&quot;VGG网络模型&quot;&gt;&lt;/a&gt;VGG网络模型&lt;/h1&gt;&lt;h3 id=&quot;结构图&quot;&gt;&lt;a href=&quot;#结构图&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>线段树模板(对应洛谷一道线段树模板题)</title>
    <link href="http://example.com/2024/07/31/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF(%E5%AF%B9%E5%BA%94%E6%B4%9B%E8%B0%B7%E4%B8%80%E9%81%93%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98)/"/>
    <id>http://example.com/2024/07/31/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF(%E5%AF%B9%E5%BA%94%E6%B4%9B%E8%B0%B7%E4%B8%80%E9%81%93%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98)/</id>
    <published>2024-07-31T02:29:36.445Z</published>
    <updated>2022-04-16T02:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>最近正好在学线段树，搞懂后写一篇博客记录一下模板，供日后自己学习参考</em><br>原题传送门：<a href="https://www.luogu.com.cn/problem/P3372">洛谷线段树模板题</a><br><img src="https://img-blog.csdnimg.cn/914fa7ae530a4430a6c395e3e7950754.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>经典的RMQ问题，我们用线段树来解决<br>线段树有一般两种写法，一种是结构体写法，还有一种是用堆结构来写<br>本蒟蒻采用堆结构来写<br>实现的操作：<br>区间修改，区间询问。<br>注意，堆写法数组要开原数组的四倍！！！(谨记！<br>此代码已在洛谷AC，可以放心食用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 洛谷传送门：https://www.luogu.com.cn/problem/P3372</span></span><br><span class="line"><span class="comment">// 线段树模板</span></span><br><span class="line"><span class="comment">// 区间修改+区间询问</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[maxn];        <span class="comment">//原数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tree[maxn * <span class="number">4</span>]; <span class="comment">//线段树</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lazy[maxn * <span class="number">4</span>]; <span class="comment">//懒数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right)</span> <span class="comment">// pushdouw的作用是将x节点的lazy数组下传到左右儿子</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lazy[x] == <span class="number">0</span>) <span class="comment">//如果为0，则该区间没有被修改，不需要下传</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    lazy[x &lt;&lt; <span class="number">1</span>] += lazy[x];</span><br><span class="line">    tree[x &lt;&lt; <span class="number">1</span>] += lazy[x] * (mid - left + <span class="number">1</span>);</span><br><span class="line">    lazy[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[x];</span><br><span class="line">    tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[x] * (right - mid);</span><br><span class="line">    lazy[x] = <span class="number">0</span>; <span class="comment">//记得清零！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// x代表线段树的节点号,left代表原数组的区间左端点，right代表原数组的区间右端点</span></span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] = a[left];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, left, mid);</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">    tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> tar_left, <span class="type">int</span> tar_right)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="comment">// left和right代表目前访问的节点的区间左右，tar_left和tar_right代表目标区间</span></span><br><span class="line">    <span class="keyword">if</span> (left == tar_left &amp;&amp; right == tar_right)</span><br><span class="line">        <span class="keyword">return</span> tree[x];</span><br><span class="line">    <span class="comment">// 要用到下一层</span></span><br><span class="line">    <span class="built_in">pushdown</span>(x, left, right);               <span class="comment">//将上一层对这一层的影响清算完毕</span></span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;          <span class="comment">//将影响延续，继续寻找</span></span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &gt; mid) <span class="comment">//右边是大于号才算横跨两个区间！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left_ans = <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, mid);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> right_ans = <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, mid + <span class="number">1</span>, tar_right);</span><br><span class="line">        <span class="keyword">return</span> left_ans + right_ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &gt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> tar_left, <span class="type">int</span> tar_right, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//y代表修改值</span></span><br><span class="line">    <span class="keyword">if</span> (left == tar_left &amp;&amp; right == tar_right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] += (right - left + <span class="number">1</span>) * y;</span><br><span class="line">        lazy[x] += y; <span class="comment">//懒数组要标记！</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 到达这里，说明要继续向下访问，要将tree继续修改</span></span><br><span class="line">    <span class="built_in">pushdown</span>(x, left, right);</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &gt; mid) <span class="comment">// tar_right&gt;mid才是跨两个区间！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, mid, y);</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, mid + <span class="number">1</span>, tar_right, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tar_right &lt;= mid)</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, tar_right, y);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, tar_left, tar_right, y);</span><br><span class="line">    tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">if</span> (remp == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> remp1, remp2, remp3;</span><br><span class="line">            cin &gt;&gt; remp1 &gt;&gt; remp2 &gt;&gt; remp3;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, remp1, remp2, remp3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remp == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> remp1, remp2;</span><br><span class="line">            cin &gt;&gt; remp1 &gt;&gt; remp2;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, remp1, remp2) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;最近正好在学线段树，搞懂后写一篇博客记录一下模板，供日后自己学习参考&lt;/em&gt;&lt;br&gt;原题传送门：&lt;a href=&quot;https://www.luogu.com.cn/problem/P3372&quot;&gt;洛谷线段树模板题&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>算法模板(不定期更新)</title>
    <link href="http://example.com/2024/07/31/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF(%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0)/"/>
    <id>http://example.com/2024/07/31/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF(%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0)/</id>
    <published>2024-07-31T02:29:36.437Z</published>
    <updated>2024-07-31T02:59:30.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码板子"><a href="#代码板子" class="headerlink" title="代码板子"></a>代码板子</h1><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。<br>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p><p>如果数组中不存在该元素，则返回 -1 -1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> q, n;</span><br><span class="line"><span class="comment">// int k;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erfen1</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt;= tar)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; n &amp;&amp; ans &gt;= <span class="number">0</span> &amp;&amp; a[ans] == tar)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erfen2</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt;= tar)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; n &amp;&amp; ans &gt;= <span class="number">0</span> &amp;&amp; a[ans] == tar)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line">cout &lt;&lt; <span class="built_in">erfen1</span>(k) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">erfen2</span>(k) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分-浮点数"><a href="#二分-浮点数" class="headerlink" title="二分(浮点数)"></a>二分(浮点数)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 给定一个浮点数 n，求它的三次方根。</span></span><br><span class="line"><span class="comment">// 注意，结果保留 6位小数。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="type">double</span> ans, l = <span class="number">-10000</span>, r = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">while</span> (l + <span class="number">1e-7</span> &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (mid * mid * mid &lt;= a)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6f&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p><img src="https://s2.loli.net/2024/06/26/Q6EwezDgZ39avuc.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> ans[maxn][maxn];</span><br><span class="line"><span class="type">int</span> a[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(), cout.<span class="built_in">tie</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">            ans[i][j] = ans[i - <span class="number">1</span>][j] + ans[i][j - <span class="number">1</span>] - ans[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        <span class="keyword">if</span> (!(x1 &lt;= x2 &amp;&amp; y1 &lt;= y2)) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x1, x2);</span><br><span class="line">            <span class="built_in">swap</span>(y1, y2);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (ans[x2][y2] - ans[x1 - <span class="number">1</span>][y2] - ans[x2][y1 - <span class="number">1</span>] + ans[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p>1D数组版本，v[i]代表体积，w[i]代表价值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> dp[maxn], v[maxn], w[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> dp[maxn], v[maxn], w[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = v[i]; j &lt;= V; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包-朴素版"><a href="#多重背包-朴素版" class="headerlink" title="多重背包(朴素版)"></a>多重背包(朴素版)</h3><p>s[i]代表物品使用次数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> dp[maxn], v[maxn], w[maxn], s[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cnt = s[i]; cnt &gt; <span class="number">0</span>; cnt--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包-正确解法"><a href="#多重背包-正确解法" class="headerlink" title="多重背包(正确解法)"></a>多重背包(正确解法)</h3><p>二进制拆分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="comment">// 二进制拆分</span></span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[maxn], v[maxn], w[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="type">int</span> realN = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> value, weight, cnt;</span><br><span class="line">        cin &gt;&gt; weight &gt;&gt; value &gt;&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt; j *= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt -= j;</span><br><span class="line">            v[++realN] = j * weight;</span><br><span class="line">            w[realN] = j * value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v[++realN] = cnt * weight;</span><br><span class="line">            w[realN] = cnt * value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= realN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h3><p>有 N 组物品和一个容量是 V 的背包。<br>每组物品有若干个，同一组内的物品最多只能选一个。每件物品的体积是 vij，价值是 wij，其中 i是组号，j 是组内编号。求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>输出最大价值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 200</span></span><br><span class="line"><span class="type">int</span> cnt[maxn], v[maxn][maxn], w[maxn][maxn], dp[maxn];</span><br><span class="line"><span class="comment">// v是体积，w是价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; cnt[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">1</span>; z &lt;= cnt[i]; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= v[i][z])</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i][z]] + w[i][z]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 600</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> dp[maxn], a[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = -INF, dp[<span class="number">0</span>] = -INF; <span class="comment">// 考虑边界问题！因为有负数，所以dp数组的边界部分不能赋0，要赋值为负无穷，目的是不能从这里走钻空子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - <span class="number">1</span>]) + a[i][j];</span><br><span class="line">            <span class="comment">// cout &lt;&lt; dp[j] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; dp[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><p><img src="https://s2.loli.net/2024/06/26/eVNJRHu1cZdy5Gf.png" alt="image"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="type">int</span> a[maxn], dp[maxn];</span><br><span class="line"><span class="comment">// dp[i]其实代表以a[i]结尾的最大上升子序列</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= N; i++)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; dp[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><img src="https://s2.loli.net/2024/06/26/J2aYjeR9sTKufQb.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10101</span></span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line">string a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> lena, lenb;</span><br><span class="line">    cin &gt;&gt; lena &gt;&gt; lenb;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    a = <span class="string">&quot; &quot;</span> + a;</span><br><span class="line">    b = <span class="string">&quot; &quot;</span> + b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lenb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j])</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; dp[lena][lenb];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h3><p><img src="https://s2.loli.net/2024/06/26/5m6lkcCMOqAJiwj.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">char</span> a[maxn], b[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> lena, lenb;</span><br><span class="line">    cin &gt;&gt; lena;</span><br><span class="line">    cin &gt;&gt; a + <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; lenb;</span><br><span class="line">    cin &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f3f3f3f</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lenb; i++)</span><br><span class="line">        dp[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lena; i++)</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化完毕</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lenb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j])</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = <span class="number">1</span> + <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]); <span class="comment">// 不相等的话，考虑插入，修改，删除中的最小的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[lena][lenb];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><p><img src="https://s2.loli.net/2024/06/26/kWY7wM9TPqlERtH.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e1</span> + <span class="number">5</span>, M = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[M][N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">edit_distance</span><span class="params">(<span class="type">char</span> a[], <span class="type">char</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> la = <span class="built_in">strlen</span>(a + <span class="number">1</span>), lb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lb; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= la; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>, dp[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] != b[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[la][lb];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; (str[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> s[N];</span><br><span class="line">        <span class="type">int</span> limit;</span><br><span class="line">        cin &gt;&gt; (s + <span class="number">1</span>) &gt;&gt; limit;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">edit_distance</span>(str[i], s) &lt;= limit)</span><br><span class="line">            &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><p><img src="https://s2.loli.net/2024/06/26/1hXxSUgLVizsncI.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">500</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[maxn], dp[maxn][maxn], sum[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="built_in">sizeof</span>(sum));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">sum[i] = a[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">dp[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> mid = i; mid &lt; j; mid++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][mid] + dp[mid + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dwo[<span class="number">1</span>][n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码板子-1"><a href="#代码板子-1" class="headerlink" title="# 代码板子"></a># 代码板子</h3><h3 id="二分-1"><a href="#二分-1" class="headerlink" title="二分"></a>二分</h3><p>给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。<br>对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。</p><p>如果数组中不存在该元素，则返回 -1 -1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line"><span class="type">int</span> q, n;</span><br><span class="line"><span class="comment">// int k;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erfen1</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &gt;= tar)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; n &amp;&amp; ans &gt;= <span class="number">0</span> &amp;&amp; a[ans] == tar)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erfen2</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[mid] &lt;= tar)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans &lt; n &amp;&amp; ans &gt;= <span class="number">0</span> &amp;&amp; a[ans] == tar)</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line">cout &lt;&lt; <span class="built_in">erfen1</span>(k) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">erfen2</span>(k) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分-浮点数-1"><a href="#二分-浮点数-1" class="headerlink" title="二分(浮点数)"></a>二分(浮点数)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 给定一个浮点数 n，求它的三次方根。</span></span><br><span class="line"><span class="comment">// 注意，结果保留 6位小数。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line"><span class="type">double</span> ans, l = <span class="number">-10000</span>, r = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">while</span> (l + <span class="number">1e-7</span> &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (mid * mid * mid &lt;= a)</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r = mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6f&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二维前缀和-1"><a href="#二维前缀和-1" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> ans[maxn][maxn];</span><br><span class="line"><span class="type">int</span> a[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(), cout.<span class="built_in">tie</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">            ans[i][j] = ans[i - <span class="number">1</span>][j] + ans[i][j - <span class="number">1</span>] - ans[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        <span class="keyword">if</span> (!(x1 &lt;= x2 &amp;&amp; y1 &lt;= y2)) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(x1, x2);</span><br><span class="line">            <span class="built_in">swap</span>(y1, y2);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; (ans[x2][y2] - ans[x1 - <span class="number">1</span>][y2] - ans[x2][y1 - <span class="number">1</span>] + ans[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="01背包-1"><a href="#01背包-1" class="headerlink" title="01背包"></a>01背包</h3><p>1D数组版本，v[i]代表体积，w[i]代表价值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> dp[maxn], v[maxn], w[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="完全背包-1"><a href="#完全背包-1" class="headerlink" title="完全背包"></a>完全背包</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> dp[maxn], v[maxn], w[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = v[i]; j &lt;= V; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包-朴素版-1"><a href="#多重背包-朴素版-1" class="headerlink" title="多重背包(朴素版)"></a>多重背包(朴素版)</h3><p>s[i]代表物品使用次数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> dp[maxn], v[maxn], w[maxn], s[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cnt = s[i]; cnt &gt; <span class="number">0</span>; cnt--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包-正确解法-1"><a href="#多重背包-正确解法-1" class="headerlink" title="多重背包(正确解法)"></a>多重背包(正确解法)</h3><p>二进制拆分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="comment">// 二进制拆分</span></span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[maxn], v[maxn], w[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="type">int</span> realN = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> value, weight, cnt;</span><br><span class="line">        cin &gt;&gt; weight &gt;&gt; value &gt;&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt; j *= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt -= j;</span><br><span class="line">            v[++realN] = j * weight;</span><br><span class="line">            w[realN] = j * value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v[++realN] = cnt * weight;</span><br><span class="line">            w[realN] = cnt * value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= realN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j - v[i]] + w[i], dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组背包-1"><a href="#分组背包-1" class="headerlink" title="分组背包"></a>分组背包</h3><p>有 N 组物品和一个容量是 V 的背包。<br>每组物品有若干个，同一组内的物品最多只能选一个。每件物品的体积是 vij，价值是 wij，其中 i是组号，j 是组内编号。求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。</p><p>输出最大价值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N, V;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 200</span></span><br><span class="line"><span class="type">int</span> cnt[maxn], v[maxn][maxn], w[maxn][maxn], dp[maxn];</span><br><span class="line"><span class="comment">// v是体积，w是价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; V;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; cnt[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt[i]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">1</span>; z &lt;= cnt[i]; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= v[i][z])</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i][z]] + w[i][z]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[V];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数字三角形-1"><a href="#数字三角形-1" class="headerlink" title="数字三角形"></a>数字三角形</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 600</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> dp[maxn], a[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = -INF, dp[<span class="number">0</span>] = -INF; <span class="comment">// 考虑边界问题！因为有负数，所以dp数组的边界部分不能赋0，要赋值为负无穷，目的是不能从这里走钻空子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - <span class="number">1</span>]) + a[i][j];</span><br><span class="line">            <span class="comment">// cout &lt;&lt; dp[j] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(dp + <span class="number">1</span>, dp + n + <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; dp[n];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列-1"><a href="#最长上升子序列-1" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><p><img src="https://s2.loli.net/2024/06/26/eVNJRHu1cZdy5Gf.png" alt="image"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="type">int</span> a[maxn], dp[maxn];</span><br><span class="line"><span class="comment">// dp[i]其实代表以a[i]结尾的最大上升子序列</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= N; i++)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; dp[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列-1"><a href="#最长公共子序列-1" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><img src="https://s2.loli.net/2024/06/26/J2aYjeR9sTKufQb.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10101</span></span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line">string a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> lena, lenb;</span><br><span class="line">    cin &gt;&gt; lena &gt;&gt; lenb;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    a = <span class="string">&quot; &quot;</span> + a;</span><br><span class="line">    b = <span class="string">&quot; &quot;</span> + b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lenb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j])</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; dp[lena][lenb];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短编辑距离-1"><a href="#最短编辑距离-1" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h3><p><img src="https://s2.loli.net/2024/06/26/5m6lkcCMOqAJiwj.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">char</span> a[maxn], b[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> lena, lenb;</span><br><span class="line">    cin &gt;&gt; lena;</span><br><span class="line">    cin &gt;&gt; a + <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; lenb;</span><br><span class="line">    cin &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f3f3f3f</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lenb; i++)</span><br><span class="line">        dp[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lena; i++)</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化完毕</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= lena; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lenb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j])</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = <span class="number">1</span> + <span class="built_in">min</span>(<span class="built_in">min</span>(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]), dp[i - <span class="number">1</span>][j - <span class="number">1</span>]); <span class="comment">// 不相等的话，考虑插入，修改，删除中的最小的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[lena][lenb];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编辑距离-1"><a href="#编辑距离-1" class="headerlink" title="编辑距离"></a>编辑距离</h3><p><img src="https://s2.loli.net/2024/06/26/kWY7wM9TPqlERtH.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e1</span> + <span class="number">5</span>, M = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[M][N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">edit_distance</span><span class="params">(<span class="type">char</span> a[], <span class="type">char</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> la = <span class="built_in">strlen</span>(a + <span class="number">1</span>), lb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lb; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= la; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= la; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lb; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>, dp[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] != b[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[la][lb];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; (str[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> s[N];</span><br><span class="line">        <span class="type">int</span> limit;</span><br><span class="line">        cin &gt;&gt; (s + <span class="number">1</span>) &gt;&gt; limit;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">edit_distance</span>(str[i], s) &lt;= limit)</span><br><span class="line">            &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="石子合并-区间dp"><a href="#石子合并-区间dp" class="headerlink" title="石子合并(区间dp)"></a>石子合并(区间dp)</h3><p><img src="https://s2.loli.net/2024/06/26/1hXxSUgLVizsncI.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">500</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[maxn], dp[maxn][maxn], sum[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="built_in">sizeof</span>(sum));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">sum[i] = a[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">dp[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> mid = i; mid &lt; j; mid++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][mid] + dp[mid + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dwo[<span class="number">1</span>][n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数划分-计数dp"><a href="#整数划分-计数dp" class="headerlink" title="整数划分(计数dp)"></a>整数划分(计数dp)</h3><p><img src="https://s2.loli.net/2024/06/26/CplG4cnkrSKd92P.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// dp[i][j]代表用前i个数字来表示j</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; j)</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j]; <span class="comment">// 说明i用不上，直接加过来就好</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = (dp[i][j - i] + dp[i - <span class="number">1</span>][j]) % MOD; <span class="comment">// 要么用i，要么不用i，非常合理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; dp[n][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蒙德里安梦想-状压dp"><a href="#蒙德里安梦想-状压dp" class="headerlink" title="蒙德里安梦想(状压dp)"></a>蒙德里安梦想(状压dp)</h3><p><img src="https://s2.loli.net/2024/06/26/eNTOlGd34r8fSpx.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">15</span>][<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"><span class="type">bool</span> is_valid[<span class="number">1</span> &lt;&lt; <span class="number">12</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!n &amp;&amp; !m)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// swap(n,m);</span></span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(is_valid, <span class="number">0</span>, <span class="built_in">sizeof</span>(is_valid));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt_0 = <span class="number">0</span>; <span class="comment">// 记录连续的0</span></span><br><span class="line">            is_valid[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) <span class="comment">// 说明这里有一个1呗</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt_0 % <span class="number">2</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        is_valid[i] = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cnt_0++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt_0 % <span class="number">2</span>)</span><br><span class="line">                is_valid[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span> &lt;&lt; n); k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((k &amp; j) == <span class="number">0</span>) &amp;&amp; (is_valid[k | j] == <span class="literal">true</span>))</span><br><span class="line">                        dp[i][j] += dp[i - <span class="number">1</span>][k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; dp[m][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hamilton路径-状压dp"><a href="#Hamilton路径-状压dp" class="headerlink" title="Hamilton路径(状压dp)"></a>Hamilton路径(状压dp)</h3><p><img src="https://s2.loli.net/2024/06/26/JaBveVMD8ucW1oO.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> dp[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> graph[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; graph[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((i &gt;&gt; j) &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &amp; (i &gt;&gt; k))</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - (<span class="number">1</span> &lt;&lt; j)][k] + graph[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="没有上司的舞会-树形dp"><a href="#没有上司的舞会-树形dp" class="headerlink" title="没有上司的舞会(树形dp)"></a>没有上司的舞会(树形dp)</h3><p><img src="https://s2.loli.net/2024/06/26/E7ZvNfRCjzWm6qY.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="type">int</span> h[maxn];</span><br><span class="line"><span class="type">bool</span> in[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; son[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_dp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[x][<span class="number">1</span>] = h[x];</span><br><span class="line">    dp[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; son[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">get_dp</span>(son[x][i]);</span><br><span class="line">        dp[x][<span class="number">1</span>] += dp[son[x][i]][<span class="number">0</span>];</span><br><span class="line">        dp[x][<span class="number">0</span>] += <span class="built_in">max</span>(dp[son[x][i]][<span class="number">0</span>], dp[son[x][i]][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s, f;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; f;</span><br><span class="line">        in[s] = <span class="number">1</span>;</span><br><span class="line">        son[f].<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (in[i] == <span class="number">0</span>)</span><br><span class="line">            root = i;</span><br><span class="line">    <span class="built_in">get_dp</span>(root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">max</span>(dp[root][<span class="number">1</span>], dp[root][<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滑雪-记忆化搜索"><a href="#滑雪-记忆化搜索" class="headerlink" title="滑雪(记忆化搜索)"></a>滑雪(记忆化搜索)</h3><p><img src="https://s2.loli.net/2024/06/26/ynBdEaQKcJoU967.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> R,C;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">500</span>;</span><br><span class="line"><span class="type">int</span> v[maxn][maxn];</span><br><span class="line"><span class="type">int</span> cnt[maxn][maxn];</span><br><span class="line"><span class="type">int</span> graph[maxn][maxn];</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>]= &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>]= &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v[x][y])</span><br><span class="line"><span class="keyword">return</span> cnt[x][y];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> temp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> nextx=x+dirx[i];</span><br><span class="line"><span class="type">int</span> nexty=y+diry[i];</span><br><span class="line"><span class="keyword">if</span>(nextx&lt;=R&amp;&amp;nextx&gt;=<span class="number">1</span>&amp;&amp;nexty&lt;=C&amp;&amp;nexty&gt;=<span class="number">1</span>&amp;&amp;graph[nextx][nexty]&lt;graph[x][y]) &#123;</span><br><span class="line">temp=<span class="built_in">max</span>(temp,<span class="built_in">dfs</span>(nextx,nexty)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt[x][y]=temp;</span><br><span class="line">v[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;R,&amp;C);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=R; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=C; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;graph[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=R; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=C; j++) &#123;</span><br><span class="line">cnt[i][j]=<span class="built_in">dfs</span>(i,j);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,cnt[i][j]);</span><br><span class="line">v[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排列数字-dfs"><a href="#排列数字-dfs" class="headerlink" title="排列数字(dfs)"></a>排列数字(dfs)</h3><p><img src="https://s2.loli.net/2024/06/26/3pJTIkZygYoXUi1.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10</span>;</span><br><span class="line"><span class="type">bool</span> v[maxn];</span><br><span class="line"><span class="type">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (v[i] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[x] = i;</span><br><span class="line">v[i] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x - <span class="number">1</span>, n);</span><br><span class="line">v[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line"><span class="built_in">dfs</span>(n, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="N皇后-dfs"><a href="#N皇后-dfs" class="headerlink" title="N皇后(dfs)"></a>N皇后(dfs)</h3><p><img src="https://s2.loli.net/2024/06/26/kwxIWisGTrCnA3y.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100</span>;</span><br><span class="line"><span class="type">char</span> graph[maxn][maxn];</span><br><span class="line"><span class="type">int</span> xx[maxn], yy[maxn], xy[<span class="number">309</span>], yx[<span class="number">309</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (xx[x] == <span class="literal">false</span> &amp;&amp; yy[i] == <span class="literal">false</span> &amp;&amp; xy[x + i] == <span class="literal">false</span> &amp;&amp; yx[n - i + x] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">graph[x][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">xx[x] = <span class="literal">true</span>;</span><br><span class="line">yy[i] = <span class="literal">true</span>;</span><br><span class="line">xy[x + i] = <span class="literal">true</span>;</span><br><span class="line">yx[n - i + x] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line">graph[x][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">xx[x] = <span class="literal">false</span>;</span><br><span class="line">yy[i] = <span class="literal">false</span>;</span><br><span class="line">xy[x + i] = <span class="literal">false</span>;</span><br><span class="line">yx[n - i + x] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; graph[i][j];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">graph[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="走迷宫-BFS"><a href="#走迷宫-BFS" class="headerlink" title="走迷宫(BFS)"></a>走迷宫(BFS)</h3><p><img src="https://s2.loli.net/2024/06/26/tjP4s78EWyoBYTV.png" alt="image.png"><br>BFS还是有很多细节的，最重要的是：每个节点只能进队列一次，记住这个就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5000</span>;</span><br><span class="line"><span class="type">int</span> graph[maxn][maxn];</span><br><span class="line"><span class="type">bool</span> v[maxn][maxn];</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx, <span class="type">int</span> sy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line">node temp;</span><br><span class="line">temp.x = sx, temp.y = sy, temp.cnt = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(temp);</span><br><span class="line">v[sx][sy] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">node t = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> nowx = t.x;</span><br><span class="line"><span class="type">int</span> nowy = t.y;</span><br><span class="line"><span class="type">int</span> nowcnt = t.cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nextx = nowx + dirx[i];</span><br><span class="line"><span class="type">int</span> nexty = nowy + diry[i];</span><br><span class="line"><span class="type">int</span> nextcnt = nowcnt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (nextx == n &amp;&amp; nexty == m)</span><br><span class="line">&#123;</span><br><span class="line">ans = nextcnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nextx &lt;= n &amp;&amp; nextx &gt;= <span class="number">1</span> &amp;&amp; nexty &lt;= m &amp;&amp; nexty &gt;= <span class="number">1</span> &amp;&amp; v[nextx][nexty] == <span class="literal">false</span> &amp;&amp; graph[nextx][nexty] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">node nextnode;</span><br><span class="line">nextnode.x = nextx;</span><br><span class="line">nextnode.y = nexty;</span><br><span class="line">nextnode.cnt = nextcnt;</span><br><span class="line">v[nextx][nexty] = <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(nextnode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; graph[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="八数码"><a href="#八数码" class="headerlink" title="八数码"></a>八数码</h3><p><img src="https://s2.loli.net/2024/07/06/Kzq7HEoIJBRWwLP.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string graph;</span><br><span class="line"><span class="comment">// const int maxn = 10101;</span></span><br><span class="line"><span class="comment">// char graph[maxn][maxn];</span></span><br><span class="line"><span class="type">int</span> startx, starty;</span><br><span class="line">map&lt;string, <span class="type">bool</span>&gt; v;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">test</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((str[i] - <span class="string">&#x27;0&#x27;</span>) != i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// bool v[maxn][maxn];</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    string state;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    node s;</span><br><span class="line">    s.cnt = <span class="number">0</span>;</span><br><span class="line">    s.x = x;</span><br><span class="line">    s.state = graph;</span><br><span class="line">    s.y = y;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    v[s.state] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        node ttt = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">test</span>(ttt.state))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, ttt.cnt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tempx = dirx[i] + ttt.x;</span><br><span class="line">            <span class="type">int</span> tempy = diry[i] + ttt.y;</span><br><span class="line">            <span class="type">int</span> tempcnt = ttt.cnt + <span class="number">1</span>;</span><br><span class="line">            string tempstate = ttt.state;</span><br><span class="line">            <span class="built_in">swap</span>(tempstate[(tempx - <span class="number">1</span>) * <span class="number">3</span> + tempy], tempstate[(ttt.x - <span class="number">1</span>) * <span class="number">3</span> + ttt.y]);</span><br><span class="line">            <span class="keyword">if</span> (tempx &lt;= <span class="number">3</span> &amp;&amp; tempx &gt; <span class="number">0</span> &amp;&amp; tempy &gt; <span class="number">0</span> &amp;&amp; tempy &lt;= <span class="number">3</span> &amp;&amp; v[tempstate] == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                node temp;</span><br><span class="line">                temp.cnt = tempcnt;</span><br><span class="line">                temp.x = tempx;</span><br><span class="line">                temp.y = tempy;</span><br><span class="line">                temp.state = tempstate;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; tempstate[(tempx - 1) * 3 + tempy] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">                q.<span class="built_in">push</span>(temp);</span><br><span class="line">                v[tempstate] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    graph = <span class="string">&quot; &quot;</span> + graph;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> te;</span><br><span class="line">            cin &gt;&gt; te;</span><br><span class="line">            graph += te;</span><br><span class="line">            <span class="keyword">if</span> (te == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                startx = i, starty = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; startx &lt;&lt; &quot; &quot; &lt;&lt; starty &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; graph[(startx - 1) * 3 + starty] &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">bfs</span>(startx, starty);</span><br><span class="line">    <span class="keyword">if</span> (ans &lt; <span class="number">100000</span>)</span><br><span class="line">        cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h3><p><img src="https://s2.loli.net/2024/07/06/tcFyAS56LTCgpJQ.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tree[maxn];</span><br><span class="line"><span class="type">bool</span> v[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    v[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> l = tree[x].<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> finalcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[tree[x][i]] == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cnt;</span><br><span class="line">            cnt = <span class="built_in">dfs</span>(tree[x][i]);</span><br><span class="line">            sum += cnt;</span><br><span class="line">            finalcnt = <span class="built_in">max</span>(cnt, finalcnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    finalcnt = <span class="built_in">max</span>(finalcnt, n - sum);</span><br><span class="line">    ans = <span class="built_in">min</span>(finalcnt, ans);</span><br><span class="line">    <span class="keyword">return</span> sum; <span class="comment">// 以x为根的子节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        tree[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        tree[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> graph[maxn][maxn];</span><br><span class="line"><span class="type">bool</span> v[maxn];</span><br><span class="line"><span class="type">int</span> dist[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(graph, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(graph));</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        graph[u][v] = graph[v][u] = <span class="built_in">min</span>(graph[u][v], w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        graph[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min1 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((v[j] == <span class="literal">false</span>) &amp;&amp; (min1 == <span class="number">-1</span> || dist[j] &lt; dist[min1]))</span><br><span class="line">                min1 = j;</span><br><span class="line">        &#125;</span><br><span class="line">        v[min1] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (dist[min1] &gt; <span class="number">10000</span>)</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[j] == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = <span class="built_in">min</span>(dist[j], graph[min1][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += dist[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; <span class="number">0x3f3f3f3f</span> || flag == <span class="literal">false</span>)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal算法求最小生成树"><a href="#Kruskal算法求最小生成树" class="headerlink" title="Kruskal算法求最小生成树"></a>Kruskal算法求最小生成树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1000100</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> s, e, cost;</span><br><span class="line">&#125; edge[maxn];</span><br><span class="line"><span class="type">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)] = fa[<span class="built_in">find</span>(y)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v, w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        edge[i].cost = w;</span><br><span class="line">        edge[i].s = u;</span><br><span class="line">        edge[i].e = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + <span class="number">1</span> + m, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa1 = <span class="built_in">find</span>(fa[edge[i].s]);</span><br><span class="line">        <span class="type">int</span> fa2 = <span class="built_in">find</span>(fa[edge[i].e]);</span><br><span class="line">        <span class="keyword">if</span> (fa1 == fa2)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">combine</span>(fa1, fa2);</span><br><span class="line">        ans += edge[i].cost;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == n - <span class="number">1</span>)</span><br><span class="line">        cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bellman-ford算法"><a href="#bellman-ford算法" class="headerlink" title="bellman-ford算法"></a>bellman-ford算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.acwing.com/problem/content/851/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s, e, cost;</span><br><span class="line">&#125; edge[<span class="number">100000010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dist[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s, e, c;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; e &gt;&gt; c;</span><br><span class="line">        edge[i].s = s;</span><br><span class="line">        edge[i].e = e;</span><br><span class="line">        edge[i].cost = c;</span><br><span class="line">    &#125;</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dist[edge[j].e] = <span class="built_in">min</span>(dist[edge[j].e], dist[edge[j].s] + edge[j].cost);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dist[n] &lt; <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">        cout &lt;&lt; dist[n];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> graph[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> path[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> v[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">memset</span>(path, <span class="number">0x3f3f3f3f</span>, <span class="built_in">sizeof</span>(path));</span><br><span class="line"><span class="built_in">memset</span>(graph, <span class="number">0x3f3f3f3f</span>, <span class="built_in">sizeof</span>(graph));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">v[i] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">graph[x][y] = <span class="built_in">min</span>(graph[x][y], z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">path[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> min1 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((min1 == <span class="number">-1</span> || path[j] &lt; path[min1]) &amp;&amp; v[j] == <span class="literal">false</span>)</span><br><span class="line">min1 = j;</span><br><span class="line">&#125;</span><br><span class="line">v[min1] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (v[j] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">path[j] = <span class="built_in">min</span>(path[j], path[min1] + graph[min1][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (path[n] != <span class="number">0x3f3f3f3f</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, path[n]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 给定三个正整数A，B和C，求A ^B  mod C的结果</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fastpower</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a %= c;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b)</span><br><span class="line">&#123;</span><br><span class="line">a %= c;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">ans = (ans*a) % c;</span><br><span class="line">b = b / <span class="number">2</span>;</span><br><span class="line">a = (a*a)%c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">cout &lt;&lt; <span class="built_in">fastpower</span>(a, b, c) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="string查找子串"><a href="#string查找子串" class="headerlink" title="string查找子串"></a>string查找子串</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string tar;</span><br><span class="line">cin&gt;&gt;tar;****</span><br><span class="line">string remp;</span><br><span class="line">cin&gt;&gt;remp;</span><br><span class="line"><span class="keyword">if</span>(tar.<span class="built_in">find</span>(remp)!=string::npos)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="priority-queue自定义排序"><a href="#priority-queue自定义排序" class="headerlink" title="priority_queue自定义排序"></a>priority_queue自定义排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.cost &gt; b.cost; <span class="comment">//从小到大</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b; <span class="comment">//从小到大</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node, vector&lt;node&gt;, cmp1&gt; a;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp2&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        node t;</span><br><span class="line">        t.cost = remp;</span><br><span class="line">        a.<span class="built_in">push</span>(t);</span><br><span class="line">        b.<span class="built_in">push</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a.<span class="built_in">top</span>().cost &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        b.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">区间dp模板</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//初始dp数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt; n; ++i)</span><br><span class="line">        &#123;                                <span class="comment">//枚举区间的起点</span></span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>;         <span class="comment">//根据起点和长度得出终点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j; ++k) <span class="comment">//枚举最优分割点</span></span><br><span class="line">                                         <span class="comment">//状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.luogu.com.cn/problem/P4017</span></span><br><span class="line"><span class="comment">// 题解：https://www.luogu.com.cn/problem/solution/P4017</span></span><br><span class="line"><span class="comment">// 拓扑排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 5000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 80112002</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="type">int</span> in[maxn], out[maxn]; <span class="comment">//一个是入度，一个是出度</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans[maxn];     <span class="comment">// ans[i]表示到达第i个结点时，此时拥有的路径总数</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2;</span><br><span class="line">        cin &gt;&gt; remp1 &gt;&gt; remp2;        <span class="comment">// remp2吃remp1</span></span><br><span class="line">        edge[remp1].<span class="built_in">push_back</span>(remp2); <span class="comment">//被吃掉的后面接捕食者</span></span><br><span class="line">        in[remp2]++;</span><br><span class="line">        out[remp1]++; <span class="comment">//右节点入度+1,左节点出度+1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (in[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            ans[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> front = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge[front].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            in[edge[front][i]]--;</span><br><span class="line">            ans[edge[front][i]] = (ans[edge[front][i]] + ans[front]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (in[edge[front][i]] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(edge[front][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (out[i] == <span class="number">0</span>) <span class="comment">//只要出度为0，说明是食物链终点（切不可用sort快排取最大！因为出度为0的点不止一个！）</span></span><br><span class="line">            ans1 += ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans1 % mod;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码板子&quot;&gt;&lt;a href=&quot;#代码板子&quot; class=&quot;headerlink&quot; title=&quot;代码板子&quot;&gt;&lt;/a&gt;代码板子&lt;/h1&gt;&lt;h3 id=&quot;二分&quot;&gt;&lt;a href=&quot;#二分&quot; class=&quot;headerlink&quot; title=&quot;二分&quot;&gt;&lt;/a&gt;二分&lt;/h</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第十届蓝桥杯题解  2022/2/19</title>
    <link href="http://example.com/2024/07/31/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/31/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-31T02:29:36.430Z</published>
    <updated>2022-04-16T02:39:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十届蓝桥杯题解"><a href="#第十届蓝桥杯题解" class="headerlink" title="第十届蓝桥杯题解"></a>第十届蓝桥杯题解</h1><p><em>注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码蒟蒻当时参考其他大佬的题解文章所在的网址，鸣谢大佬，如有错误，欢迎各位大佬指正<br>有部分网址是提交答案的oj传送门</em></p><h3 id="平方和"><a href="#平方和" class="headerlink" title="平方和"></a>平方和</h3><p>直接暴力穷举，无需赘述</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67813</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp = n % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (remp == <span class="number">1</span> || remp == <span class="number">2</span> || remp == <span class="number">0</span> || remp == <span class="number">9</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2019</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">judge</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            ans1+=i;</span><br><span class="line">            ans2+=i*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans2;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数列求和"><a href="#数列求和" class="headerlink" title="数列求和"></a>数列求和</h3><p>枚举过程中注意%1000</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67813</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">20190328</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= <span class="number">20190324</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = (a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>] + a[i - <span class="number">3</span>])%<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a[<span class="number">20190324</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大降雨量"><a href="#最大降雨量" class="headerlink" title="最大降雨量"></a>最大降雨量</h3><p>一道脑筋急转弯题。我们可以这样去考虑，49天一共可以分为7组，这7组的中位数再取其中位数，可以画一个邻接矩阵，可以发现绝对比答案大的数字只有15个,那么答案是49-15</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://blog.csdn.net/linruier2017/article/details/88803441?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC%E5%8D%81%E5%B1%8AC++&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-88803441.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">34</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h3><p>一道bfs模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// bfs路径打印</span></span><br><span class="line"><span class="comment">// https://blog.csdn.net/ryo_218/article/details/88830082?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1</span></span><br><span class="line"><span class="type">int</span> m, n; <span class="comment">//长，高</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    string path;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> maze[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;; <span class="comment">// D&lt;L&lt;R&lt;U</span></span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> dir[<span class="number">4</span>] = &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> startx, <span class="type">int</span> starty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n &amp;&amp; y == m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> startx, <span class="type">int</span> starty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    visit[startx][starty] = <span class="number">1</span>;</span><br><span class="line">    node p;</span><br><span class="line">    p.x = startx, p.y = starty;</span><br><span class="line">    q.<span class="built_in">push</span>(p);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>().x;</span><br><span class="line">        <span class="type">int</span> y = q.<span class="built_in">front</span>().y;</span><br><span class="line">        string way = q.<span class="built_in">front</span>().path;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(x, y, startx, starty))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; way;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> rempx = x + dirx[i];</span><br><span class="line">            <span class="type">int</span> rempy = y + diry[i];</span><br><span class="line">            string rempway = way + dir[i];</span><br><span class="line">            <span class="keyword">if</span> (maze[rempx][rempy] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; visit[rempx][rempy] == <span class="number">0</span> &amp;&amp; rempx &lt;= n &amp;&amp; rempx &gt; <span class="number">0</span> &amp;&amp; rempy &lt;= m &amp;&amp; rempy &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;&quot;1 &quot;;</span></span><br><span class="line">                <span class="comment">//  cout&lt;&lt;rempway&lt;&lt;endl;</span></span><br><span class="line">                visit[rempx][rempy] = <span class="number">1</span>;</span><br><span class="line">                node remp;</span><br><span class="line">                remp.x = rempx, remp.y = rempy, remp.path = rempway;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; rempway &lt;&lt; endl;</span></span><br><span class="line">                q.<span class="built_in">push</span>(remp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            maze[i][j] = remp[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 样例</span></span><br><span class="line"><span class="comment">50 30</span></span><br><span class="line"><span class="comment">01010101001011001001010110010110100100001000101010</span></span><br><span class="line"><span class="comment">00001000100000101010010000100000001001100110100101</span></span><br><span class="line"><span class="comment">01111011010010001000001101001011100011000000010000</span></span><br><span class="line"><span class="comment">01000000001010100011010000101000001010101011001011</span></span><br><span class="line"><span class="comment">00011111000000101000010010100010100000101100000000</span></span><br><span class="line"><span class="comment">11001000110101000010101100011010011010101011110111</span></span><br><span class="line"><span class="comment">00011011010101001001001010000001000101001110000000</span></span><br><span class="line"><span class="comment">10100000101000100110101010111110011000010000111010</span></span><br><span class="line"><span class="comment">00111000001010100001100010000001000101001100001001</span></span><br><span class="line"><span class="comment">11000110100001110010001001010101010101010001101000</span></span><br><span class="line"><span class="comment">00010000100100000101001010101110100010101010000101</span></span><br><span class="line"><span class="comment">11100100101001001000010000010101010100100100010100</span></span><br><span class="line"><span class="comment">00000010000000101011001111010001100000101010100011</span></span><br><span class="line"><span class="comment">10101010011100001000011000010110011110110100001000</span></span><br><span class="line"><span class="comment">10101010100001101010100101000010100000111011101001</span></span><br><span class="line"><span class="comment">10000000101100010000101100101101001011100000000100</span></span><br><span class="line"><span class="comment">10101001000000010100100001000100000100011110101001</span></span><br><span class="line"><span class="comment">00101001010101101001010100011010101101110000110101</span></span><br><span class="line"><span class="comment">11001010000100001100000010100101000001000111000010</span></span><br><span class="line"><span class="comment">00001000110000110101101000000100101001001000011101</span></span><br><span class="line"><span class="comment">10100101000101000000001110110010110101101010100001</span></span><br><span class="line"><span class="comment">00101000010000110101010000100010001001000100010101</span></span><br><span class="line"><span class="comment">10100001000110010001000010101001010101011111010010</span></span><br><span class="line"><span class="comment">00000100101000000110010100101001000001000000000010</span></span><br><span class="line"><span class="comment">11010000001001110111001001000011101001011011101000</span></span><br><span class="line"><span class="comment">00000110100010001000100000001000011101000000110011</span></span><br><span class="line"><span class="comment">10101000101000100010001111100010101001010000001000</span></span><br><span class="line"><span class="comment">10000010100101001010110000000100101010001011101000</span></span><br><span class="line"><span class="comment">00111100001000010000000110111000000001000000001011</span></span><br><span class="line"><span class="comment">10000001100111010111010001000110111010101101111000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h3><p>额，这个题我的代码只能参考！~ 答案是跑不出来的 ~只能讲一下我的代码的大(cuo)概(wu)思路，首先求出p，q，求出p，q后转化为求逆元问题，再转化为求 C^d%e的问题。从网上查了很长时间也没搞懂怎么优化。直接摆烂了、、、、、<br>(数论不会我是菜鸡)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 素数筛+欧几里得拓展+快速幂</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d = <span class="number">212353</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n = <span class="number">1001733993063167141</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> C = <span class="number">20190324</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p, q;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> remp;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span> <span class="comment">//(a^b) %c</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = a % c;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        a = a % c;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        b = b / <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">ex_gcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> &amp;x, <span class="type">long</span> <span class="type">long</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> d = <span class="built_in">ex_gcd</span>(b, a % b, x, y);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125; <span class="comment">//这个是解 ax+by=c的特殊解方程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            p = i, q = n % i;</span><br><span class="line">    &#125; <span class="comment">// p,q得到</span></span><br><span class="line">    <span class="comment">// p = 891234941, q = 1123984201</span></span><br><span class="line">    <span class="comment">// 那么可得d * e % sum == 1, 这是一个典型的求解ax=c(mod b)问题。</span></span><br><span class="line">    <span class="comment">// 也就是e*d =1(mod sum)，我们可以用扩展欧几里得算法来求解</span></span><br><span class="line">    <span class="comment">// 欧几里得拓展</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x, y;</span><br><span class="line">    e = <span class="built_in">ex_gcd</span>(d, sum, x, y);</span><br><span class="line">    e = (e % sum + sum) % sum;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; e;</span></span><br><span class="line">    <span class="comment">// 现在求 C^e%d</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">fast_power</span>(C, e, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全二叉树权值"><a href="#完全二叉树权值" class="headerlink" title="完全二叉树权值"></a>完全二叉树权值</h3><p>一道数据结构概念题，只要知道完全二叉树的基本概念就迎刃而解了，0-2^1-1是第一层，2^1~2^2-1是第二层，2^2-&gt;2^2-1是第三层….以此类推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2695</span></span><br><span class="line"><span class="comment">// 完全二叉树基本性质</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> root[<span class="number">100000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> limit = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; a[<span class="number">1</span>];</span><br><span class="line">    root[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    limit = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        root[num] += a[i];</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> == limit)</span><br><span class="line">        &#123;</span><br><span class="line">            limit = limit * <span class="number">2</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> max1 = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (max1 &lt;= root[i])</span><br><span class="line">        &#123;</span><br><span class="line">            max1 = root[i];</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外卖店队列"><a href="#外卖店队列" class="headerlink" title="外卖店队列"></a>外卖店队列</h3><p>一道模拟题，如果直接以时间单位为循环入手直接TLE(别问我怎么知道的T—T)，可以考虑枚举每一订单，当商店接到订单之后才去处理它，可以大大减少时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://lx.lanqiao.cn/problem.page?gpid=T2697</span></span><br><span class="line"><span class="comment">// 参考题解：https://blog.csdn.net/qq_26139541/article/details/121284273?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164491769216781685391475%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164491769216781685391475&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-121284273.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%A4%96%E5%8D%96%E5%BA%97%E4%BC%98%E5%85%88%E7%BA%A7&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 模拟</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1000000</span></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; order[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, m, t;</span><br><span class="line"><span class="type">int</span> ans[maxn];        <span class="comment">//记录每一家商店的分值</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> last[maxn]; <span class="comment">// 记录第i个商店上一次订单出现的时间</span></span><br><span class="line"><span class="type">bool</span> first[maxn];     <span class="comment">//进入优先序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; order[i].first &gt;&gt; order[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(order + <span class="number">1</span>, order + <span class="number">1</span> + m); <span class="comment">//让订单从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ts = order[i].first, id = order[i].second;</span><br><span class="line">        <span class="keyword">if</span> (ts != last[id]) <span class="comment">//防止出现同一时间同一家店的订单的影响</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[id] = ans[id] - (ts - last[id] - <span class="number">1</span>); <span class="comment">//清算从上一次订单到现在中间所下降的分值</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans[id] = <span class="built_in">max</span>(ans[id], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ans[id] &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            first[id] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[id] += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans[id] &gt; <span class="number">5</span>)</span><br><span class="line">            first[id] = <span class="literal">true</span>;</span><br><span class="line">        last[id] = ts; <span class="comment">//更新last数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123; <span class="comment">//将第m天统一进行更新（因为之前的操作的更新只会在有订单时更新，大部分商店ans数据仍然处于上一次订单更新状态）</span></span><br><span class="line">        <span class="keyword">if</span> (last[i] != t)</span><br><span class="line">            ans[i] = ans[i] - (t - last[i]);</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &lt;= <span class="number">3</span>) </span><br><span class="line">            first[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (first[i])</span><br><span class="line">            res++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷的时候用了结构体存数据，思路更清晰了一些</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lastcall;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> flag;<span class="comment">//记录是否在优先序列 </span></span><br><span class="line">&#125;shop[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> time;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">&#125;ding[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(node2 a,node2 b)</span> <span class="comment">//排订单 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.time!=b.time)</span><br><span class="line"><span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> time,id;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;time,&amp;id);</span><br><span class="line">ding[i].time=time;</span><br><span class="line">ding[i].id=id;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">sort</span>(ding+<span class="number">1</span>,ding+<span class="number">1</span>+m,cmp1);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id=ding[i].id;</span><br><span class="line"><span class="type">int</span> time=ding[i].time;</span><br><span class="line"><span class="keyword">if</span>(shop[id].lastcall!=time)</span><br><span class="line">&#123;</span><br><span class="line">shop[id].ans-=(time<span class="number">-1</span>-shop[id].lastcall); <span class="comment">//有订单的时候，不减反增 </span></span><br><span class="line">&#125;</span><br><span class="line">shop[id].ans=<span class="built_in">max</span>(shop[id].ans,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(shop[id].flag&amp;&amp;shop[id].ans&lt;=<span class="number">3</span>)</span><br><span class="line">shop[id].flag=<span class="literal">false</span>;</span><br><span class="line">shop[id].ans+=<span class="number">2</span>;</span><br><span class="line">shop[id].lastcall=time;</span><br><span class="line"><span class="keyword">if</span>(shop[id].ans&gt;<span class="number">5</span>)</span><br><span class="line">shop[id].flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//更新最后一天 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(shop[i].lastcall!=t)</span><br><span class="line">&#123;</span><br><span class="line">shop[i].ans-=(t-shop[i].lastcall); <span class="comment">//有订单的时候，不减反增 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//shop[id].ans=max(shop[id].ans,0);</span></span><br><span class="line"><span class="keyword">if</span>(shop[i].flag&amp;&amp;shop[i].ans&lt;=<span class="number">3</span>)</span><br><span class="line">shop[i].flag=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(shop[i].flag)</span><br><span class="line">res++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第十届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第十届蓝桥杯题解&quot;&gt;&lt;/a&gt;第十届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第十二届蓝桥杯题解  2022/2/19</title>
    <link href="http://example.com/2024/07/31/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/31/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-31T02:29:36.423Z</published>
    <updated>2022-04-16T02:39:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十二届蓝桥杯题解"><a href="#第十二届蓝桥杯题解" class="headerlink" title="第十二届蓝桥杯题解"></a>第十二届蓝桥杯题解</h1><p><em>注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码蒟蒻当时参考其他大佬的题解文章所在的网址，鸣谢大佬，如有错误，欢迎各位大佬指正<br>有部分网址是提交答案的oj传送门</em></p><h3 id="A-卡片"><a href="#A-卡片" class="headerlink" title="A 卡片"></a>A 卡片</h3><p>暴力枚举即可，注意小错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=280825</span></span><br><span class="line"><span class="comment">// 3181</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp = n % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[remp] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        a[remp]--;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="number">2021</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">judge</span>(num+<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-直线"><a href="#B-直线" class="headerlink" title="B 直线"></a>B 直线</h3><p>这道题想了很久，没有想到特别好的办法，只能暴力枚举。<br>注意当斜率不存在时要单独讨论，最后加上，否则会出bug</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">&#125; point[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">map&lt;pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;, <span class="type">bool</span>&gt; visit;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge</span><span class="params">(node p1, node p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x1 = p1.x, x2 = p2.x;</span><br><span class="line">    <span class="type">double</span> y1 = p1.y, y2 = p2.y;</span><br><span class="line">    <span class="keyword">if</span> (x1 == x2)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">double</span> k = (y2 - y1) / (x2 - x1);</span><br><span class="line">    <span class="type">double</span> b = (x2 * y1 - y2 * x1) / (x2 - x1);</span><br><span class="line">    <span class="keyword">if</span> (!visit[&#123;k, b&#125;])</span><br><span class="line">    &#123;</span><br><span class="line">        visit[&#123;k, b&#125;] = <span class="number">1</span>;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">21</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            point[++num].x = i;</span><br><span class="line">            point[num].y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">judge</span>(point[i], point[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans + <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷后的代码，更精简了一些</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;, <span class="type">bool</span>&gt; line;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x1 = <span class="number">0</span>; x1 &lt; <span class="number">20</span>; x1++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> y1 = <span class="number">0</span>; y1 &lt; <span class="number">21</span>; y1++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x2 = <span class="number">0</span>; x2 &lt; <span class="number">20</span>; x2++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> y2 = <span class="number">0</span>; y2 &lt; <span class="number">21</span>; y2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x1 == x2)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="type">double</span> k = (y1 - y2) / (x1 - x2);</span><br><span class="line"><span class="type">double</span> b = (y2 * x1 - y1 * x2) / (x2 - x1);</span><br><span class="line"><span class="keyword">if</span> (!line[&#123;k, b&#125;])</span><br><span class="line">ans++;</span><br><span class="line">line[&#123;k, b&#125;] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-货物摆放"><a href="#C-货物摆放" class="headerlink" title="C 货物摆放"></a>C 货物摆放</h3><p>可以考虑将所有的因数直接枚举，然后三重循环判断即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tar = <span class="number">2021041820210418</span>;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> remp = tar;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(remp); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (remp % i == <span class="number">0</span>)</span><br><span class="line">        &#123; </span><br><span class="line">            a.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i * i != remp)</span><br><span class="line">                a.<span class="built_in">push_back</span>(remp / i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; k++)</span><br><span class="line">                <span class="keyword">if</span> (a[i] * a[j] * a[k] == tar)</span><br><span class="line">                    ans++;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-路径"><a href="#D-路径" class="headerlink" title="D 路径"></a>D 路径</h3><p>额，这道题就是最短路问题，弗洛伊德会超时，但是问题不大(反正可以等答案出来之后再交一个答案上去)。迪杰斯特拉似乎不会超时，两种解法都粘在下面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// floyed算法(会超时大概一分钟之后得到答案/捂脸）)</span></span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 答案：10266837</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">2030</span>][<span class="number">2030</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">gcd</span>(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt; <span class="number">21</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> cost = <span class="built_in">lcm</span>(i, j);</span><br><span class="line">            edge[i][j] = cost;</span><br><span class="line">            edge[j][i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2021</span>; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[i][j] = <span class="built_in">min</span>(edge[i][k] + edge[k][j], edge[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">    cout&lt;&lt;edge[<span class="number">1</span>][<span class="number">2021</span>];</span><br><span class="line">    <span class="comment">// cout&lt;&lt;lcm(3,5);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 迪杰斯特拉算法(首次使用紫书模板)</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">2030</span>][<span class="number">2030</span>];</span><br><span class="line"><span class="type">int</span> path[<span class="number">2030</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">2030</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">gcd</span>(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, INF, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt; <span class="number">21</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> cost = <span class="built_in">lcm</span>(i, j);</span><br><span class="line">            edge[i][j] = cost;</span><br><span class="line">            edge[j][i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 算法开始</span></span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">    <span class="built_in">memset</span>(path, INF, <span class="built_in">sizeof</span>(path));</span><br><span class="line">    path[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> start, min1 = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[j] &amp;&amp; path[j] &lt;= min1)</span><br><span class="line">            &#123;</span><br><span class="line">                min1 = path[j];</span><br><span class="line">                start = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[start] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            path[j] = <span class="built_in">min</span>(path[j], path[start] + edge[start][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; path[<span class="number">2021</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-回路数"><a href="#E-回路数" class="headerlink" title="E 回路数"></a>E 回路数</h3><p>这道题是状态压缩数组，具体注释看代码，更直观</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 题解：https://blog.csdn.net/weixin_50533561/article/details/122753240?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164440729916780264043462%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164440729916780264043462&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-122753240.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%9E%E8%B7%AF%E8%AE%A1%E6%95%B0&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 状压dp</span></span><br><span class="line"><span class="type">bool</span> edge[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">22</span>, M = <span class="number">1</span> &lt;&lt; <span class="number">21</span>; <span class="comment">// 即M为二进制10000...000(21个0), M-1 = 21个1</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[M][<span class="number">30</span>];           <span class="comment">// dp[i][j]代表状态为i时,走到第j个点时此时的方案数</span></span><br><span class="line"><span class="comment">// 数组要long long，否则溢出(别问我怎么知道的T_T)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gcd</span>(x, y) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">21</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">21</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judge</span>(i, j))</span><br><span class="line">                edge[i][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 状压dp</span></span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;                                                          <span class="comment">//从1号点出发，此时状态为00000...0001</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M - <span class="number">1</span>; i++)                                       <span class="comment">// M-1后为111....11111(21个1)，枚举所有状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">21</span>; j++)                                      <span class="comment">//枚举1-21点</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; (j - <span class="number">1</span>) &amp; <span class="number">1</span>)                                          <span class="comment">//从左边数第j个，此时若为真，则代表该状态中从左数第j个已走过</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">21</span>; k++)                              <span class="comment">//若状态中含有该点，则枚举j联通的点，寻找以k为中转到达j点</span></span><br><span class="line">                    <span class="keyword">if</span> (edge[k][j] &amp;&amp; (i - (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) &gt;&gt; (k - <span class="number">1</span>) &amp; <span class="number">1</span>) <span class="comment">//在未走j之前，状态为 i-(1&lt;&lt;j) 判断是否走过k点</span></span><br><span class="line">                    <span class="comment">//(i - (1 &lt;&lt; (j - 1))) &gt;&gt; k &amp; 1)判断i状态时没走j是否走了k</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i][j] += dp[(i - (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)))][k]; <span class="comment">//若走过k，说明到达j的状态i可以由挖去j但是含有k的状态完成</span></span><br><span class="line">                    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">21</span>; i++) <span class="comment">// dp[1111111..1111][i]代表最终走完并且终点为i点的情况</span></span><br><span class="line">    <span class="comment">//要从i=2开始！因为终点不可能是起点！</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans += dp[M - <span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-砝码称重"><a href="#F-砝码称重" class="headerlink" title="F 砝码称重"></a>F 砝码称重</h3><p>类背包，暴力枚举即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/m0_46260869/article/details/115838370?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164441437816780366563231%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164441437816780366563231&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-115838370.first_rank_v2_pc_rank_v29&amp;utm_term=%E7%A0%9D%E7%A0%81%E7%A7%B0%E9%87%8D&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 类背包问题+dp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 200000</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cost[<span class="number">110</span>];</span><br><span class="line"><span class="type">bool</span> dp[<span class="number">110</span>][maxn]; <span class="comment">// dp[i][j]代表重量j能否由前i个砝码称出</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; cost[i], sum += cost[i];</span><br><span class="line">    <span class="comment">// sum为上界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)       <span class="comment">//枚举1-n个物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= sum; j++) <span class="comment">//枚举所有可能重量</span></span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j]; <span class="comment">//之前能称的，现在仍然可以称</span></span><br><span class="line">            <span class="keyword">if</span> (dp[i<span class="number">-1</span>][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cost[i] == j)</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j + cost[i]])</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][<span class="built_in">abs</span>(j - cost[i])])</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sum; i++)</span><br><span class="line">        <span class="keyword">if</span> (dp[n][i])</span><br><span class="line">            ans++;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-左儿子右兄弟"><a href="#F-左儿子右兄弟" class="headerlink" title="F 左儿子右兄弟"></a>F 左儿子右兄弟</h3><p>树形dp<br>关键是：对于任意一个子节点，它的最大深度是子节点的子树最大深度+儿子数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 题解：https://blog.csdn.net/qq_52652816/article/details/122333311?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%B7%A6%E5%AD%A9%E5%AD%90%E5%8F%B3%E5%85%84%E5%BC%9F&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-122333311.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 如果我们把&gt;2的兄弟节点标号排序的话，那么标号在最后一个节点它的深度是最大的，整棵任意节点的高度就等于高度加深度，所以如果我们想要获得更大的高度，只需要把高度最大的那个节点找出来，将它放到最后一个即可。</span></span><br><span class="line"><span class="comment">// 这样的话，递归关系就出来了，找到高度最大的孩子节点，加上它距离原来的父节点的深度</span></span><br><span class="line"><span class="comment">// 知识点：树形dp</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1000090</span>]; <span class="comment">// dp[i]代表第i个结点当根节点时，此时以它为结点的子树的深度最大为多少</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span>  <span class="comment">// x为当前节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=edge[x].<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> max1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="comment">//寻找子树高度最大的子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> son=edge[x][i];</span><br><span class="line">        <span class="built_in">dfs</span>(son);</span><br><span class="line">        max1=<span class="built_in">max</span>(max1,dp[son]);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[x]=max1+len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        edge[remp].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; dp[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十二届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第十二届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第十二届蓝桥杯题解&quot;&gt;&lt;/a&gt;第十二届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第十一届蓝桥杯题解  2022/2/19</title>
    <link href="http://example.com/2024/07/31/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/31/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-31T02:29:36.416Z</published>
    <updated>2022-04-16T02:39:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十一届蓝桥杯题解"><a href="#第十一届蓝桥杯题解" class="headerlink" title="第十一届蓝桥杯题解"></a>第十一届蓝桥杯题解</h1><p><em>注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码蒟蒻当时参考其他大佬的题解文章所在的网址，鸣谢大佬，如有错误，欢迎各位大佬指正<br>有部分网址是提交答案的oj传送门</em></p><h3 id="门牌制作"><a href="#门牌制作" class="headerlink" title="门牌制作"></a>门牌制作</h3><p>直接枚举即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://oj.ecustacm.cn/problem.php?id=1508</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">10</span>==<span class="number">2</span>)</span><br><span class="line">            a++;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=<span class="built_in">find</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="既约分数"><a href="#既约分数" class="headerlink" title="既约分数"></a>既约分数</h3><p>直接从头开始枚举即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(y,x%y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2020</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gcd</span>(i,j)==<span class="number">1</span>)</span><br><span class="line">ans++;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蛇形填数"><a href="#蛇形填数" class="headerlink" title="蛇形填数"></a>蛇形填数</h3><p>一道很经典的题，很多oj上都有的练习题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://oj.ecustacm.cn/problem.php?id=1510</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++)</span><br><span class="line">        ans+=(i*<span class="number">4</span>);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者直接用数学公式计算，算出通项公式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 规律：设a(n)是n行h列的元素， a(n)-a(n-1)=4*(n-1)</span></span><br><span class="line"><span class="comment">// a(n)=2*n*(n-1)+1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">2</span>*<span class="number">20</span>*<span class="number">19</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七段码"><a href="#七段码" class="headerlink" title="七段码"></a>七段码</h3><p>一道深搜回溯问题，首先用dfs(1)到dfs(7)利用回溯多层递归将所有的点亮方式枚举，然后在dfs(8)中对每一层的不同种情况进行judge判断即可<br>实质上是之前的递归将所有的可能情况进行罗列，在最后一层递归中进行判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://oj.ecustacm.cn/problem.php?id=1511</span></span><br><span class="line"><span class="comment">// dfs+并查集+回溯</span></span><br><span class="line"><span class="comment">// 思路：首先用dfs(1)到dfs(7)利用回溯多层递归将所有的点亮方式枚举</span></span><br><span class="line"><span class="comment">// 然后在dfs(8)中对每一层的不同种情况进行judge判断即可</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> father[<span class="number">8</span>]; <span class="comment">//并查集数组</span></span><br><span class="line"><span class="type">int</span> use[<span class="number">8</span>];    <span class="comment">//判断是否点亮</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[<span class="number">1</span>][<span class="number">2</span>] = edge[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">2</span>][<span class="number">1</span>] = edge[<span class="number">2</span>][<span class="number">7</span>] = edge[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">3</span>][<span class="number">2</span>] = edge[<span class="number">3</span>][<span class="number">4</span>] = edge[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">4</span>][<span class="number">3</span>] = edge[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">5</span>][<span class="number">4</span>] = edge[<span class="number">5</span>][<span class="number">6</span>] = edge[<span class="number">5</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">6</span>][<span class="number">1</span>] = edge[<span class="number">6</span>][<span class="number">5</span>] = edge[<span class="number">6</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    father[<span class="built_in">find</span>(x)] = father[<span class="built_in">find</span>(y)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i][j] &amp;&amp; use[i] &amp;&amp; use[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> fa1 = <span class="built_in">find</span>(i);</span><br><span class="line">                <span class="type">int</span> fa2 = <span class="built_in">find</span>(j);</span><br><span class="line">                <span class="keyword">if</span> (fa1 != fa2)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">connect</span>(fa1, fa2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (use[i] &amp;&amp; father[i] == i)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;<span class="comment">//将所有的亮灯都连起来，看看是不是相连</span></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>)</span><br><span class="line">        ans++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">judge</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    use[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>);</span><br><span class="line">    use[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>); <span class="comment">//回溯！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回文数日期"><a href="#回文数日期" class="headerlink" title="回文数日期"></a>回文数日期</h3><p>呃，用了内置的函数，在c语言网上是ac的，但是蓝桥杯的官网直接编译错误，可能是蓝桥杯编译器版本问题，仅供参考</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.dotcpp.com/oj/problem2571.html</span></span><br><span class="line"><span class="comment">// 用到了C++自带的转换函数，在C语言网的oj能过，但是蓝桥杯的oj跑不了，嘛，当拓展思维了</span></span><br><span class="line"><span class="type">int</span> ji[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> run[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(string tar)</span> <span class="comment">//判断一个日期是否合法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string y = tar.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    string m = tar.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">    string d = tar.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> year, month, day;</span><br><span class="line">    <span class="keyword">if</span> (!y.<span class="built_in">empty</span>())</span><br><span class="line">        year = <span class="built_in">stoi</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (!m.<span class="built_in">empty</span>())</span><br><span class="line">        month = <span class="built_in">stoi</span>(m);</span><br><span class="line">    <span class="keyword">if</span> (!d.<span class="built_in">empty</span>())</span><br><span class="line">        day = <span class="built_in">stoi</span>(d);</span><br><span class="line">    <span class="keyword">if</span> ((year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (month &lt;= <span class="number">12</span> &amp;&amp; month &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (day &lt;= run[month] &amp;&amp; day &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (month &lt;= <span class="number">12</span> &amp;&amp; month &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (day &lt;= ji[month] &amp;&amp; day &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    string now;</span><br><span class="line">    cin &gt;&gt; now;</span><br><span class="line">    <span class="type">int</span> start2 = <span class="built_in">stoi</span>(now.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="type">int</span> start1 = <span class="built_in">stoi</span>(now.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start1; i &lt;= <span class="number">9999</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        string front = <span class="built_in">to_string</span>(i);</span><br><span class="line">        string after = front;</span><br><span class="line">        <span class="built_in">reverse</span>(after.<span class="built_in">begin</span>(), after.<span class="built_in">end</span>());</span><br><span class="line">        string a = front + after;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= now)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(a))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start2; i &lt;= <span class="number">99</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string front = <span class="built_in">to_string</span>(i);</span><br><span class="line">        string after = front;</span><br><span class="line">        <span class="built_in">reverse</span>(after.<span class="built_in">begin</span>(), after.<span class="built_in">end</span>());</span><br><span class="line">        string a = front + front;</span><br><span class="line">        a += after;</span><br><span class="line">        a += after;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= now)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(a))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;judge(now);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="成绩分析"><a href="#成绩分析" class="headerlink" title="成绩分析"></a>成绩分析</h3><p>按步模拟即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.dotcpp.com/oj/problem2591.html</span></span><br><span class="line"><span class="comment">// 注意四舍五入的写法</span></span><br><span class="line"><span class="comment">// ans1 = lower_bound(a + 1, a + 1 + n, 85) - a-1;</span></span><br><span class="line"><span class="comment">// 后面要多减去1，因为数组从1开始存数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">int</span> ans1 = <span class="built_in">lower_bound</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, <span class="number">85</span>) - a<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> ans2 = <span class="built_in">lower_bound</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, <span class="number">60</span>) - a<span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> a1=n-ans1;</span><br><span class="line">    <span class="type">double</span> a2=n-ans2;</span><br><span class="line">    a1=a1/n*<span class="number">100</span>;</span><br><span class="line">    a2=a2/n*<span class="number">100</span>;</span><br><span class="line">    a2=<span class="built_in">int</span>(a2+<span class="number">0.5</span>);</span><br><span class="line">    a1=<span class="built_in">int</span>(a1+<span class="number">0.5</span>);</span><br><span class="line">    cout&lt;&lt;a2&lt;&lt;<span class="string">&quot;%&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;a1&lt;&lt;<span class="string">&quot;%&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平面分析"><a href="#平面分析" class="headerlink" title="平面分析"></a>平面分析</h3><p>一道数学题，直接搬公式即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十一届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第十一届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第十一届蓝桥杯题解&quot;&gt;&lt;/a&gt;第十一届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第六届蓝桥杯题解  2022/3/22</title>
    <link href="http://example.com/2024/07/31/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/31/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-31T02:29:36.409Z</published>
    <updated>2022-04-16T02:39:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六届蓝桥杯题解"><a href="#第六届蓝桥杯题解" class="headerlink" title="第六届蓝桥杯题解"></a>第六届蓝桥杯题解</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>新蝙蝠侠太好看了！！！姥爷牛逼！！！<br><img src="https://img-blog.csdnimg.cn/f83f829feff64591897de0e79423debb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>强推去看！！！！！</p><h3 id="方程整数解"><a href="#方程整数解" class="headerlink" title="方程整数解"></a>方程整数解</h3><p><img src="https://img-blog.csdnimg.cn/d754088bc2314575b5e732d27bd89c41.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题可以直接暴力来写，答案有点坑，题目没有说不是负数！答案是 -30</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67081</span></span><br><span class="line"><span class="comment">// 答案：-30</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">40</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">40</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt;= <span class="number">40</span>; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * i + j * j + z * z == <span class="number">1000</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, j);</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, z);</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="星系炸弹"><a href="#星系炸弹" class="headerlink" title="星系炸弹"></a>星系炸弹</h3><p><img src="https://img-blog.csdnimg.cn/354d4b5219ca46b8ad426d27fce9e96c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接嗯模拟即可，其实也可以直接用excel来算 <del>（太犯规了）</del>，代码解法贴在下面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67081</span></span><br><span class="line"><span class="comment">// 模拟</span></span><br><span class="line"><span class="comment">// 答案：2017-8-05</span></span><br><span class="line"><span class="type">int</span> month[<span class="number">2</span>][<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>,</span><br><span class="line">                    <span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y, m, d;</span><br><span class="line">    y = <span class="number">2014</span>;</span><br><span class="line">    m = <span class="number">11</span>;</span><br><span class="line">    d = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum - (month[<span class="number">1</span>][m] - d) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d += sum;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum -= (month[<span class="number">1</span>][m] - d);</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (m == <span class="number">13</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m = <span class="number">1</span>;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum - (month[<span class="number">0</span>][m] - d) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d += sum;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum -= (month[<span class="number">0</span>][m] - d);</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (m == <span class="number">13</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m = <span class="number">1</span>;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷的写法，更清晰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> mon[<span class="number">2</span>][<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> y,m,d;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">y=<span class="number">2014</span>,m=<span class="number">11</span>,d=<span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> last=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">while</span>(last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y%<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(last&gt;=(mon[<span class="number">0</span>][m]-d))</span><br><span class="line">&#123;</span><br><span class="line">last-=(mon[<span class="number">0</span>][m]-d);</span><br><span class="line">d=<span class="number">0</span>;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">d+=last;</span><br><span class="line">last=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">m=<span class="number">1</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(last&gt;=(mon[<span class="number">1</span>][m]-d))</span><br><span class="line">&#123;</span><br><span class="line">last-=(mon[<span class="number">1</span>][m]-d);</span><br><span class="line">d=<span class="number">0</span>;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">d+=last;</span><br><span class="line">last=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">m=<span class="number">1</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="奇妙的数字"><a href="#奇妙的数字" class="headerlink" title="奇妙的数字"></a>奇妙的数字</h3><p><img src="https://img-blog.csdnimg.cn/92fb0087d02e4feea7baf28962fc7a64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接暴力就完了，从1到1000枚举，算到谁是谁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67081</span></span><br><span class="line"><span class="comment">// 暴力枚举</span></span><br><span class="line"><span class="type">int</span> visit[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        visit[x % <span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt1++;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        visit[y % <span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt2++;</span><br><span class="line">        y /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt1 + cnt2 != <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i] != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(i * i * i, i * i))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格子中输出"><a href="#格子中输出" class="headerlink" title="格子中输出"></a>格子中输出</h3><p><img src="https://img-blog.csdnimg.cn/273706240b5f4502a6a7ea7815370736.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b7489e08975741ea85b6510ae7b05b99.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题实属有点恶心，如果不知道printf的这种用法多半是寄了 <del>（比如说我）</del><br> <strong>(width-2-strlen(buf))/2,” “,buf,(width-2-strlen(buf)+1)/2,” “</strong><br>因为它题目要求如果没有办法中间，要向左上靠，所以前面是除2，后面直接减去</p><h3 id="九数组"><a href="#九数组" class="headerlink" title="九数组"></a>九数组</h3><p><img src="https://img-blog.csdnimg.cn/4c3d77fc760f477485327db653e2e88f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/72f4206767f042c498fdba94d4f2c121.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题考察的是对深搜回溯的理解，dfs回溯写多的可以妙出答案<br><strong>t = x[k], x[k] = x[i], x[i] = t;</strong></p><h3 id="牌型种数"><a href="#牌型种数" class="headerlink" title="牌型种数"></a>牌型种数</h3><p><img src="https://img-blog.csdnimg.cn/67ab867c4ca04fb19ba4edd2c9d9f474.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d2c5013770644eebb8233f9919a1fa8c.png" alt="在这里插入图片描述"><br>简化一下模型，就是13种牌，每种牌有四张，然后取13张，有多少种取法<br>这道题解法很多：<br>首先是暴力枚举，直接枚举每种牌的个数,如果和能等于13就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>;a &lt; <span class="number">5</span>;a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>;b &lt; <span class="number">5</span>;b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>;c &lt; <span class="number">5</span>;c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">0</span>;d &lt; <span class="number">5</span>;d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> e = <span class="number">0</span>;e &lt; <span class="number">5</span>;e++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> f = <span class="number">0</span>;f &lt; <span class="number">5</span>;f++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> g = <span class="number">0</span>;g &lt; <span class="number">5</span>;g++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>;h &lt; <span class="number">5</span>;h++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>;k &lt; <span class="number">5</span>;k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>;l &lt; <span class="number">5</span>;l++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">0</span>;m &lt; <span class="number">5</span>;m++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a+b+c+d+e+f+g+h+i+j+k+l+m) == <span class="number">13</span>)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有就是用深搜来写<br>思路很巧妙，一开始没想到，想到就很容易</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/alidadaaaa/article/details/79690108?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164793048016780274131254%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164793048016780274131254&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-79690108.142^v3^pc_search_result_cache,143^v4^control&amp;utm_term=%E7%89%8C%E5%9E%8B%E7%A7%8D%E6%95%B0&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> cardnum)</span> <span class="comment">// n是代表牌的花色，cardnum代表牌的总数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">13</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cardnum == <span class="number">13</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cardnum &gt; <span class="number">13</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷换了一种写法，还是第二种思路，写法更清晰严谨</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> cardnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cardnum&gt;<span class="number">13</span>&amp;&amp;num&gt;<span class="number">14</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">14</span>&amp;&amp;cardnum==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&lt;=<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">3</span>);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="手链样式"><a href="#手链样式" class="headerlink" title="手链样式"></a>手链样式</h3><p><img src="https://img-blog.csdnimg.cn/cac6bf69c48c4cc890f18d98bcb60b41.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们首先要理解它题目的转动和反转的意思<br>就好比AAABBBBCCCCC是一个链<br>首先我们理解第一个词，转动—–手链是一个环，所以说呢，我们先放第一个简单的情况进行类比<br>第一种情况就是 AAABBBBCCCCC,然后串成环，头部的A和尾部的C就连接起来了<br>现在我们进行一次转动，转动一个单位，字符串就成了AABBBBCCCCCA,但是呢，在手链这个环中，样式还是没变，也就是说，当我们转动其中一种情况的环时，同时能诞生出好几种不同字符串相同样式的环，这些情况就不能算进去。<br>另外一种情况翻转，翻转这种情况的实际上其实就是将手链转动一周，例如：AAABBBBCCCCC转动一周后就是CCCCCBBBBAAA。<br>那么问题来了，我们搜到一种排列方式，我们要标记他的转动和翻转，怎么实现呢？<br>很简单也很巧妙！！！比如AAABBBBCCCCC，我们将其str=str+str，自己加上自己，相同的字符串连到一起，这样变成AAABBBBCCCCCAAABBBBCCCCC！!这样就可以解决转动的问题！我们再将字符串倒序，就可以解决反转的问题！！！<br>因此综上所述，我们有效的处理这两种限制情况的办法就是构建两个个新的字符串，一个为两个字符串相拼接，另一个是将前一个字符串倒序。（temp1 = str + str，temp=reverse（str+str））<br><a href="https://blog.csdn.net/bettle_king/article/details/115028506?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164795808916780269877692%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164795808916780269877692&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-115028506.142%5Ev3%5Epc_search_result_cache,143%5Ev4%5Econtrol&utm_term=%E6%89%8B%E9%93%BE%E6%A0%B7%E5%BC%8F&spm=1018.2226.3001.4187">参考大佬思路</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/bettle_king/article/details/115028506?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164793155016782184611226%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164793155016782184611226&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-115028506.142^v3^pc_search_result_cache,143^v4^control&amp;utm_term=%E6%89%8B%E9%93%BE%E6%A0%B7%E5%BC%8F&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 环上问题</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;string&gt; a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string tar = <span class="string">&quot;AAABBBBCCCCC&quot;</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].<span class="built_in">find</span>(tar) != string::npos) <span class="comment">//假如在已经储存的字符串依次遍历找不到新字符串的子串</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        string remp1 = tar + tar;</span><br><span class="line">        a.<span class="built_in">push_back</span>(remp1);</span><br><span class="line">        <span class="built_in">reverse</span>(remp1.<span class="built_in">begin</span>(), remp1.<span class="built_in">end</span>());</span><br><span class="line">        a.<span class="built_in">push_back</span>(remp1);</span><br><span class="line">        ans++;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(tar.<span class="built_in">begin</span>(), tar.<span class="built_in">end</span>()));</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外补一下这个next_premutation的说明，这是stl内置求一个序列全排列的函数，可以自动枚举不同次序字符串<br>模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">cout&lt;&lt;a[i];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_premutation</span>(<span class="number">0</span>,len<span class="number">-1</span>))</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qian2213762498/article/details/79683905?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164795839916781683966330%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164795839916781683966330&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-79683905.142%5Ev3%5Epc_search_result_cache,143%5Ev4%5Econtrol&utm_term=next_permutation&spm=1018.2226.3001.4187">next_premutation详解</a></p><h3 id="饮料换购"><a href="#饮料换购" class="headerlink" title="饮料换购"></a>饮料换购</h3><p>直接模拟就行，老老实实按步骤来<br><img src="https://img-blog.csdnimg.cn/ee67e81af30e4201809167863e8091fe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2796</span></span><br><span class="line"><span class="comment">// 嗯模拟</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ping = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">while</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        num--;</span><br><span class="line">        ans++;</span><br><span class="line">        ping++;</span><br><span class="line">        <span class="keyword">if</span> (ping == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ping = <span class="number">0</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="垒骰子"><a href="#垒骰子" class="headerlink" title="垒骰子"></a>垒骰子</h3><p><img src="https://img-blog.csdnimg.cn/86156e3b9f5a401ba1d7a1afd91ad1ec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题的题目很坑，当时做的时候看样例一脸懵逼，两个骰子为啥会有500多种方法？<br>其实可以想象一下，一个骰子，当朝上的方向固定时，它可以转动：<br><img src="https://img-blog.csdnimg.cn/9d33bcce42824cda860e737b558e966f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>理解题意之后，可以考虑两种方式入手<br>第一种：深搜：（TLE）只能37分<br>这应该时考场上没有办法的办法了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://lx.lanqiao.cn/problem.page?gpid=T2797</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> link[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; edge;</span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// n个骰子，m个排斥关系</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    edge[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">    edge[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">    edge[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">    edge[<span class="number">6</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">            link[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt, <span class="type">int</span> up)</span> <span class="comment">// up代表上方数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == n)</span><br><span class="line">    &#123;</span><br><span class="line">        (ans++) % mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) <span class="comment">//枚举下一个上方数字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; link[up][edge[i]] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (link[up][edge[i]]) <span class="comment">// 如果和下面的骰子不矛盾</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">dfs</span>(cnt + <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">start</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2;</span><br><span class="line">        cin &gt;&gt; remp1 &gt;&gt; remp2;</span><br><span class="line">        link[remp1][remp2] = link[remp2][remp1] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans * <span class="built_in">fast_power</span>(<span class="number">4</span>, n, mod)) % mod;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：dp（TLE）75分<br>dp[i][j]代表第i层骰子朝上的面是j时，此时的方案数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// dp解法：http://lx.lanqiao.cn/problem.page?gpid=T2797</span></span><br><span class="line"><span class="comment">// 75分</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">50000</span>][<span class="number">7</span>]; <span class="comment">// dp[i][j]代表第i层j朝上时，此时有多少种方案</span></span><br><span class="line"><span class="type">int</span> op[<span class="number">7</span>];              <span class="comment">//对立面</span></span><br><span class="line"><span class="type">int</span> conflict[<span class="number">7</span>][<span class="number">7</span>];     <span class="comment">//冲突</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    op[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">    op[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">    op[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    op[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">    op[<span class="number">6</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2;</span><br><span class="line">        cin &gt;&gt; remp1 &gt;&gt; remp2;</span><br><span class="line">        conflict[remp1][remp2] = conflict[remp2][remp1] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="comment">//枚举层数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++) <span class="comment">//枚举上面的骰子顶部数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">6</span>; k++) <span class="comment">//枚举上面骰子顶部数字</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> down = op[k];</span><br><span class="line">                <span class="keyword">if</span> (conflict[j][down] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][k] = dp[i][k] + dp[i - <span class="number">1</span>][j];</span><br><span class="line">                    dp[i][k] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = ans + dp[n][i];</span><br><span class="line">        ans %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans * <span class="built_in">fast_power</span>(<span class="number">4</span>, n, mod);</span><br><span class="line">    ans %= mod;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种：矩阵快速幂（AC）100<br><del>（我不会我是菜鸡）</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第六届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第六届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第六届蓝桥杯题解&quot;&gt;&lt;/a&gt;第六届蓝桥杯题解&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第八届蓝桥杯题解  2022/3/13</title>
    <link href="http://example.com/2024/07/31/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/31/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-31T02:29:36.401Z</published>
    <updated>2022-04-16T02:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八届蓝桥杯题解"><a href="#第八届蓝桥杯题解" class="headerlink" title="第八届蓝桥杯题解"></a>第八届蓝桥杯题解</h1><h3 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h3><p><em><strong><del>鼠鼠开学又延迟了呜呜呜呜呜呜呜呜</del></strong></em><br>我以为高考结束是我的最长的假期<br>但是事实证明：<br>我太年轻了.jpg<br><del>（所以这是你摆烂的理由吗fw）</del><br><img src="https://img-blog.csdnimg.cn/c92043afb4e54c92a73b7e5956f71b22.gif" alt="在这里插入图片描述"><br><del>言归正传</del></p><h3 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h3><p><img src="https://img-blog.csdnimg.cn/18bf8f44d0b54d3195dd0b0092bedc72.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8118255842a042449bb5cde98c806d16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以考虑深搜来做，只要能到边界我们认为就是可以走出来，那么咱们怎么知道他走不出来呢？处理方式很简单，众所周知，细心的你肯定能发现，假如想每个方格只走一次且一直走下去是不可能的，如果走不出来，肯定是在兜圈子，那么我们只要当走到走过的地点，我们认为它不行。实现很简单，设一个visit数组即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="comment">// 答案：31</span></span><br><span class="line"><span class="type">char</span> edge[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; dirx, diry;</span><br><span class="line"><span class="type">int</span> visit[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(x &lt;= <span class="number">10</span> &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="number">10</span> &amp;&amp; y &gt;= <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (visit[x][y]) <span class="comment">//如果走不出去，肯定是走到原来走过的点转圈圈</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> tar = edge[x][y];</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> next_x = x + dirx[tar];</span><br><span class="line">    <span class="type">int</span> next_y = y + diry[tar];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(next_x, next_y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;D&#x27;</span>] = <span class="number">1</span>, diry[<span class="string">&#x27;D&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;U&#x27;</span>] = <span class="number">-1</span>, diry[<span class="string">&#x27;U&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;L&#x27;</span>] = <span class="number">0</span>, diry[<span class="string">&#x27;L&#x27;</span>] = <span class="number">-1</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;R&#x27;</span>] = <span class="number">0</span>, diry[<span class="string">&#x27;R&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            edge[i][j + <span class="number">1</span>] = remp[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(i, j))</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">样例：</span></span><br><span class="line"><span class="comment">UDDLUULRUL</span></span><br><span class="line"><span class="comment">UURLLLRRRU</span></span><br><span class="line"><span class="comment">RRUURLDLRD</span></span><br><span class="line"><span class="comment">RUDDDDUUUU</span></span><br><span class="line"><span class="comment">URUDLLRRUU</span></span><br><span class="line"><span class="comment">DURLRLDLRL</span></span><br><span class="line"><span class="comment">ULLURLLRDU</span></span><br><span class="line"><span class="comment">RDLULLRDDD</span></span><br><span class="line"><span class="comment">UUDDUDUDLL</span></span><br><span class="line"><span class="comment">ULRDLUURRR</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>二刷的新写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">char</span>,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; dir;</span><br><span class="line"><span class="type">char</span> maze[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> visit[<span class="number">100</span>][<span class="number">100</span>]; </span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dir[<span class="string">&#x27;U&#x27;</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">dir[<span class="string">&#x27;D&#x27;</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">dir[<span class="string">&#x27;L&#x27;</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">dir[<span class="string">&#x27;R&#x27;</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(x&lt;=<span class="number">10</span>&amp;&amp;x&gt;=<span class="number">1</span>&amp;&amp;y&lt;=<span class="number">10</span>&amp;&amp;y&gt;=<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(visit[x][y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">visit[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> d=maze[x][y];</span><br><span class="line"><span class="type">int</span> rempx=x+dir[d].first;</span><br><span class="line"><span class="type">int</span> rempy=y+dir[d].second;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dfs</span>(rempx,rempy); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">string remp;</span><br><span class="line">cin&gt;&gt;remp;</span><br><span class="line"><span class="type">int</span> l=remp.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;l;j++)</span><br><span class="line">&#123;</span><br><span class="line">maze[i][j+<span class="number">1</span>]=remp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="built_in">sizeof</span>(visit));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(i,j))</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="跳蚱蜢"><a href="#跳蚱蜢" class="headerlink" title="跳蚱蜢"></a>跳蚱蜢</h3><p><img src="https://img-blog.csdnimg.cn/ac73a688bd2f47de9cbac42d08b996d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>一道bfs题，第一眼看上去没啥思路，很难想到是bfs，但是想到了就很简单，我们考虑用数字字符串模拟，0代表空盘子，一切变换围绕空盘子展开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// bfs模板题</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string path;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line">string start = <span class="string">&quot;087654321&quot;</span>;</span><br><span class="line">string tar = <span class="string">&quot;012345678&quot;</span>; <span class="comment">// 0代表空盘子</span></span><br><span class="line"><span class="type">int</span> dir[] = &#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">map&lt;string, <span class="type">bool</span>&gt; visit;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string str, <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == ch)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node s;</span><br><span class="line">    s.path = start;</span><br><span class="line">    s.step = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        string remp = now.path;</span><br><span class="line">        <span class="keyword">if</span> (visit[remp])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        visit[remp] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> nowstep = now.step;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">find</span>(remp, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; remp &lt;&lt; &quot; &quot; &lt;&lt; nowstep &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string next = remp;</span><br><span class="line">            <span class="built_in">swap</span>(next[pos], next[(pos + dir[i] + <span class="number">9</span>) % <span class="number">9</span>]); <span class="comment">//防止溢出</span></span><br><span class="line">            <span class="keyword">if</span> (next == tar)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = nowstep + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node nextnode;</span><br><span class="line">            nextnode.path = next;</span><br><span class="line">            nextnode.step = nowstep + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(nextnode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方格分割"><a href="#方格分割" class="headerlink" title="方格分割"></a>方格分割</h3><p><img src="https://img-blog.csdnimg.cn/5b2675f731234ab8a57a6ab0d13a817b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6b45c1e9f8e941f18171a3fb234fc301.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这道题第一眼看很吓人，但是有了突破口很容易，因为图形是对称，所以构造分割线肯定在图形中心开始延展，因为对称，所以向一个方向延申，其另一头必然从相反一头延展。我们只要记录能延展到边界的分割线个数即可<br>结果要除4，因为有旋转对称，只要能通过旋转得到，就是同一个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// dfs深搜</span></span><br><span class="line"><span class="comment">// 思路很巧妙，利用中心点向边缘发散，因为是对称的，所以扩展方向只有两种，免去了最终判断是否是对称的必要</span></span><br><span class="line"><span class="comment">// 只需要计算能到达边界的分割线个数即可</span></span><br><span class="line"><span class="comment">// 结果需要除4，因为旋转相同算同一种分法</span></span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span> || y == <span class="number">1</span> || x == <span class="number">7</span> || y == <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (visit[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    visit[<span class="number">8</span> - x][<span class="number">8</span> - y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">7</span> &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="number">7</span> &amp;&amp; y &gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">dfs</span>(x + dirx[i], y + diry[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    visit[x][y] = <span class="number">0</span>;</span><br><span class="line">    visit[<span class="number">8</span> - x][<span class="number">8</span> - y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; ans / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新：二刷的时候又仔细想了一下，感觉不是很严谨，visit回溯修改应该放在for里面，虽然感觉有点问题，但是答案两种写法结果一样，不知道什么原因，有懂哥知道的话说一下<br>这是二刷的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> dirx[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">7</span>||y==<span class="number">1</span>||y==<span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx=x+dirx[i];</span><br><span class="line"><span class="type">int</span> rempy=y+diry[i];</span><br><span class="line"><span class="keyword">if</span>(visit[rempx][rempy])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">visit[rempx][rempy]=visit[<span class="number">8</span>-rempx][<span class="number">8</span>-rempy]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(rempx,rempy);</span><br><span class="line">visit[rempx][rempy]=visit[<span class="number">8</span>-rempx][<span class="number">8</span>-rempy]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visit[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">cout&lt;&lt;ans/<span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字母组串"><a href="#字母组串" class="headerlink" title="字母组串"></a>字母组串</h3><p><img src="https://img-blog.csdnimg.cn/12477a6a08b2462fbe4c80422b51a820.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>其实道理很简单，长度为n的字符串肯定由n-1个字符串得到，n-1个字符串缺少的字母有三种情况：缺a，缺b，缺c<br>无脑加起来就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// 简单递归</span></span><br><span class="line"><span class="comment">// a个A，b个B，c个C 字母，能组成多少个不同的长度为n的串。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span> || c &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(a, b, c - <span class="number">1</span>, n - <span class="number">1</span>) + <span class="built_in">f</span>(a - <span class="number">1</span>, b, c, n - <span class="number">1</span>) + <span class="built_in">f</span>(a, b - <span class="number">1</span>, c, n - <span class="number">1</span>); <span class="comment">// 填空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简单递归，n个字符由n-1的三种字符相加而成</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">f</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公共子串"><a href="#最大公共子串" class="headerlink" title="最大公共子串"></a>最大公共子串</h3><p><img src="https://img-blog.csdnimg.cn/7f5605a0679b4996aae0af80af6268b3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这个也很容易，a[i][j]的含义是截至第一个字符串i位置和第二个字符串j位置相同字符的个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 256</span></span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// 这个不难，看懂思路就可以填出来</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[N][N];</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(s1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>) * N * N);</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= len2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j] = a[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>; <span class="comment">//填空</span></span><br><span class="line">                <span class="keyword">if</span> (a[i][j] &gt; max)</span><br><span class="line">                    max = a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">f</span>(<span class="string">&quot;abcdkkk&quot;</span>, <span class="string">&quot;baabcdadabc&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则问题"><a href="#正则问题" class="headerlink" title="正则问题"></a>正则问题</h3><p><img src="https://img-blog.csdnimg.cn/8747d79c7c654922b2c6a2ed4f753976.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""><br>题目意思有点晦涩，大概是定义新运算吧(<del>正则我也不知道是什么东西</del>)<br>遇到“|”就比较其左右两边的大小 如样例((xx|xxx)x|(x|xx))xx<br>(xx|xxx)的长度为3，遇到x加上1得4，(x|xx)=2，4|2=4，遇到<br>xx得到6<br>这个思路是从大佬学的，思路确实很强悍，化繁为简，很难想到，但是想到就很容易<br>大体思路就是：设置一个max值，temp进行计数，每当遇到“|”或者“）”就结算一次，将max更新，然后计数器temp清零</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2823</span></span><br><span class="line"><span class="comment">// 递归(思路很巧妙)</span></span><br><span class="line"><span class="type">int</span> pos; <span class="comment">//指针</span></span><br><span class="line"><span class="type">int</span> len; <span class="comment">//字符串长度</span></span><br><span class="line">string str;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ans</span><span class="params">()</span> <span class="comment">// ans()计算的是一个&quot;(...)&quot;值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            temp += <span class="built_in">ans</span>(); <span class="comment">//遇到</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            max1 = <span class="built_in">max</span>(temp, max1); <span class="comment">//时刻更新这个max1，到最后直接返回max1</span></span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            max1 = <span class="built_in">max</span>(temp, max1);</span><br><span class="line">            <span class="keyword">return</span> max1; <span class="comment">//切记：这个地方temp就别清零了！！因为括号还可能有&#x27;x&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    max1 = <span class="built_in">max</span>(temp, max1);</span><br><span class="line">    <span class="keyword">return</span> max1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    len = str.<span class="built_in">length</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">ans</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包子凑数"><a href="#包子凑数" class="headerlink" title="包子凑数"></a>包子凑数</h3><p><img src="https://img-blog.csdnimg.cn/b4ada1b44a4f42a683bb46a76b271cf0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>完全背包问题<br>这个地方有一个结论，就是假如这些包子数的公因数是1，答案就是有限个，否则是INF<br>关于这个结论的解释：如果输入的数的最大公约数不为1，那么就会有无数种数目是凑不出的，比如最大公约数是3，那么选出n笼后的结果就一定是3的倍数，这样不是3的倍数的数字就凑不出了。<br>（鸣谢cjmdyl大佬！！！结论的解释！）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// 完全背包</span></span><br><span class="line"><span class="comment">// 记住：假如输入的数最大公约数不是1，则就是INF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10010</span></span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> visit[maxn];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0和任何数的最大公因数是这个数自己</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gcd</span>(x, y) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; value[i];</span><br><span class="line">        flag = <span class="built_in">gcd</span>(flag, value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;INF&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        visit[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = value[i]; j &lt;= maxn; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[j - value[i]])</span><br><span class="line">                    visit[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[i])</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第八届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第八届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第八届蓝桥杯题解&quot;&gt;&lt;/a&gt;第八届蓝桥杯题解&lt;/h1&gt;&lt;h3 id=&quot;胡言乱语&quot;&gt;&lt;a href=&quot;#胡言乱语&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第九届蓝桥杯题解  2022/3/8</title>
    <link href="http://example.com/2024/07/31/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/31/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-31T02:29:36.395Z</published>
    <updated>2022-04-16T02:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第九届蓝桥杯题解"><a href="#第九届蓝桥杯题解" class="headerlink" title="第九届蓝桥杯题解"></a>第九届蓝桥杯题解</h1><p><em>本应该是上周就发出来的，前几天考试，鸽了两天</em><br><em>（<del>生产队的驴也不敢这么休息吧</del>）</em><br><img src="https://img-blog.csdnimg.cn/1db2d1b188854c48b5e7c268a87c1cd7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><del>鬼灭之刃真好看</del>（划去）</p><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><p>很简单的一道签到题，其实不用程序算，可以直接用等比数列算一下，然后让程序约一下分就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; gcd(1048575, 524288) &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; <span class="number">1048575</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="number">524288</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="星期一"><a href="#星期一" class="headerlink" title="星期一"></a>星期一</h3><p>看一下日历，年末最后一天是星期天，直接设置以7为周期的循环，找到几是几</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">7</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">36525</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (now == <span class="number">1</span>)</span><br><span class="line">            ans++;</span><br><span class="line">        <span class="keyword">if</span> (now == <span class="number">0</span>)</span><br><span class="line">            now = <span class="number">7</span>;</span><br><span class="line">        now--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘积尾零"><a href="#乘积尾零" class="headerlink" title="乘积尾零"></a>乘积尾零</h3><p>读入一个数据后，统计其5和2的因数，到最后统计5和2的个数，取最小即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num5 = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tar % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num2++;</span><br><span class="line">        tar /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (tar % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num5++;</span><br><span class="line">        tar /= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="built_in">check</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(num2, num5);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5650 4542 3554 473 946 4114 3871 9073 90 4329 </span></span><br><span class="line"><span class="comment">2758 7949 6113 5659 5245 7432 3051 4434 6704 3594 </span></span><br><span class="line"><span class="comment">9937 1173 6866 3397 4759 7557 3070 2287 1453 9899 </span></span><br><span class="line"><span class="comment">1486 5722 3135 1170 4014 5510 5120 729 2880 9019 </span></span><br><span class="line"><span class="comment">2049 698 4582 4346 4427 646 9742 7340 1230 7683 </span></span><br><span class="line"><span class="comment">5693 7015 6887 7381 4172 4341 2909 2027 7355 5649 </span></span><br><span class="line"><span class="comment">6701 6645 1671 5978 2704 9926 295 3125 3878 6785 </span></span><br><span class="line"><span class="comment">2066 4247 4800 1578 6652 4616 1113 6205 3264 2915 </span></span><br><span class="line"><span class="comment">3966 5291 2904 1285 2193 1428 2265 8730 9436 7074 </span></span><br><span class="line"><span class="comment">689 5510 8243 6114 337 4096 8199 7313 3685 211 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="第几个幸运数"><a href="#第几个幸运数" class="headerlink" title="第几个幸运数"></a>第几个幸运数</h3><p>筛查目标数字的方法很巧妙<br>直接用stl的set来做，会简单很多<br>注意一下set的用法，stl用好了可以省很多事 (<strong><del>用的不好会多很多事</del></strong>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="comment">// set集合使用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 59084709587505</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">set&lt;<span class="type">long</span> <span class="type">long</span>&gt; lisit;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> head = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> remp = head * a[i];</span><br><span class="line">            <span class="keyword">if</span> (remp &lt;= maxn)</span><br><span class="line">                lisit.<span class="built_in">insert</span>(remp);</span><br><span class="line">        &#125;</span><br><span class="line">        head = *(lisit.<span class="built_in">upper_bound</span>(head));</span><br><span class="line">        <span class="keyword">if</span> (head == maxn)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注：</span></span><br><span class="line">    <span class="comment">// 1、set集合自带排序，二分可以直接用</span></span><br><span class="line">    <span class="comment">// 2、set自带upper_bound返回的是地址</span></span><br><span class="line">    cout &lt;&lt; lisit.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="航班时间"><a href="#航班时间" class="headerlink" title="航班时间"></a>航班时间</h3><p>一道模拟题，读取数据用到一个sscanf，可以省很多事，在做天梯赛的字符串处理可以大杀四方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2723</span></span><br><span class="line"><span class="comment">// 纯模拟 (读数据真给我上了一课)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_time</span><span class="params">(<span class="type">int</span> &amp;h1, <span class="type">int</span> &amp;h2, <span class="type">int</span> &amp;m1, <span class="type">int</span> &amp;m2, <span class="type">int</span> &amp;s1, <span class="type">int</span> &amp;s2, <span class="type">int</span> &amp;cha)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cha = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> tar[<span class="number">100</span>];</span><br><span class="line">    cin.<span class="built_in">getline</span>(tar, <span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(tar);</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">17</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sscanf</span>(tar, <span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>, &amp;h1, &amp;m1, &amp;s1, &amp;h2, &amp;m2, &amp;s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sscanf</span>(tar, <span class="string">&quot;%d:%d:%d %d:%d:%d (+%d)&quot;</span>, &amp;h1, &amp;m1, &amp;s1, &amp;h2, &amp;m2, &amp;s2, &amp;cha);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get_cha</span><span class="params">(<span class="type">int</span> h1, <span class="type">int</span> m1, <span class="type">int</span> s1, <span class="type">int</span> h2, <span class="type">int</span> m2, <span class="type">int</span> s2, <span class="type">int</span> cha)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (h2 - h1) * <span class="number">3600</span> + (m2 - m1) * <span class="number">60</span> + (s2 - s1) + cha * <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin.<span class="built_in">ignore</span>(); <span class="comment">//去除换行，解释：https://blog.csdn.net/weixin_43938629/article/details/104484119?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164613668016781685343058%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164613668016781685343058&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-104484119.pc_search_result_cache&amp;utm_term=getline%E6%97%A0%E6%B3%95%E8%AF%BB%E5%85%A5&amp;spm=1018.2226.3001.4187</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> h1, h2, m1, m2, s1, s2, cha;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; h1 &lt;&lt; &quot; &quot; &lt;&lt; m1 &lt;&lt; &quot; &quot; &lt;&lt; s1 &lt;&lt; &quot; &quot; &lt;&lt; h2 &lt;&lt; &quot; &quot; &lt;&lt; m2 &lt;&lt; &quot; &quot; &lt;&lt; s2 &lt;&lt; &quot; &quot; &lt;&lt; cha &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">get_time</span>(h1, h2, m1, m2, s1, s2, cha);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cost1 = <span class="built_in">get_cha</span>(h1, m1, s1, h2, m2, s2, cha);</span><br><span class="line">        <span class="built_in">get_time</span>(h1, h2, m1, m2, s1, s2, cha);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cost2 = <span class="built_in">get_cha</span>(h1, m1, s1, h2, m2, s2, cha);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cost = (cost1 + cost2) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> h = cost / <span class="number">3600</span>;</span><br><span class="line">        cost = cost % <span class="number">3600</span>;</span><br><span class="line">        <span class="type">int</span> m = cost / <span class="number">60</span>;</span><br><span class="line">        <span class="type">int</span> s = cost % <span class="number">60</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>, h, m, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷的新写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> sh1,sm1,ss1,sh2,sm2,ss2,sday;</span><br><span class="line"><span class="type">int</span> eh1,em1,es1,eh2,em2,es2,eday;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ss,es; </span><br><span class="line"><span class="type">long</span> <span class="type">long</span> anss;</span><br><span class="line"><span class="type">int</span> h,s,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gettime</span><span class="params">(<span class="type">char</span> remp1[],<span class="type">char</span> remp2[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> len1=<span class="built_in">strlen</span>(remp1);</span><br><span class="line"><span class="keyword">if</span>(remp1[len1<span class="number">-1</span>]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp1,<span class="string">&quot;%d:%d:%d %d:%d:%d (+%d)&quot;</span>,&amp;sh1,&amp;sm1,&amp;ss1,&amp;sh2,&amp;sm2,&amp;ss2,&amp;sday);</span><br><span class="line"><span class="comment">//cout&lt;&lt;sday&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp1,<span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>,&amp;sh1,&amp;sm1,&amp;ss1,&amp;sh2,&amp;sm2,&amp;ss2);</span><br><span class="line">sday=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len2=<span class="built_in">strlen</span>(remp2);</span><br><span class="line"><span class="keyword">if</span>(remp2[len2<span class="number">-1</span>]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp2,<span class="string">&quot;%d:%d:%d %d:%d:%d (+%d)&quot;</span>,&amp;eh1,&amp;em1,&amp;es1,&amp;eh2,&amp;em2,&amp;es2,&amp;eday);</span><br><span class="line"><span class="comment">//cout&lt;&lt;eday&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp2,<span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>,&amp;eh1,&amp;em1,&amp;es1,&amp;eh2,&amp;em2,&amp;es2);</span><br><span class="line">eday=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">es=(eh2*<span class="number">3600</span>+em2*<span class="number">60</span>+es2)-(eh1*<span class="number">3600</span>+em1*<span class="number">60</span>+es1)+eday*<span class="number">24</span>*<span class="number">3600</span>;</span><br><span class="line">ss=(sh2*<span class="number">3600</span>+sm2*<span class="number">60</span>+ss2)-(sh1*<span class="number">3600</span>+sm1*<span class="number">60</span>+ss1)+sday*<span class="number">24</span>*<span class="number">3600</span>;</span><br><span class="line">anss=(es+ss)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">figure</span><span class="params">(<span class="type">long</span> <span class="type">long</span> anss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">h=anss/<span class="number">3600</span>;</span><br><span class="line">anss=anss%<span class="number">3600</span>;</span><br><span class="line">m=anss/<span class="number">60</span>;</span><br><span class="line">s=anss%<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> remp1[<span class="number">100</span>],remp2[<span class="number">100</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(remp1,<span class="number">100</span>);</span><br><span class="line">cin.<span class="built_in">getline</span>(remp2,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">gettime</span>(remp1,remp2);</span><br><span class="line"><span class="built_in">delta</span>();</span><br><span class="line"><span class="built_in">figure</span>(anss);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>, h, m, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三体攻击"><a href="#三体攻击" class="headerlink" title="三体攻击"></a>三体攻击</h3><p>这道题真的写吐血了，差分当时只会一维的，临时含泪学了二维三维，具体思路直接看代码注释<br>首先我们可以分析一下，想要随时对三维数据进行加减更新，线段树不是首选（**<del>多维线段树咱也不会</del>**），我们考虑三维差分来维护数据，但是如何找到具体是哪一次攻击造成第一艘战舰的削减？我们考虑用二分查找，来查找造成削减的攻击。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>三维差分数组肯定不能开三维数组，我们考虑一维优化</li><li>我的代码在acwing可以ac（好像样例对就可以ac？数据有点水）蓝桥杯官网提交是83分，六个过五个，最后一个样例想过必须在二分上作文章，我的二分是每次将数组清零，重新搜，数据一大就超时了</li><li>尽量用scanf读数据，我cin输入没清缓存的话只有64分，清一下就83分了，最后一个数据靠读数据是没办法了（快读试了没用)，只能在查找上做文章。</li><li><a href="https://blog.csdn.net/qq_38937133/article/details/112403275?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164614551416780264064879%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164614551416780264064879&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-112403275.pc_search_result_cache&utm_term=%E4%B8%89%E7%BB%B4%E5%B7%AE%E5%88%86&spm=1018.2226.3001.4187">ac代码(二分Pro)（我学不来）</a></li><li>acwing上的数据有点水，想测一下到底能不能过尽量去蓝桥杯官网跑一下<a href="http://lx.lanqiao.cn/problem.page?gpid=T2724">官网题目oj传送门</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2724</span></span><br><span class="line"><span class="comment">// 三维差分(一维优化)+二分</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 2000010 <span class="comment">//因 为A*B*C&lt;=10^6</span></span></span><br><span class="line"><span class="type">int</span> A, B, C, m;</span><br><span class="line"><span class="type">int</span> cha[maxn]; <span class="comment">//差分数组</span></span><br><span class="line"><span class="type">int</span> a[maxn];   <span class="comment">//通过差分数组还原的原数组</span></span><br><span class="line"><span class="type">int</span> instead[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sa, sb, sc, ea, eb, ec;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125; query[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_pos</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * B * C + b * C + c; <span class="comment">//将三维坐标优化成一维存储(该数字是第a*B*C+b*C+c个，保证一一对应)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(instead, cha, <span class="built_in">sizeof</span>(cha));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= A; i++)</span></span><br><span class="line">    <span class="comment">//     for (int j = 1; j &lt;= B; j++)</span></span><br><span class="line">    <span class="comment">//         for (int k = 1; k &lt;= C; k++)</span></span><br><span class="line">    <span class="comment">//             cout &lt;&lt; instead[get_pos(i, j, k)];</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1 = query[i].sa;</span><br><span class="line">        <span class="type">int</span> x2 = query[i].ea;</span><br><span class="line">        <span class="type">int</span> y1 = query[i].sb;</span><br><span class="line">        <span class="type">int</span> y2 = query[i].eb;</span><br><span class="line">        <span class="type">int</span> z1 = query[i].sc;</span><br><span class="line">        <span class="type">int</span> z2 = query[i].ec;</span><br><span class="line">        <span class="type">int</span> remp = query[i].cost;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y1, z1)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y1, z2 + <span class="number">1</span>)] += remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y2 + <span class="number">1</span>, z1)] += remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y1, z1)] += remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y2 + <span class="number">1</span>, z2 + <span class="number">1</span>)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y1, z2 + <span class="number">1</span>)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, z1)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, z2 + <span class="number">1</span>)] += remp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= B; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= C; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[<span class="built_in">get_pos</span>(i, j, k)] = (a[<span class="built_in">get_pos</span>(i, j, k - <span class="number">1</span>)] + a[<span class="built_in">get_pos</span>(i, j - <span class="number">1</span>, k)] + a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j, k)]) - (a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j - <span class="number">1</span>, k)] + a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j, k - <span class="number">1</span>)] + a[<span class="built_in">get_pos</span>(i, j - <span class="number">1</span>, k - <span class="number">1</span>)]) + a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j - <span class="number">1</span>, k - <span class="number">1</span>)] + instead[<span class="built_in">get_pos</span>(i, j, k)];</span><br><span class="line">                <span class="comment">// cout &lt;&lt; a[get_pos(i, j, k)] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line">                <span class="keyword">if</span> (a[<span class="built_in">get_pos</span>(i, j, k)] &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= B; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= C; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> remp;</span><br><span class="line">                cin &gt;&gt; remp;</span><br><span class="line">                <span class="comment">//开始更新差分数组</span></span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j, k)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j, k)] -= remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j + <span class="number">1</span>, k)] -= remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j, k + <span class="number">1</span>)] -= remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j + <span class="number">1</span>, k)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j, k + <span class="number">1</span>)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j + <span class="number">1</span>, k + <span class="number">1</span>)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j + <span class="number">1</span>, k + <span class="number">1</span>)] -= remp;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= A; i++)</span></span><br><span class="line">    <span class="comment">//     for (int j = 1; j &lt;= B; j++)</span></span><br><span class="line">    <span class="comment">//         for (int k = 1; k &lt;= C; k++)</span></span><br><span class="line">    <span class="comment">//             cout &lt;&lt; cha[get_pos(i, j, k)];</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; query[i].sa &gt;&gt; query[i].ea &gt;&gt; query[i].sb &gt;&gt; query[i].eb &gt;&gt; query[i].sc &gt;&gt; query[i].ec &gt;&gt; query[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = m, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot;true&quot; &lt;&lt; endl;</span></span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>; <span class="comment">//有战舰击毁，区间向左压缩</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>; <span class="comment">//没有战舰被击毁。区间向右压缩</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot;false&quot; &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全球变暖"><a href="#全球变暖" class="headerlink" title="全球变暖"></a>全球变暖</h3>dfs+连通块，每次搜到陆地直接把这一个岛直接搜完，开个数组记录有没有被淹，到最后统计一下就行<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2725</span></span><br><span class="line"><span class="comment">// 深搜+连通块</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> edge[maxn][maxn];</span><br><span class="line"><span class="type">bool</span> visit[maxn][maxn];</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> num;       <span class="comment">//记录大陆个数</span></span><br><span class="line"><span class="type">int</span> ans_num;   <span class="comment">//记录未被淹没的海岛个数</span></span><br><span class="line"><span class="type">int</span> ans[maxn]; <span class="comment">// ans[i]记录第i个大陆剩余的岛屿</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visit[x][y] == <span class="number">1</span> || edge[x][y] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rempy = y + diry[i];</span><br><span class="line">        <span class="type">int</span> rempx = x + dirx[i];</span><br><span class="line">        <span class="keyword">if</span> (edge[rempx][rempy] == <span class="number">0</span>)</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge[x][y] == <span class="number">1</span> &amp;&amp; flag == <span class="number">1</span>)</span><br><span class="line">        ans[num]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rempy = y + diry[i];</span><br><span class="line">        <span class="type">int</span> rempx = x + dirx[i];</span><br><span class="line">        <span class="built_in">search</span>(rempx, rempy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (remp[j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[i][j + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                edge[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i][j] == <span class="number">1</span> &amp;&amp; visit[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;</span></span><br><span class="line">                <span class="built_in">search</span>(i, j);</span><br><span class="line">                <span class="keyword">if</span> (ans[num])</span><br><span class="line">                    ans_num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; num - ans_num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>二刷后的新写法，更清晰了一些<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> maze[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">1010</span>][<span class="number">1100</span>];</span><br><span class="line"><span class="type">int</span> num; <span class="comment">//原</span></span><br><span class="line"><span class="type">int</span> ans_num; <span class="comment">//剩</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> judge;</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (visit[x][y] == <span class="literal">true</span> || maze[x][y] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">visit[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx = dirx[i] + x;</span><br><span class="line"><span class="type">int</span> rempy = diry[i] + y;</span><br><span class="line"><span class="keyword">if</span> (maze[rempx][rempy] == <span class="number">0</span>)</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">judge = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx = dirx[i] + x;</span><br><span class="line"><span class="type">int</span> rempy = diry[i] + y;</span><br><span class="line"><span class="built_in">dfs</span>(rempx, rempy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> remp[<span class="number">10000</span>];</span><br><span class="line">cin &gt;&gt; remp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (remp[j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">maze[i][j + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">maze[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maze[i][j] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visit[i][j])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">judge = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i, j);</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span> (judge)</span><br><span class="line">ans_num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num - ans_num;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="倍数问题"><a href="#倍数问题" class="headerlink" title="倍数问题"></a>倍数问题</h3>贪心+余数处理，数据的处理细节要注意！！！<br>思路很巧妙，直接枚举就好<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://lx.lanqiao.cn/problem.page?gpid=T2726</span></span><br><span class="line"><span class="comment">// 余数处理+贪心</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1100000</span></span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; a[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> remp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        a[remp % k].<span class="built_in">push_back</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(a[i].<span class="built_in">begin</span>(), a[i].<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;());</span><br><span class="line">        <span class="comment">// cout &lt;&lt; a[i][0] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> t = (k - (i + j) % k) % k; <span class="comment">//仍然要取余，k-i-j可能是负数,负数取余还是负数！达不到效果</span></span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() &amp;&amp; a[j].<span class="built_in">size</span>() &amp;&amp; a[t].<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; j != t &amp;&amp; i != t)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum = a[i][<span class="number">0</span>] + a[j][<span class="number">0</span>] + a[t][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == j &amp;&amp; j != t &amp;&amp; i != t)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>; <span class="comment">//假如以i为余数里面只有一个，不够用</span></span><br><span class="line">                    sum = a[i][<span class="number">0</span>] + a[i][<span class="number">1</span>] + a[t][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == t &amp;&amp; i != j &amp;&amp; t != j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    sum = a[i][<span class="number">0</span>] + a[i][<span class="number">1</span>] + a[j][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == t &amp;&amp; i != j &amp;&amp; t != i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    sum = a[j][<span class="number">0</span>] + a[j][<span class="number">1</span>] + a[i][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == j &amp;&amp; j == t &amp;&amp; t == i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() &lt; <span class="number">3</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    sum = a[j][<span class="number">0</span>] + a[j][<span class="number">1</span>] + a[j][<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(sum, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>二刷后的新写法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;a[<span class="number">1010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> remp;</span><br><span class="line">cin&gt;&gt;remp;</span><br><span class="line">a[remp%k].<span class="built_in">push_back</span>(remp);</span><br><span class="line"><span class="comment">//cout&lt;&lt;remp&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;remp%k&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(a[i].<span class="built_in">begin</span>(),a[i].<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> z=(k-(i+j)%k)%k;</span><br><span class="line"><span class="comment">//cout&lt;&lt;z&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i].size()&lt;&lt;&quot; &quot;&lt;&lt;a[j].size()&lt;&lt;&quot; &quot;&lt;&lt;a[z].size()&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&amp;&amp;a[j].<span class="built_in">size</span>()&amp;&amp;a[z].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(i!=j&amp;&amp;i!=z&amp;&amp;j!=z)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[j][<span class="number">0</span>]+a[z][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[j][0]+a[z][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==j&amp;&amp;j!=z&amp;&amp;i!=z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[j][<span class="number">1</span>]+a[z][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[j][1]+a[z][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==z&amp;&amp;i!=j&amp;&amp;j!=z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[i][<span class="number">1</span>]+a[j][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[i][1]+a[j][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==z&amp;&amp;i!=j&amp;&amp;i!=z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j].<span class="built_in">size</span>()&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[j][<span class="number">0</span>]+a[j][<span class="number">1</span>]+a[i][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[j][0]+a[j][1]+a[i][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==j&amp;&amp;j==z&amp;&amp;i==z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&lt;<span class="number">3</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[i][<span class="number">1</span>]+a[i][<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[i][1]+a[i][2]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第九届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第九届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第九届蓝桥杯题解&quot;&gt;&lt;/a&gt;第九届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;本应该是上周就发出来的，前几天考试，鸽了两天&lt;/em&gt;&lt;br&gt;&lt;em&gt;（&lt;del&gt;生</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第七届蓝桥杯题解  2022/3/19</title>
    <link href="http://example.com/2024/07/31/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2024/07/31/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2024-07-31T02:29:36.387Z</published>
    <updated>2022-04-16T02:39:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七届蓝桥杯"><a href="#第七届蓝桥杯" class="headerlink" title="第七届蓝桥杯"></a>第七届蓝桥杯</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>（不会吧不会吧不会吧，不会真有大学生到快到四月都没开学吧）</del><br><img src="https://img-blog.csdnimg.cn/4ddcbe9bccf84604953ef264ebc2122f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>乌丸千岁（💊千岁）</p><h3 id="网友年龄"><a href="#网友年龄" class="headerlink" title="网友年龄"></a>网友年龄</h3><p><img src="https://img-blog.csdnimg.cn/3044c8d872e34ecc9d0166d7db0927f2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接循环嵌套穷举就好了，没啥好说的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// 循环嵌套</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (((i * <span class="number">10</span> + j) - (j * <span class="number">10</span> + i)) == <span class="number">27</span>)</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生日蜡烛"><a href="#生日蜡烛" class="headerlink" title="生日蜡烛"></a>生日蜡烛</h3><p><img src="https://img-blog.csdnimg.cn/f445dae7acf44980b7d5bc792fb8789d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>没什么好办法，从0开始枚举开始过生日的可能情况，依次判断就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// 枚举!</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">236</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> year = x;</span><br><span class="line">    <span class="keyword">while</span> (sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        sum -= year;</span><br><span class="line">        year--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> year + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(i))</span><br><span class="line">            cout &lt;&lt; <span class="built_in">judge</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方格填数"><a href="#方格填数" class="headerlink" title="方格填数"></a>方格填数</h3><p><img src="https://img-blog.csdnimg.cn/b7aad6c45ca743b68c3853be53800a77.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c1cf8bc64add4742a5ca04043f7436a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对角也算相邻！！！dfs模板题，正常思路是先在之前的递归中将数字填入，最后在最后一次循环进行判断即可。<br>我当时做麻烦了，以边的形式存图，其实用连接矩阵更好一点。<br>不过用边存图的话dfs好写一点<br>总之各有千秋吧，能做出来就行<br>我的思路大体是，在dfs中间枚举可能情况，边搜边判断，如果有不符合的情况直接筛掉，到最后能构造完的就是正解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// 深搜+回溯</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> pos[<span class="number">10</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(num - pos[edge[x][i]]) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">check</span>(x, i))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            pos[x] = i;</span><br><span class="line">            visit[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line">            visit[i] = <span class="number">0</span>;</span><br><span class="line">            pos[x] = <span class="number">-10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">start</span>();</span><br><span class="line">    <span class="comment">// memset(pos, INF, sizeof(pos));</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        pos[i] = <span class="number">-10</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷换了一个写法，思路差不多，区别是先枚举，最后判断，这样写可能慢了一点，但是更清晰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> pos[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">pos[i]=<span class="number">-199</span>;</span><br><span class="line">    edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//判断第x格子行不行 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l=edge[x].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=edge[x][i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(pos[x]-pos[y])==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">judge</span>(i))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(visit[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">visit[i]=<span class="number">1</span>;</span><br><span class="line">pos[x]=i;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">visit[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="https://img-blog.csdnimg.cn/813fb97e2f5a46b3bc9eb45ffae02cf5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8bc2cdd22d5a46c8bdbf4253b1f675ca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/a993a2ae392d439682573ae73d75e6fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/85eedd8e07044c5b8a4a8ab442dc74b1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>考察快排的基本思路，学过的应该秒出答案吧 <del>（不好意思我不会现学的）</del> 其实先学先用也可以，题目给了快排的思路，可以照葫芦画瓢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快排解释：https://blog.csdn.net/Mr_xiayijie/article/details/80469293?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164736128916780357279308%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164736128916780357279308&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-80469293.142^v2^pc_search_result_cache,143^v4^control&amp;utm_term=%E5%BF%AB%E6%8E%92%E5%8E%9F%E7%90%86&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 快排基本原理</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> p, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = p;</span><br><span class="line">    <span class="type">int</span> j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> x = a[p];</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; r &amp;&amp; a[++i] &lt; x)</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">while</span> (a[--j] &gt; x)</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(a, p, j); <span class="comment">//填空在这里</span></span><br><span class="line">    <span class="comment">//解释：这个时候a[j]已经比x小了，此时交换可以满足左边比x小，右边比x大</span></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> p, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> q = <span class="built_in">partition</span>(a, p, r);</span><br><span class="line">        <span class="built_in">quicksort</span>(a, p, q - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quicksort</span>(a, q + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">5</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">17</span>&#125;;</span><br><span class="line">    <span class="type">int</span> N = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quicksort</span>(a, <span class="number">0</span>, N - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寒假作业"><a href="#寒假作业" class="headerlink" title="寒假作业"></a>寒假作业</h3><p><img src="https://img-blog.csdnimg.cn/1d492543844c496e9364e0620e89ed4c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>很有意思的一道dfs题，思路和之前的那道题思路很像，边搜边排除，到最后能搜完的就是正解，思路出来了代码很好写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=264529</span></span><br><span class="line"><span class="comment">// dfs+剪枝</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">14</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">1</span>) <span class="comment">//算加法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">13</span> - i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i + j &gt; <span class="number">13</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                visit[i] = visit[j] = visit[i + j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;+&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i + j &lt;&lt; endl;</span></span><br><span class="line">                <span class="built_in">dfs</span>(<span class="number">2</span>);</span><br><span class="line">                visit[i] = visit[j] = visit[i + j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">2</span>) <span class="comment">// 算减法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j] || visit[i - j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j == (i - j))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                visit[i] = visit[j] = visit[i - j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;-&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i - j &lt;&lt; endl;</span></span><br><span class="line">                <span class="built_in">dfs</span>(<span class="number">3</span>);</span><br><span class="line">                visit[i] = visit[j] = visit[i - j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= (<span class="number">13</span> / i); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j] || visit[i * j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == j || i == i * j || j == i * j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;*&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i * j &lt;&lt; endl;</span></span><br><span class="line">                visit[i] = visit[j] = visit[i * j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(<span class="number">4</span>);</span><br><span class="line">                visit[i] = visit[j] = visit[i * j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j] || visit[i / j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == j || i == i / j || j == i / j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;/&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i / j &lt;&lt; endl;</span></span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剪邮票"><a href="#剪邮票" class="headerlink" title="剪邮票"></a>剪邮票</h3><p><img src="https://img-blog.csdnimg.cn/2fbe3da0f3394e898704cb83be8e549e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9253d109917e430098dfb87ab9d52eba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>也是dfs题，我当时自己写的时候犯了一个错误，首先讲一下我的思路：首先用dfs生成五个不相同的数字，然后将这5个数字在图上对应的地方标记，然后dfs图看看是否为连通块。但是要注意：<strong>假如你使用dfs搜出来的数字组合，你搜出来的序列是有重复的！12345和54321是一种情况！</strong> ，当时我第一次跑的时候答案是一万多，后来想了一个多小时，才发现是这个错了，解决方式很简单。每一种情况会被重复5！次，结果除一下5！就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="comment">// 思路：首先用dfs生成五个不相同的数字，然后将这5个数字在图上对应的地方标记，然后dfs图看看是否为连通块</span></span><br><span class="line"><span class="type">int</span> pos_x[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> pos_y[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">13</span>];</span><br><span class="line"><span class="type">bool</span> edge[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> dirx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">bool</span> sum[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> &amp;cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(x &lt;= <span class="number">2</span> &amp;&amp; x &gt;= <span class="number">0</span> &amp;&amp; y &lt;= <span class="number">3</span> &amp;&amp; y &gt;= <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (edge[x][y] == <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;x&quot; &lt;&lt; x &lt;&lt; &quot; &quot;</span></span><br><span class="line">    <span class="comment">//      &lt;&lt; &quot;y&quot; &lt;&lt; y &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    edge[x][y] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1 = x + dirx[i];</span><br><span class="line">        <span class="type">int</span> y1 = y + diry[i];</span><br><span class="line">        <span class="built_in">dfs</span>(x1, y1, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, <span class="number">0</span>, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="type">int</span> x1;</span><br><span class="line">    <span class="type">int</span> y1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            edge[pos_x[i]][pos_y[i]] = <span class="literal">true</span>;</span><br><span class="line">            x1 = pos_x[i];</span><br><span class="line">            y1 = pos_y[i]; </span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; x1 &lt;&lt; &quot; &quot; &lt;&lt; y1 &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x1, y1, cnt);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;cnt;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">select</span><span class="params">(<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// for (int i = 1; i &lt;= 12; i++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     if (visit[i] == true)</span></span><br><span class="line">        <span class="comment">//         cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">check</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visit[i] == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                visit[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">select</span>(cnt + <span class="number">1</span>);</span><br><span class="line">                visit[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">select</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans / (<span class="number">5</span> * <span class="number">4</span> * <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷换了一个写法，更清晰一点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> maze[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> visit[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> posx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> posy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> dirx[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span>cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx=x+dirx[i];</span><br><span class="line"><span class="type">int</span> rempy=y+diry[i];</span><br><span class="line"><span class="keyword">if</span>(!(rempx&lt;=<span class="number">3</span>&amp;&amp;rempx&gt;=<span class="number">1</span>&amp;&amp;rempy&lt;=<span class="number">4</span>&amp;&amp;rempy&gt;=<span class="number">1</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(maze[rempx][rempy]&amp;&amp;visit[rempx][rempy]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">visit[rempx][rempy]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">get</span>(rempx,rempy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="built_in">sizeof</span>(visit));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(maze[i][j]&amp;&amp;visit[i][j]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">visit[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">get</span>(i,j);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&lt;=<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=posx[i];</span><br><span class="line"><span class="type">int</span> y=posy[i];</span><br><span class="line"><span class="keyword">if</span>(maze[x][y])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">maze[x][y]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>);</span><br><span class="line">maze[x][y]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">judge</span>())</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans/(<span class="number">5</span>*<span class="number">4</span>*<span class="number">3</span>*<span class="number">2</span>*<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="四平方和"><a href="#四平方和" class="headerlink" title="四平方和"></a>四平方和</h3><p><img src="https://img-blog.csdnimg.cn/6b8f93aa93b9479b99b63c1aae8747dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/f88884cbe0ac4a93942285112560e5ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>这道题是真的离谱。。。。我当时一开始写，想了一堆优化方案。。。<br>我的自己思路是这样的; 首先枚举后两项，将大的数字组合先存起来，然后从头枚举前两个小的，再二分查找满足条件的后两项</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2766</span></span><br><span class="line"><span class="comment">// 二分</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c, d;</span><br><span class="line">    <span class="type">int</span> sumcd;</span><br><span class="line">&#125; edge[<span class="number">10000000</span>]; <span class="comment">//存储c，d</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if (x.d != y.d)</span></span><br><span class="line">    <span class="comment">//      return x.d &gt; y.d;</span></span><br><span class="line">    <span class="keyword">if</span> (x.sumcd!=y.sumcd) <span class="keyword">return</span> x.sumcd &lt; y.sumcd;</span><br><span class="line"><span class="keyword">if</span> (x.c!=y.c) <span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line"><span class="keyword">return</span> x.d&lt;y.d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a * a + b * b + edge[mid].sumcd &gt;= num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_ans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i*i &lt;=num; i++) <span class="comment">//枚举后一项(d)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j*j+i*i &lt;=num; j++) <span class="comment">//枚举后一项(c)</span></span><br><span class="line">        <span class="comment">//注意循环的写法有讲究：</span></span><br><span class="line">        <span class="comment">// i从最大的maxn开始循环，而j从0开始找</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            edge[cnt].c = i;</span><br><span class="line">            edge[cnt].d = j;</span><br><span class="line">            edge[cnt].sumcd = i * i + j * j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + cnt + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i*i &lt;= num; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j*j+i*i &lt;= num; j++)</span><br><span class="line">        <span class="comment">// 从a最小开始找，因为题目要求找第一个，即a最小</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = cnt;</span><br><span class="line">            <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(i, j, mid))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = mid;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i * i + j * j + edge[ans].sumcd == num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i * i + j * j + edge[ans].sumcd &lt;&lt; endl;</span></span><br><span class="line">                <span class="comment">// cout &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line">                cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; edge[ans].c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; edge[ans].d;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="built_in">get_ans</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>但是！这道题压根不用这么麻烦！！！！<br>四重暴力循环会超时，但是可以三维优化一下就可以解决问题！！！<br>该说不愧是暴力杯啊？？？真有你的蓝桥杯！！！！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2766</span></span><br><span class="line"><span class="comment">// 暴 力 循 环</span></span><br><span class="line"><span class="comment">// 把四维优化为三维，我giao竟然ac了！蓝桥杯真有你的！不愧是暴力杯</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="type">int</span> maxn = <span class="built_in">sqrt</span>(num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= maxn; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = j; z &lt;= maxn; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> remp = <span class="built_in">sqrt</span>(num - (i * i + j * j + z * z));</span><br><span class="line">                <span class="keyword">if</span> (remp * remp + i * i + j * j + z * z == num)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; z &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; remp;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外再加dxy大佬的另一个解法：<br>鸣谢dxy大佬！！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i;j*j+i*i&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">int</span> temp=i*i+j*j;</span><br><span class="line"><span class="keyword">if</span> (a[temp]!=<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">a[temp]=i;</span><br><span class="line">b[temp]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i;i*i+j*j&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">int</span> temp=n-i*i-j*j;</span><br><span class="line"><span class="keyword">if</span> (a[temp]!=<span class="number">-1</span>)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[temp]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b[temp]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><del>(我是伞兵)</del><br><img src="https://img-blog.csdnimg.cn/e551534a70554cd6b42ca83ffe008510.png" alt="在这里插入图片描述"></p><h3 id="密码脱落"><a href="#密码脱落" class="headerlink" title="密码脱落"></a>密码脱落</h3><p><img src="https://img-blog.csdnimg.cn/4966fccdd70946a58255e93fe20b545a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一道区间dp模版题，理解了思路不难<br>贴一个区间dp模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">区间dp模板</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//初始dp数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt; n; ++i)</span><br><span class="line">        &#123;                                <span class="comment">//枚举区间的起点</span></span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>;         <span class="comment">//根据起点和长度得出终点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j; ++k) <span class="comment">//枚举最优分割点</span></span><br><span class="line">                                         <span class="comment">//状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  下面是全代码：<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 区间dp</span></span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2767</span></span><br><span class="line"><span class="comment">// 其实就是求最长回文区间长度，最终结果就是总长减去最长回文区间</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= len; l++) <span class="comment">//枚举区间长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + l - <span class="number">1</span> &lt; len; i++) <span class="comment">//枚举区间起点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = i + l - <span class="number">1</span>; <span class="comment">//区间终点</span></span><br><span class="line">            <span class="keyword">if</span> (l == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>; <span class="comment">//长度为一的区间回文长度为1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]); <span class="comment">//一种是选右不选左，另一种是选左不选右</span></span><br><span class="line">                <span class="keyword">if</span> (str[i] == str[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; len - dp[<span class="number">0</span>][len - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">区间dp模板</span></span><br><span class="line"><span class="comment">    memset(dp, 0, sizeof(dp));</span></span><br><span class="line"><span class="comment">    //初始dp数组</span></span><br><span class="line"><span class="comment">    for (int len = 2; len &lt;= n; len++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        //枚举区间长度</span></span><br><span class="line"><span class="comment">        for (int i = 1; i + len - 1 &lt; n; ++i)</span></span><br><span class="line"><span class="comment">        &#123;                                //枚举区间的起点</span></span><br><span class="line"><span class="comment">            int j = i + len - 1;         //根据起点和长度得出终点</span></span><br><span class="line"><span class="comment">            for (int k = i; k &lt;= j; ++k) //枚举最优分割点</span></span><br><span class="line"><span class="comment">                                         //状态转移方程</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="消除尾一"><a href="#消除尾一" class="headerlink" title="消除尾一"></a>消除尾一</h3><p><img src="https://img-blog.csdnimg.cn/1eac25083df0423db0b0926b8238df3e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>代码填空，理解题意就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (x &gt;&gt; (<span class="number">31</span> - i)) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line"></span><br><span class="line">    x = x &amp; (x + <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (x &gt;&gt; (<span class="number">31</span> - i)) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">103</span>);</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第七届蓝桥杯&quot;&gt;&lt;a href=&quot;#第七届蓝桥杯&quot; class=&quot;headerlink&quot; title=&quot;第七届蓝桥杯&quot;&gt;&lt;/a&gt;第七届蓝桥杯&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-神经网络基础</title>
    <link href="http://example.com/2024/07/31/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2024/07/31/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2024-07-31T02:29:36.380Z</published>
    <updated>2022-08-14T03:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="神经网络基础"><a href="#神经网络基础" class="headerlink" title="神经网络基础"></a>神经网络基础</h1><h3 id="层的定义"><a href="#层的定义" class="headerlink" title="层的定义"></a>层的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">20</span>,<span class="number">256</span>), nn.ReLU(), nn.Linear(<span class="number">256</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">X = torch.rand(<span class="number">2</span>, <span class="number">20</span>)</span><br><span class="line">net(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[-0.0226,  0.1110,  0.1338,  0.0594,  0.0579,  0.0372,  0.2026, -0.2140,          0.0259,  0.0358],        [-0.1102,  0.0507,  0.0410,  0.1030,  0.1872,  0.0963,  0.1452, -0.1649,         -0.0152,  0.1379]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre><p>nn.Sequential定义了一个特殊的Moudule，用法看下面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> forward</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MLP</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()  <span class="comment"># 调用父类的初始化</span></span><br><span class="line">        self.hidden = nn.Linear(<span class="number">20</span>, <span class="number">256</span>)</span><br><span class="line">        self.out = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">return</span> self.out(F.relu(self.hidden(X)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用法和上面是一样的</span></span><br><span class="line">net = MLP()</span><br><span class="line">net(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[-0.0278,  0.0588,  0.1944, -0.1413,  0.0069, -0.0176,  0.0903,  0.1522,          0.1853, -0.0288],        [-0.0594, -0.0154,  0.1833, -0.1290,  0.0523, -0.0802,  0.1188, -0.0268,          0.1307, -0.0880]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre><p>下面这个类将实现和Sequential几乎一样的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySequential</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):  <span class="comment"># *args传进来一个列表</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> args:</span><br><span class="line">            self._modules[block] = block  <span class="comment"># 按顺序放入一个特殊的容器，里面存层</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> self._modules.values():</span><br><span class="line">            X = block(X)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = MySequential(nn.Linear(<span class="number">20</span>, <span class="number">256</span>), nn.ReLU(), nn.Linear(<span class="number">256</span>, <span class="number">10</span>))</span><br><span class="line">net(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.2277, -0.0270, -0.0845,  0.1933,  0.1448, -0.0288,  0.1228,  0.2044,          0.1765, -0.0015],        [ 0.2065,  0.0460, -0.1169,  0.1954,  0.0135, -0.1282,  0.1200,  0.3168,          0.1600, -0.0043]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FixedHiddenMLP</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.rand_weight = torch.rand((<span class="number">20</span>, <span class="number">20</span>), requires_grad=<span class="literal">False</span>)</span><br><span class="line">        self.Linear = nn.Linear(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        X = self.Linear(X)</span><br><span class="line">        X = F.relu(torch.mm(X, self.rand_weight)+<span class="number">1</span>)  <span class="comment"># y=Xw+b</span></span><br><span class="line">        <span class="comment"># mm就是矩阵相乘</span></span><br><span class="line">        X = self.Linear(X)</span><br><span class="line">        <span class="keyword">while</span> X.<span class="built_in">abs</span>().<span class="built_in">sum</span>() &gt; <span class="number">1</span>:</span><br><span class="line">            X /= <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> X.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = FixedHiddenMLP()</span><br><span class="line">net(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor(0.1070, grad_fn=&lt;SumBackward0&gt;)</code></pre><p>可以灵活的嵌套使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更加复杂嵌套的层</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NestMLP</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.net = nn.Sequential(nn.Linear(<span class="number">20</span>, <span class="number">64</span>), nn.ReLU(),</span><br><span class="line">                                 nn.Linear(<span class="number">64</span>, <span class="number">32</span>), nn.ReLU())</span><br><span class="line">        self.linear = nn.Linear(<span class="number">32</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">return</span> self.linear(self.net(X))</span><br><span class="line"></span><br><span class="line">chimera = nn.Sequential(NestMLP(), nn.Linear(<span class="number">16</span>, <span class="number">20</span>), FixedHiddenMLP())</span><br><span class="line">chimera(X)</span><br></pre></td></tr></table></figure><pre><code>tensor(-0.2101, grad_fn=&lt;SumBackward0&gt;)</code></pre><h3 id="参数管理"><a href="#参数管理" class="headerlink" title="参数管理"></a>参数管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个线性层</span></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(), nn.Linear(<span class="number">8</span>, <span class="number">1</span>))</span><br><span class="line">X = torch.rand(size=(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">net(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[-0.1461],        [-0.0553]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].state_dict())</span><br><span class="line"><span class="comment"># Sequential 相当于一个容器(列表)，里面的层可以通过下标来访问</span></span><br><span class="line"><span class="comment"># net[2] 就是第三个输出层</span></span><br><span class="line"><span class="comment"># state_dict()可以访问它的状态，即它的权重和偏差 (w,b)</span></span><br></pre></td></tr></table></figure><pre><code>OrderedDict([(&#39;weight&#39;, tensor([[-0.0300,  0.1777, -0.0958, -0.2357, -0.3395,  0.2508,  0.2884, -0.1535]])), (&#39;bias&#39;, tensor([-0.2819]))])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(net[<span class="number">2</span>].bias))</span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].bias)  <span class="comment"># 访问bias的信息(包括数据)</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].bias.data)  <span class="comment"># 访问bias的数据(只有数据)</span></span><br></pre></td></tr></table></figure><pre><code>&lt;class &#39;torch.nn.parameter.Parameter&#39;&gt;Parameter containing:tensor([-0.2819], requires_grad=True)tensor([-0.2819])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].weight.grad)  <span class="comment"># 还未做梯度计算，所以现在是none</span></span><br></pre></td></tr></table></figure><pre><code>None</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> unicodedata <span class="keyword">import</span> name</span><br><span class="line"><span class="comment"># 打印所有参数信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(*[(name, param.shape) <span class="keyword">for</span> name, param <span class="keyword">in</span> net[<span class="number">0</span>].named_parameters()])</span><br><span class="line"><span class="built_in">print</span>(*[(param, param.shape)<span class="keyword">for</span> name, param <span class="keyword">in</span> net.named_parameters()])</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>(&#39;weight&#39;, torch.Size([8, 4])) (&#39;bias&#39;, torch.Size([8]))(Parameter containing:tensor([[-0.4920, -0.1636,  0.0745,  0.2927],        [-0.2327,  0.0116,  0.1465, -0.1842],        [ 0.2754, -0.2012, -0.2815,  0.3537],        [-0.4651,  0.2001, -0.2492, -0.2959],        [ 0.2676, -0.1646, -0.3039,  0.3171],        [-0.1426, -0.2941, -0.4617, -0.2725],        [ 0.1695,  0.2115,  0.4533, -0.0576],        [-0.4780, -0.0624, -0.0300, -0.1215]], requires_grad=True), torch.Size([8, 4])) (Parameter containing:tensor([-0.0066, -0.1765,  0.1123, -0.0507, -0.1850, -0.3662,  0.1150,  0.3825],       requires_grad=True), torch.Size([8])) (Parameter containing:tensor([[-0.0300,  0.1777, -0.0958, -0.2357, -0.3395,  0.2508,  0.2884, -0.1535]],       requires_grad=True), torch.Size([1, 8])) (Parameter containing:tensor([-0.2819], requires_grad=True), torch.Size([1]))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">block1</span>():</span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(), nn.Linear(<span class="number">8</span>, <span class="number">4</span>), nn.ReLU())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block2</span>():</span><br><span class="line">    net = nn.Sequential()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 插入四个block1</span></span><br><span class="line">        net.add_module(<span class="string">f&#x27;block<span class="subst">&#123;i&#125;</span>&#x27;</span>, block1())  <span class="comment"># 这样写可以传进去一个字符串名字进去</span></span><br><span class="line">    <span class="keyword">return</span> net</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rgnet = nn.Sequential(block2(), nn.Linear(<span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line">rgnet(X)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[0.1414],        [0.1414]], grad_fn=&lt;AddmmBackward0&gt;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看一下嵌套的网络(用block2构建的，实质用block1嵌套的网络)</span></span><br><span class="line"><span class="built_in">print</span>(rgnet)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Sequential(  (0): Sequential(    (block0): Sequential(      (0): Linear(in_features=4, out_features=8, bias=True)      (1): ReLU()      (2): Linear(in_features=8, out_features=4, bias=True)      (3): ReLU()    )    (block1): Sequential(      (0): Linear(in_features=4, out_features=8, bias=True)      (1): ReLU()      (2): Linear(in_features=8, out_features=4, bias=True)      (3): ReLU()    )    (block2): Sequential(      (0): Linear(in_features=4, out_features=8, bias=True)      (1): ReLU()      (2): Linear(in_features=8, out_features=4, bias=True)      (3): ReLU()    )    (block3): Sequential(      (0): Linear(in_features=4, out_features=8, bias=True)      (1): ReLU()      (2): Linear(in_features=8, out_features=4, bias=True)      (3): ReLU()    )  )  (1): Linear(in_features=4, out_features=1, bias=True))</code></pre><p>随机初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化层参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_normal</span>(<span class="params">m</span>):  <span class="comment"># 初始化参数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.normal_(m.weight, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)  <span class="comment"># 正态分布初始化</span></span><br><span class="line">        nn.init.zeros_(m.bias)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.apply(init_normal)  <span class="comment"># apply的作用就是将这个函数层层调用，可以理解里面有一个forloop在层层贯彻</span></span><br><span class="line">net[<span class="number">0</span>].weight.data, net[<span class="number">0</span>].bias.data</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>(tensor([[ 3.6479e-03, -1.1540e-02, -7.7268e-04, -5.1345e-03],         [ 7.4597e-03,  1.1359e-02, -6.7565e-03,  8.4972e-03],         [-2.4252e-03,  3.5522e-03, -4.1856e-03,  7.3790e-03],         [-8.8164e-03, -2.4064e-03,  2.4951e-02, -1.1745e-02],         [ 1.0388e-02, -1.9615e-03,  9.7956e-05, -9.9438e-03],         [-1.6299e-03, -5.7079e-03,  2.8373e-04,  9.8193e-03],         [-4.1368e-03,  6.9908e-03, -3.5671e-02,  3.6108e-03],         [ 3.5765e-03, -1.2091e-02, -2.0029e-04, -4.3693e-03]]), tensor([0., 0., 0., 0., 0., 0., 0., 0.]))</code></pre><p>介绍一个比较特殊的初始化，常数初始化，但是神经网络里面不能用常数初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_constant</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">1</span>)  <span class="comment"># 将矩阵赋值成同一个数</span></span><br><span class="line">        nn.init.zeros_(m.bias)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.apply(init_constant)</span><br><span class="line">net[<span class="number">0</span>].weight.data, net[<span class="number">0</span>].bias</span><br><span class="line"></span><br><span class="line"><span class="comment"># api提供了常数初始化的方式，但是训练的时候不能这么初始化！</span></span><br></pre></td></tr></table></figure><pre><code>(tensor([[1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.]]), Parameter containing: tensor([0., 0., 0., 0., 0., 0., 0., 0.], requires_grad=True))</code></pre><p>apply不仅可以应用一个整的网络，也可以用来对各个层进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义两种初始化方式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xvaier</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.xavier_uniform_(m.weight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_42</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.constant_(m.weight, <span class="number">42</span>)  <span class="comment"># 42：宇宙的答案————沐神</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net[<span class="number">0</span>].apply(xvaier)  <span class="comment"># 单独对第一层的应用</span></span><br><span class="line">net[<span class="number">2</span>].apply(init_42)  <span class="comment"># 单独对第三层的应用</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">0</span>].weight.data)</span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].weight.data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[-0.5463, -0.7031,  0.2726, -0.3747],        [ 0.0067, -0.2665, -0.0956,  0.1011],        [ 0.1168,  0.6005,  0.5389,  0.3871],        [ 0.0057,  0.3475,  0.2790,  0.4906],        [-0.3758, -0.0016, -0.4157,  0.3072],        [ 0.4774, -0.4041,  0.1078,  0.4043],        [ 0.3532,  0.3053,  0.2614, -0.5882],        [ 0.4585,  0.2418,  0.3941,  0.1144]])tensor([[42., 42., 42., 42., 42., 42., 42., 42.]])</code></pre><p><img src="https://img-blog.csdnimg.cn/c87204e59b17424a8ee0b5fa07a1d733.png" alt="在这里插入图片描述"><br><a href="https://pytorch.org/docs/stable/nn.init.html?highlight=xavier_uniform_#torch.nn.init.xavier_uniform_">xavier_uniform_()</a>的用法，说实话看不太懂。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更加奇怪的初始化的方式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_init</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Init&quot;</span>, *[(name, param.shape)</span><br><span class="line">                        <span class="keyword">for</span> name, param <span class="keyword">in</span> m.named_parameters()][<span class="number">0</span>])</span><br><span class="line">        nn.init.uniform_(m.weight, -<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        m.weight.data *= m.weight.data.<span class="built_in">abs</span>() &gt;= <span class="number">5</span></span><br><span class="line">    <span class="comment"># *是点乘。这个意思是保留所有对应绝对值大于5的权重，其他全部赋值为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.apply(my_init)</span><br><span class="line">net[<span class="number">0</span>].weight</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Init weight torch.Size([8, 4])Init weight torch.Size([1, 8])Parameter containing:tensor([[ 8.8280, -5.6789, -6.5591,  0.0000],        [ 6.1000, -7.2595,  7.4734,  0.0000],        [ 0.0000,  7.6965,  0.0000,  0.0000],        [-7.0142, -0.0000, -0.0000,  7.0553],        [ 9.3206,  0.0000,  7.1112,  0.0000],        [-8.2768, -0.0000,  8.3142,  9.4527],        [-0.0000, -6.7602,  0.0000,  7.3447],        [-9.7821, -6.0867,  9.6227,  0.0000]], requires_grad=True)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 或者更暴力的方式</span></span><br><span class="line">net[<span class="number">0</span>].weight.data[:] += <span class="number">1</span></span><br><span class="line">net[<span class="number">0</span>].weight.data[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">42</span></span><br><span class="line">net[<span class="number">0</span>].weight.data[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>tensor([42.0000, -4.6789, -5.5591,  1.0000])</code></pre><p>参数绑定，可以将几个层的参数进行绑定，做到一对多同时修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shared = nn.Linear(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">4</span>, <span class="number">8</span>), nn.ReLU(), shared,</span><br><span class="line">                    nn.ReLU(), shared, nn.ReLU(), nn.Linear(<span class="number">8</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># 这样的话，net里面的两个shared的全连接层的参数是一样的，任意修改一个，另外一个也会修改</span></span><br><span class="line">net(X)</span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].weight.data[<span class="number">0</span>] == net[<span class="number">4</span>].weight.data[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 现在修改其中一个shared的值，康康另外一个有没有被影响</span></span><br><span class="line">net[<span class="number">2</span>].weight.data[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(net[<span class="number">2</span>].weight.data[<span class="number">0</span>] == net[<span class="number">4</span>].weight.data[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 通过输出我们能看到修改了其中一个，另外一个也被修改了</span></span><br><span class="line"><span class="comment"># 两个层的参数实际上是被绑定了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([True, True, True, True, True, True, True, True])tensor([True, True, True, True, True, True, True, True])</code></pre><h3 id="自定义一个层"><a href="#自定义一个层" class="headerlink" title="自定义一个层"></a>自定义一个层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CenteredLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        <span class="keyword">return</span> X-X.mean()</span><br><span class="line"><span class="comment"># 一个很简单的层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">layer = CenteredLayer()</span><br><span class="line">layer(torch.FloatTensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))</span><br></pre></td></tr></table></figure><pre><code>tensor([-2., -1.,  0.,  1.,  2.])</code></pre><p>将我们的层合并作为组件加到更复杂的模型当中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(nn.Linear(<span class="number">8</span>, <span class="number">128</span>), CenteredLayer())</span><br><span class="line"></span><br><span class="line">Y = net(torch.rand(<span class="number">4</span>, <span class="number">8</span>))</span><br><span class="line">Y.mean()</span><br></pre></td></tr></table></figure><pre><code>tensor(1.1642e-09, grad_fn=&lt;MeanBackward0&gt;)</code></pre><p>想让自己的层自带参数，需要调用parameter类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinear</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_units, units</span>):</span><br><span class="line">        <span class="comment"># in_units是输入维度，units是输出维度</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.weight = nn.Parameter(torch.randn(in_units, units))</span><br><span class="line">        self.bias = nn.Parameter(torch.randn(units,))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X</span>):</span><br><span class="line">        Linear = torch.matmul(X, self.weight.data)+self.bias.data</span><br><span class="line">        <span class="keyword">return</span> F.relu(Linear)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dense = MyLinear(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">dense.weight</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Parameter containing:tensor([[-0.3888,  0.7929,  0.0935],        [ 1.3672, -2.3833,  2.3415],        [-0.5297,  0.5334,  0.0868],        [ 1.3455, -0.5648,  0.5850],        [-0.0486,  1.0883, -0.6080]], requires_grad=True)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dense(torch.rand(<span class="number">2</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure><pre><code>tensor([[1.1443, 0.0000, 1.3325],        [0.0000, 0.0000, 0.2987]])</code></pre><p>用自己定义的层来构建网络</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(MyLinear(<span class="number">64</span>, <span class="number">8</span>), MyLinear(<span class="number">8</span>, <span class="number">1</span>))</span><br><span class="line">net(torch.rand(<span class="number">2</span>, <span class="number">64</span>))</span><br></pre></td></tr></table></figure><pre><code>tensor([[5.9957],        [0.0000]])</code></pre><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(<span class="number">4</span>)  <span class="comment"># 长为四的向量</span></span><br><span class="line">torch.save(x, <span class="string">&#x27;x-file&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x2 = torch.load(<span class="string">&#x27;x-file&#x27;</span>)</span><br><span class="line">x2</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([0, 1, 2, 3])</code></pre><p>存一个张量列表，将他们读回内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y = torch.zeros(<span class="number">4</span>)</span><br><span class="line">torch.save([x, y], <span class="string">&#x27;x-files&#x27;</span>)  <span class="comment"># 存了一个列表</span></span><br><span class="line">x2, y2 = torch.load(<span class="string">&#x27;x-files&#x27;</span>)</span><br><span class="line">(x2, y2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>(tensor([0, 1, 2, 3]), tensor([0., 0., 0., 0.]))</code></pre><p>存了一个字典，以字符串作为索引，和字典内部的东西一一映射</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mydict = &#123;<span class="string">&#x27;x&#x27;</span>: x, <span class="string">&#x27;y&#x27;</span>: y&#125;</span><br><span class="line">torch.save(mydict, <span class="string">&#x27;mydict&#x27;</span>)</span><br><span class="line">mydict2 = torch.load(<span class="string">&#x27;mydict&#x27;</span>)</span><br><span class="line">mydict2</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>&#123;&#39;x&#39;: tensor([0, 1, 2, 3]), &#39;y&#39;: tensor([0., 0., 0., 0.])&#125;</code></pre><p>加载和保存参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> clone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MLP</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.hidden = nn.Linear(<span class="number">20</span>, <span class="number">256</span>)</span><br><span class="line">        self.output = nn.Linear(<span class="number">256</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.output(F.relu(self.hidden(x)))</span><br><span class="line"><span class="comment"># 构建了一个神经网络的层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = MLP()</span><br><span class="line">X = torch.randn(size=(<span class="number">2</span>, <span class="number">20</span>))</span><br><span class="line">Y = net(X)</span><br><span class="line"></span><br><span class="line">torch.save(net.state_dict(), <span class="string">&#x27;mlp.params&#x27;</span>)</span><br><span class="line"><span class="comment"># mlp的参数全部存到一个字典里</span></span><br></pre></td></tr></table></figure><p>实例化了一个MLP的备份，直接读取其中的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 现在把它加载回来</span></span><br><span class="line"><span class="comment"># clone是一个关键字</span></span><br><span class="line">clone = MLP()</span><br><span class="line">clone.load_state_dict(torch.load(<span class="string">&quot;mlp.params&quot;</span>))</span><br><span class="line">clone.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure><pre><code>MLP(  (hidden): Linear(in_features=20, out_features=256, bias=True)  (output): Linear(in_features=256, out_features=10, bias=True))</code></pre><p>我们来验证一下新克隆的层和之前的层是否一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Y_clone=clone(X)</span><br><span class="line">Y_clone==Y</span><br></pre></td></tr></table></figure><pre><code>tensor([[True, True, True, True, True, True, True, True, True, True],        [True, True, True, True, True, True, True, True, True, True]])</code></pre><p>可以看出来是一摸一样的，我们等于用克隆出来的层去加载了原来的参数，从而使参数相同，输出相同</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;神经网络基础&quot;&gt;&lt;a href=&quot;#神经网络基础&quot; class=&quot;headerlink&quot; title=&quot;神经网络基础&quot;&gt;&lt;/a&gt;神经网络基础&lt;/h1&gt;&lt;h3 id=&quot;层的定义&quot;&gt;&lt;a href=&quot;#层的定义&quot; class=&quot;headerlink&quot; title=&quot;层</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈背包问题</title>
    <link href="http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2024-07-31T02:29:36.373Z</published>
    <updated>2022-04-16T02:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p><a href="https://www.dotcpp.com/oj/problem2131.html">01背包题目</a><br><img src="https://img-blog.csdnimg.cn/0e87672f33b3445095c84274a3d06404.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>采用一维优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// OJ传送门：https://www.dotcpp.com/oj/problem2131.html</span></span><br><span class="line"><span class="comment">// 01背包一维优化</span></span><br><span class="line"><span class="comment">// 特点：每个物品只有一个</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10000</span></span><br><span class="line"><span class="type">int</span> N, M; <span class="comment">// N个物品，背包容量M</span></span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> space[maxn];</span><br><span class="line"><span class="type">int</span> bag[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; space[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="comment">//枚举编号</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = M; j &gt;= space[i]; j--) <span class="comment">//枚举空间(从后往前！)</span></span><br><span class="line">        &#123;</span><br><span class="line">            bag[j] = <span class="built_in">max</span>(bag[j - space[i]] + value[i], bag[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bag[M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p><a href="https://www.dotcpp.com/oj/problem2132.html">完全背包题目</a><br><img src="https://img-blog.csdnimg.cn/ba602608026942509532ba8ea32adc91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// OJ传送门：https://www.dotcpp.com/oj/problem2131.html</span></span><br><span class="line"><span class="comment">// 完全背包(一维优化)</span></span><br><span class="line"><span class="comment">// 特点：每个物品数量无限</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="type">int</span> N, M; <span class="comment">// N个物品,M空间</span></span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> space[maxn];</span><br><span class="line"><span class="type">int</span> bag[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; space[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = space[i]; j &lt;= M; j++) <span class="comment">//从前往后遍历！</span></span><br><span class="line">        &#123;</span><br><span class="line">            bag[j] = <span class="built_in">max</span>(bag[j], bag[j - space[i]] + value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bag[M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p><a href="https://www.dotcpp.com/oj/problem2048.html">多重背包oj传送门</a><br><img src="https://img-blog.csdnimg.cn/c681abf178414c878d9d3fbdef6c4912.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// OJ传送门：https://www.dotcpp.com/oj/problem2048.html</span></span><br><span class="line"><span class="comment">// 多重背包(一维优化)</span></span><br><span class="line"><span class="comment">// 特点：每个物品有多个，且数量有限且给出</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10000</span></span><br><span class="line"><span class="type">int</span> N, M;</span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> space[maxn];</span><br><span class="line"><span class="type">int</span> bag[maxn];</span><br><span class="line"><span class="type">int</span> cnt[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; space[i] &gt;&gt; value[i] &gt;&gt; cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = M; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= cnt[i]; k++) <span class="comment">//多一个次数循环</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - k * space[i] &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">//写break也行</span></span><br><span class="line">                bag[j] = <span class="built_in">max</span>(bag[j], bag[j - k * space[i]] + k * value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bag[M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li>三种背包问题我用的都是一维优化</li><li>大家有没有发现，01背包和完全背包的唯一区别就是j(空间)一个是从头开始循环，而另外一个则是恰恰相反，其实道理很简单：<strong>01背包考虑每个物品只用一次，它实际上转移方程是和i未选上之前的此时j进行比较，所以我们从后往前循环，（因为j-space[i]的值肯定比我们的j小，所以保证i只用一次），而完全背包相反，我们从头开始循环，因为i物品可以反复使用，所以j-space[i]在j的循环范围内，如果满足条件还可以继续使用</strong></li><li>多重背包可以转化为01背包问题（将第i个物品作为n个相同物品计入物品总数中）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;01背包&quot;&gt;&lt;a href=&quot;#01背包&quot; class=&quot;headerlink&quot; title=&quot;01背包&quot;&gt;&lt;/a&gt;01背包&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.dotcpp.com/oj/problem2131.html&quot;&gt;01背包题目&lt;/a</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉树</title>
    <link href="http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2024-07-31T02:29:36.365Z</published>
    <updated>2022-04-17T08:47:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈二叉树"><a href="#浅谈二叉树" class="headerlink" title="浅谈二叉树"></a>浅谈二叉树</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>（初级数据结构鲨我）</del><br>之前寒假集训的时候基础数据结构就学的不太好，很多还是眼高手低，这几天正好开始准备PTA天梯赛的题，L2的题都是这种基础数据结构模拟题，欠账出来都是要还的，今天正好趁着刚学的热乎劲写一下理解，供日后参考</p><h3 id="二叉树的三种遍历"><a href="#二叉树的三种遍历" class="headerlink" title="二叉树的三种遍历"></a>二叉树的三种遍历</h3><p>四种主要的遍历思想为：</p><p>前序遍历：根结点 —&gt; 左子树 —&gt; 右子树</p><p>中序遍历：左子树—&gt; 根结点 —&gt; 右子树</p><p>后序遍历：左子树 —&gt; 右子树 —&gt; 根结点</p><p>层次遍历：只需按层次遍历即可<br><img src="https://img-blog.csdnimg.cn/455b12b832be4b52a416139db40ea978.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对于这个树来说</p><ul><li><h5 id="前序遍历："><a href="#前序遍历：" class="headerlink" title="前序遍历："></a>前序遍历：</h5><p>124753689</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="中序遍历："><a href="#中序遍历：" class="headerlink" title="中序遍历："></a>中序遍历：</h5><p>742513869</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="后序遍历："><a href="#后序遍历：" class="headerlink" title="后序遍历："></a>后序遍历：</h5><p>745289631</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;rchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="层序遍历："><a href="#层序遍历：" class="headerlink" title="层序遍历："></a>层序遍历：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">floor_read</span><span class="params">(node *tree)</span> <span class="comment">//层序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node *&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(tree);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        node *remp;</span><br><span class="line">        remp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; remp-&gt;num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>那么这三种遍历有什么特点呢？</em>*</p><h3 id="三种遍历构建二叉树"><a href="#三种遍历构建二叉树" class="headerlink" title="三种遍历构建二叉树"></a>三种遍历构建二叉树</h3></li><li><h5 id="已知前序和中序"><a href="#已知前序和中序" class="headerlink" title="已知前序和中序"></a>已知前序和中序</h5></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> inorder[maxn];   <span class="comment">//中序</span></span><br><span class="line"><span class="type">int</span> preorder[maxn];  <span class="comment">//先序</span></span><br><span class="line"><span class="type">int</span> postorder[maxn]; <span class="comment">//后序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">build</span><span class="params">(<span class="type">int</span> pre[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != pre[<span class="number">0</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = pre[<span class="number">0</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">build</span>(pre + <span class="number">1</span>, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">build</span>(pre + rootnode + <span class="number">1</span>, in + rootnode + <span class="number">1</span>, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line">main函数：</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    node *head = <span class="keyword">new</span> node;</span><br><span class="line">    head = <span class="built_in">build</span>(preorder, inorder, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="已知后序和中序构建二叉树"><a href="#已知后序和中序构建二叉树" class="headerlink" title="已知后序和中序构建二叉树"></a>已知后序和中序构建二叉树</h5></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> inorder[maxn];   <span class="comment">//中序</span></span><br><span class="line"><span class="type">int</span> preorder[maxn];  <span class="comment">//先序</span></span><br><span class="line"><span class="type">int</span> postorder[maxn]; <span class="comment">//后序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="type">int</span> post[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != post[len - <span class="number">1</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = post[len - <span class="number">1</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">create</span>(post, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">create</span>(post + rootnode, in + <span class="number">1</span> + rootnode, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    node *head = <span class="keyword">new</span> node;</span><br><span class="line">    head = <span class="built_in">create</span>(postorder, inorder, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="已知前序后序"><a href="#已知前序后序" class="headerlink" title="已知前序后序"></a>已知前序后序</h5></li><li><em>无解！！！<br>仅仅知道前序和后序无法构造唯一二叉树！</em>*<h3 id="三种遍历构建完全二叉树"><a href="#三种遍历构建完全二叉树" class="headerlink" title="三种遍历构建完全二叉树"></a>三种遍历构建完全二叉树</h3></li><li><strong>知后序构建完全二叉树且求其层序遍历</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="comment">// 知后序，构建完全二叉树以及层序的遍历</span></span><br><span class="line"><span class="type">int</span> post[maxn];</span><br><span class="line"><span class="type">int</span> tree[maxn];</span><br><span class="line"><span class="type">int</span> node = <span class="number">1</span>; <span class="comment">//标识后序遍历</span></span><br><span class="line"><span class="type">int</span> n;        <span class="comment">//节点数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> tree[], <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    tree[cnt] = post[node++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; post[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; tree[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; tree[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>知前序构造完全二叉树且求其层序遍历</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="comment">// 知前序，构建完全二叉树和层序遍历</span></span><br><span class="line"><span class="type">int</span> pre[maxn];</span><br><span class="line"><span class="type">int</span> tree[maxn];</span><br><span class="line"><span class="type">int</span> node = <span class="number">1</span>; <span class="comment">//标识后序遍历</span></span><br><span class="line"><span class="type">int</span> n;        <span class="comment">//节点数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> tree[], <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    tree[cnt] = pre[node++];</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; pre[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; tree[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; tree[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h3><p>读前序后序中序数组一定要从下标0开始读！<del>(别问我怎么知道的)</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 二叉树知前序中序后序构造二叉树+前序后序层序遍历二叉树</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 50</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> inorder[maxn];   <span class="comment">//中序</span></span><br><span class="line"><span class="type">int</span> preorder[maxn];  <span class="comment">//先序</span></span><br><span class="line"><span class="type">int</span> postorder[maxn]; <span class="comment">//后序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node *<span class="title">build</span><span class="params">(<span class="type">int</span> pre[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != pre[<span class="number">0</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = pre[<span class="number">0</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">build</span>(pre + <span class="number">1</span>, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">build</span>(pre + rootnode + <span class="number">1</span>, in + rootnode + <span class="number">1</span>, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="type">int</span> post[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != post[len - <span class="number">1</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = post[len - <span class="number">1</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">create</span>(post, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">create</span>(post + rootnode, in + <span class="number">1</span> + rootnode, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floor_read</span><span class="params">(node *tree)</span> <span class="comment">//层序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node *&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(tree);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        node *remp;</span><br><span class="line">        remp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; remp-&gt;num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;rchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; inorder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; preorder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; postorder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    node *head = <span class="keyword">new</span> node;</span><br><span class="line">    <span class="comment">// head = build(preorder, inorder, N);</span></span><br><span class="line">    head = <span class="built_in">create</span>(postorder, inorder, N);</span><br><span class="line">    <span class="built_in">floor_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pre_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">in_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">post_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我自己造的输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">4 1 3 2 6 5 7</span><br><span class="line">2  3  1  5  7  6  4  </span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 1 6 3 5 7 2        </span><br><span class="line">4  1  3  2  6  5  7  </span><br><span class="line">1  3  2  4  6  5  7  </span><br><span class="line">2  3  1  5  7  6  4  </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3c64bb1caea942ca96bc0fdf15f19f62.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="自勉"><a href="#自勉" class="headerlink" title="自勉"></a>自勉</h3><p><img src="https://img-blog.csdnimg.cn/e153fd342d884c489eceedcec31b97a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>醍醐灌顶！以此自勉！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈二叉树&quot;&gt;&lt;a href=&quot;#浅谈二叉树&quot; class=&quot;headerlink&quot; title=&quot;浅谈二叉树&quot;&gt;&lt;/a&gt;浅谈二叉树&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉搜索树</title>
    <link href="http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/"/>
    <id>http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/</id>
    <published>2024-07-31T02:29:36.357Z</published>
    <updated>2022-04-16T02:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈BST"><a href="#浅谈BST" class="headerlink" title="浅谈BST"></a>浅谈BST</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 最近不顺心的事情有点多，再加上赶ptaL2 的题单，很久没做知识总结了 ，现在pta的题目告一段落，参考了某大佬 <del>（某卷王）</del> 总结的知识点，鸣谢大佬！总结一下BST问题的知识点，供以后参考。<br> 封面：<br> <img src="https://img-blog.csdnimg.cn/1eb941207e6b46578ce8055ab92fc6bc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> <em><strong>站在巨人 <del>（卷王）</del> 的肩上，才能看 <del>（卷）</del> 的更远</strong></em></p><h3 id="二叉搜索树的性质"><a href="#二叉搜索树的性质" class="headerlink" title="二叉搜索树的性质"></a>二叉搜索树的性质</h3><p> 一棵二叉搜索树可被递归地定义为具有下列性质的二叉树：对于任一结点</p><ul><li>其左子树中所有结点的键值小于该结点的键值；</li><li>其右子树中所有结点的键值大于等于该结点的键值；</li><li>其左右子树都是二叉搜索树。</li></ul><p>乍一看，其实感觉和二叉堆很像，不过二叉堆左右儿子之间没有可比性，因为二叉堆是根据与父亲节点大小关系建堆的，兄弟节点似乎无法比较，所以同一个序列，以不同顺序输入的生成的二叉堆序列也自然不同。<br>二叉搜索树也有类似的性质，但是二叉搜索树输入的节点不会发生位置交替，这和二叉堆边插入边排序不同，所以，同一组数字不同顺序输入二叉搜索树也会导致二叉搜索树结构不同。假如输入的数字过于玄学，会导致树的左右子树不平衡，如果将两个子树平衡，就变成了平衡树(Treap)</p><h3 id="二叉搜索树的操作"><a href="#二叉搜索树的操作" class="headerlink" title="二叉搜索树的操作"></a>二叉搜索树的操作</h3><h5 id="必要的初始化"><a href="#必要的初始化" class="headerlink" title="必要的初始化"></a>必要的初始化</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF -1</span></span><br><span class="line"><span class="type">int</span> BST[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">BST[i] = INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST[root] &gt;= x)<span class="comment">//说明该节点应该在其左边</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span>, x); <span class="comment">//左儿子比父亲小，右儿子更大</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, x); <span class="comment">//右儿子比父亲大，往右边放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>中序遍历其实就是序列从小到大排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="找最大"><a href="#找最大" class="headerlink" title="找最大"></a>找最大</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往右走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_max</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="找最小"><a href="#找最小" class="headerlink" title="找最小"></a>找最小</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往左走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_min</span>(root * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span> <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[root]) <span class="comment">//往右找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[root]) <span class="comment">//往左找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//找到了，开始修改</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = INF; <span class="comment">//没有儿子，直接封杀</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF) <span class="comment">//左子树存在，右子树无</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, BST[root * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF) <span class="comment">//左子树空，右子树存在</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, BST[root * <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[root * <span class="number">2</span>] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有两种修改方式！</span></span><br><span class="line"><span class="comment">//第一种是修改用后驱节点(右子树最小节点更换)</span></span><br><span class="line"><span class="comment">//第二种是用前驱节点修改(左子树最大节点更换)</span></span><br><span class="line"><span class="comment">//这里演示前者</span></span><br><span class="line"><span class="type">int</span> post_point = <span class="built_in">get_min</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">BST[root] = post_point;</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, post_point);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="汇总代码，实弹演习"><a href="#汇总代码，实弹演习" class="headerlink" title="汇总代码，实弹演习"></a>汇总代码，实弹演习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">7</span><br><span class="line">8 10 11 8 6 7 5</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF -1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> BST[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST[root] &gt;= x)<span class="comment">//说明该节点应该在其左边</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span>, x); <span class="comment">//左儿子比父亲小，右儿子更大</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, x); <span class="comment">//右儿子比父亲大，往右边放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floor_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(root);</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa = q.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; BST[fa] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (BST[fa * <span class="number">2</span>] != INF)</span><br><span class="line">q.<span class="built_in">push</span>(fa * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (BST[fa * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">q.<span class="built_in">push</span>(fa * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往左走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_min</span>(root * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往右走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_max</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> x)</span> <span class="comment">//查找某一个特殊的元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[now])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">search</span>(now * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[now])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">search</span>(now * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span> <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[root]) <span class="comment">//往右找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[root]) <span class="comment">//往左找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//找到了，开始修改</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = INF; <span class="comment">//没有儿子，直接封杀</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF) <span class="comment">//左子树存在，右子树无</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, BST[root * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF) <span class="comment">//左子树空，右子树存在</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, BST[root * <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[root * <span class="number">2</span>] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有两种修改方式！</span></span><br><span class="line"><span class="comment">//第一种是修改用后驱节点(右子树最小节点更换)</span></span><br><span class="line"><span class="comment">//第二种是用前驱节点修改(左子树最大节点更换)</span></span><br><span class="line"><span class="comment">//这里演示前者</span></span><br><span class="line"><span class="type">int</span> post_point = <span class="built_in">get_min</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">BST[root] = post_point;</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, post_point);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">BST[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> remp;</span><br><span class="line">cin &gt;&gt; remp;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, remp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pre_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">post_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">in_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_max</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_min</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">in_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src="https://img-blog.csdnimg.cn/c277f4fd28ab478ab87798259efeae16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="插一道题"><a href="#插一道题" class="headerlink" title="插一道题"></a>插一道题</h3><p><img src="https://img-blog.csdnimg.cn/64f02fa50dc142548aadcf90cecebf13.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题我是参考LP大佬的解法，鸣谢大佬！解法很巧妙，我们看题，它题目告诉我们它输入的序列有可能是正常的二叉搜索树，也可能是镜像的，那咋办捏？<br>判断两遍就可以了！先用当正常的遍历一下，试试水，如果成了就直接pass，不成了的话就用镜像的方式遍历一次<br>那么，我们怎么判断一个遍历是不是一个二叉搜索树捏？<br>以正常的为例子！<br>看图！</p><p><img src="https://img-blog.csdnimg.cn/6ed9337cc54b4fe0bc84b4106a82950c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><del>字有点丑不好意思我的锅</del><br>它生成的前序遍历应该是：<br><img src="https://img-blog.csdnimg.cn/9fc055e195d340dd8b629d0754336b09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>你会发现：对一段前序遍历，第一个元素是根节点，蓝色箭头之前到根节点都是小于根节点的！而绿色箭头都是大于根节点的！<br>而这两个箭头指的也是根节点的左右子树！<br>所以直接按这个规律进行判断！判断成功，就判断它的子树是否满足！</p><p>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="type">int</span> pre[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge1</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> <span class="comment">//判断是否是正序</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// start是根节点</span></span><br><span class="line"><span class="keyword">if</span> (start &gt; end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> node1 = start + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> node2 = end;</span><br><span class="line"><span class="keyword">while</span> (node1 &lt;= end &amp;&amp; pre[node1] &lt; pre[start])</span><br><span class="line">node1++; <span class="comment">//从前往后寻找比根节点小的最后一个值</span></span><br><span class="line"><span class="keyword">while</span> (node2 &gt; start &amp;&amp; pre[node2] &gt;= pre[start])</span><br><span class="line">node2--; <span class="comment">//从后往前寻找比根节点大的最后一个值</span></span><br><span class="line"></span><br><span class="line">node1--; <span class="comment">//多加了</span></span><br><span class="line">node2++; <span class="comment">//多减了</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;node1&lt;&lt;&quot; &quot;&lt;&lt;node2&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span> (node2 != node1 + <span class="number">1</span>) <span class="comment">//只有两个指针中间只差一个(根节点)</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">judge1</span>(start + <span class="number">1</span>, node1);  <span class="comment">//验证左子树</span></span><br><span class="line"><span class="built_in">judge1</span>(node2, end);   <span class="comment">//查右子树</span></span><br><span class="line">ans.<span class="built_in">push_back</span>(pre[start]); <span class="comment">//后序遍历，最后放入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge2</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> <span class="comment">//判断是否是镜像</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt; end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> node1 = start + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> node2 = end;</span><br><span class="line"><span class="keyword">while</span> (node1 &lt;= end &amp;&amp; pre[node1] &gt;= pre[start])</span><br><span class="line">node1++;</span><br><span class="line"><span class="keyword">while</span> (node2 &gt;= start &amp;&amp; pre[node2] &lt; pre[start])</span><br><span class="line">node2--;</span><br><span class="line"></span><br><span class="line">node1--;</span><br><span class="line">node2++;</span><br><span class="line"><span class="keyword">if</span> (node2 != node1 + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">judge2</span>(start + <span class="number">1</span>, node1);</span><br><span class="line"><span class="built_in">judge2</span>(node2, end);</span><br><span class="line">ans.<span class="built_in">push_back</span>(pre[start]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pre[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">judge1</span>(<span class="number">1</span>, num);   <span class="comment">//先正序构造一下，试一下水</span></span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">size</span>() != num) <span class="comment">//试水失败，说明可能是镜像，再试一次水</span></span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">judge2</span>(<span class="number">1</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">size</span>() == num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">if</span> (i != num - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈BST&quot;&gt;&lt;a href=&quot;#浅谈BST&quot; class=&quot;headerlink&quot; title=&quot;浅谈BST&quot;&gt;&lt;/a&gt;浅谈BST&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉堆（没写完）</title>
    <link href="http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E5%A0%86%EF%BC%88%E6%B2%A1%E5%86%99%E5%AE%8C%EF%BC%89/"/>
    <id>http://example.com/2024/07/31/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E5%A0%86%EF%BC%88%E6%B2%A1%E5%86%99%E5%AE%8C%EF%BC%89/</id>
    <published>2024-07-31T02:29:36.350Z</published>
    <updated>2022-04-16T02:39:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈二叉堆"><a href="#浅谈二叉堆" class="headerlink" title="浅谈二叉堆"></a>浅谈二叉堆</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>复习基础数据结构，供日后学习参考吧<br><img src="https://img-blog.csdnimg.cn/8f5d8f0b554542ed886f25e14829095e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><del>（放一个封面）</del></p><h3 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h3><p>二叉堆分为最大堆(大顶堆)和最小堆(小顶堆)，具体区别是：</p><p><strong>大顶堆父亲节点永远大于子节点(堆顶元素是最大的)</strong></p><p><strong>小顶堆父亲节点永远小于子节点(堆顶元素是最小的)</strong></p><p>那么二叉堆如何构建？</p><h3 id="二叉堆建立"><a href="#二叉堆建立" class="headerlink" title="二叉堆建立"></a>二叉堆建立</h3><ul><li>大顶堆构建：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">big_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b_Heap[++b_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = b_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b_Heap[son] &lt;= b_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(b_Heap[son], b_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>小顶堆构建<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">small_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_Heap[++s_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = s_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s_Heap[son] &gt;= s_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s_Heap[son], s_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>汇总完整代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 大顶堆和小顶堆的建立（最小堆+最大堆）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="type">int</span> s_Size, b_Size;</span><br><span class="line"><span class="type">int</span> s_Heap[maxn];</span><br><span class="line"><span class="type">int</span> b_Heap[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">small_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_Heap[++s_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = s_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s_Heap[son] &gt;= s_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s_Heap[son], s_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">big_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b_Heap[++b_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = b_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b_Heap[son] &lt;= b_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(b_Heap[son], b_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="built_in">big_build</span>(remp);</span><br><span class="line">        <span class="built_in">small_build</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; s_Heap[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; b_Heap[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉堆的元素删除操作"><a href="#二叉堆的元素删除操作" class="headerlink" title="二叉堆的元素删除操作"></a>二叉堆的元素删除操作</h3><del>有空再写吧，肚子饿了，吃饭去了</del><br><img src="https://img-blog.csdnimg.cn/2267460cdc4741b285969ad80c8e7090.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈二叉堆&quot;&gt;&lt;a href=&quot;#浅谈二叉堆&quot; class=&quot;headerlink&quot; title=&quot;浅谈二叉堆&quot;&gt;&lt;/a&gt;浅谈二叉堆&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题单-高精度</title>
    <link href="http://example.com/2024/07/31/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%8D%95-%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    <id>http://example.com/2024/07/31/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%8D%95-%E9%AB%98%E7%B2%BE%E5%BA%A6/</id>
    <published>2024-07-31T02:29:36.342Z</published>
    <updated>2022-07-14T02:02:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洛谷题单-高精度"><a href="#洛谷题单-高精度" class="headerlink" title="洛谷题单-高精度"></a>洛谷题单-高精度</h1><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p><img src="https://img-blog.csdnimg.cn/96f8a0b754fd425186cdcbe2a1e9dd08.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1601">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1601</span></span><br><span class="line"><span class="type">char</span> n1[<span class="number">10000</span>], n2[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">10000</span>], num2[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line">    cin &gt;&gt; n2;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(n2);</span><br><span class="line">    <span class="built_in">memset</span>(num1, <span class="number">0</span>, <span class="built_in">sizeof</span>(num1));</span><br><span class="line">    <span class="built_in">memset</span>(num2, <span class="number">0</span>, <span class="built_in">sizeof</span>(num2));</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[len1 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; num1[i];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num2[i] = n2[len2 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; num2[i];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="type">int</span> lenc = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mod1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lenc &lt;= len1 || lenc &lt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[lenc] = num1[lenc] + num2[lenc] + mod1;</span><br><span class="line">        mod1 = ans[lenc] / <span class="number">10</span>;</span><br><span class="line">        ans[lenc] %= <span class="number">10</span>;</span><br><span class="line">        lenc++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[lenc] = mod1;</span><br><span class="line">    <span class="keyword">if</span> (ans[lenc] == <span class="number">0</span>)</span><br><span class="line">        lenc--; <span class="comment">//防止上一位0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p><img src="https://img-blog.csdnimg.cn/a561b69937f249d7bc39336087fc8516.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P2142">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P2142</span></span><br><span class="line"><span class="type">char</span> n1[<span class="number">1000000</span>], n2[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">char</span> remp[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">1000000</span>], num2[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1 &gt;&gt; n2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(n1) &lt; <span class="built_in">strlen</span>(n2) || (<span class="built_in">strlen</span>(n1) == <span class="built_in">strlen</span>(n2) &amp;&amp; <span class="built_in">strcmp</span>(n1, n2) &lt; <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当被减数小于减数时，两者交换，且加上“-”</span></span><br><span class="line">        <span class="built_in">strcpy</span>(remp, n1);</span><br><span class="line">        <span class="built_in">strcpy</span>(n1, n2);</span><br><span class="line">        <span class="built_in">strcpy</span>(n2, remp);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(n2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[len1 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num2[i] = n2[len2 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lenc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lenc &lt;= len1 || lenc &lt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num1[lenc] &lt; num2[lenc])</span><br><span class="line">        &#123;</span><br><span class="line">            num1[lenc] += <span class="number">10</span>;</span><br><span class="line">            num1[lenc + <span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[lenc] = num1[lenc] - num2[lenc];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; num1[lenc] &lt;&lt; &quot; &quot; &lt;&lt; num2[lenc] &lt;&lt; &quot; &quot; &lt;&lt; ans[lenc] &lt;&lt; &quot; &quot; &lt;&lt; lenc &lt;&lt; endl;</span></span><br><span class="line">        lenc++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ans[lenc] == <span class="number">0</span> &amp;&amp; lenc &gt; <span class="number">1</span>) <span class="comment">// lenc大于1不是大于等于！</span></span><br><span class="line">    &#123;</span><br><span class="line">        lenc--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p><img src="https://img-blog.csdnimg.cn/ee49fb78746842e69576df8e70efca78.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1303">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> n1[<span class="number">1000000</span>], n2[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">1000000</span>], num2[<span class="number">1000000</span>], ans[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line">    cin &gt;&gt; n2;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(n2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[len1 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num2[i] = n2[len2 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mod1 = <span class="number">0</span>; <span class="comment">//用来进位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i + j - <span class="number">1</span>] += num1[i] * num2[j] + mod1;</span><br><span class="line">            mod1 = ans[i + j - <span class="number">1</span>] / <span class="number">10</span>;</span><br><span class="line">            ans[i + j - <span class="number">1</span>] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i + len2] = mod1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lenc = len1 + len2;</span><br><span class="line">    <span class="keyword">while</span> (lenc &gt; <span class="number">1</span> &amp;&amp; ans[lenc] == <span class="number">0</span>)</span><br><span class="line">        lenc--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p><img src="https://img-blog.csdnimg.cn/1ddcd9fe9a1344478e0100891be328f7.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1480">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> n1[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">1000000</span>], ans[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line">    cin &gt;&gt; num2;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mod1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] = (mod1 * <span class="number">10</span> + num1[i]) / num2;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;ans[i]&lt;&lt;endl;</span></span><br><span class="line">        mod1 = (mod1 * <span class="number">10</span> + num1[i]) % num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lenc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lenc &lt; len1 &amp;&amp; ans[lenc] == <span class="number">0</span>)</span><br><span class="line">        lenc++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &lt;= len1; i++)</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;洛谷题单-高精度&quot;&gt;&lt;a href=&quot;#洛谷题单-高精度&quot; class=&quot;headerlink&quot; title=&quot;洛谷题单-高精度&quot;&gt;&lt;/a&gt;洛谷题单-高精度&lt;/h1&gt;&lt;h3 id=&quot;加法&quot;&gt;&lt;a href=&quot;#加法&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="洛谷" scheme="http://example.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题单-贪心</title>
    <link href="http://example.com/2024/07/31/%E6%B4%9B%E8%B0%B7%E8%B4%AA%E5%BF%83/"/>
    <id>http://example.com/2024/07/31/%E6%B4%9B%E8%B0%B7%E8%B4%AA%E5%BF%83/</id>
    <published>2024-07-31T02:29:36.335Z</published>
    <updated>2022-07-12T02:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洛谷题单-贪心"><a href="#洛谷题单-贪心" class="headerlink" title="洛谷题单-贪心"></a>洛谷题单-贪心</h1><h3 id="牛奶"><a href="#牛奶" class="headerlink" title="牛奶"></a>牛奶</h3><p><img src="https://img-blog.csdnimg.cn/439d0d1c8f3243178f9be4ff6e433f21.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/03a3a469f01f40c48202450cfd1908b5.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1208">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1208</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p; <span class="comment">//价格</span></span><br><span class="line">    <span class="type">int</span> t; <span class="comment">//拥有的数量</span></span><br><span class="line">&#125; man[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.p &lt; b.p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; man[i].p &gt;&gt; man[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(man + <span class="number">1</span>, man + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; man[++cnt].t)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += man[cnt].p * man[cnt].t;</span><br><span class="line">            n -= man[cnt].t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += man[cnt].p * n;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳跳！"><a href="#跳跳！" class="headerlink" title="跳跳！"></a>跳跳！</h3><p><img src="https://img-blog.csdnimg.cn/8bb5e20a033a400aac148e044e224f05.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 贪心(在剩下的石头里找最大和最小来回跳)</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P4995#submit</span></span><br><span class="line"><span class="type">int</span> stone[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; stone[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(stone + <span class="number">1</span>, stone + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">int</span> rnode = n;</span><br><span class="line">    <span class="type">int</span> lnode = <span class="number">0</span>; <span class="comment">// lnode 初值为1！因为一开始在地面</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lnode != rnode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += (stone[rnode] - stone[lnode]) * (stone[rnode] - stone[lnode]);</span><br><span class="line">            lnode++;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += (stone[rnode] - stone[lnode]) * (stone[rnode] - stone[lnode]);</span><br><span class="line">            rnode--;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="纪念品分组"><a href="#纪念品分组" class="headerlink" title="纪念品分组"></a>纪念品分组</h3><p><img src="https://img-blog.csdnimg.cn/b467d16d231242078636be0d5e9cd2f9.png" alt="在这里插入图片描述"></p><p><a href="https://www.luogu.com.cn/problem/P1094">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1094</span></span><br><span class="line"><span class="type">int</span> gift[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n, cnt;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; gift[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(gift + <span class="number">1</span>, gift + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">int</span> rnode = n;</span><br><span class="line">    <span class="type">int</span> lnode = <span class="number">1</span>;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lnode &lt; rnode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gift[lnode] + gift[rnode] &lt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            lnode++, rnode--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            rnode--;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lnode == rnode)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三国游戏"><a href="#三国游戏" class="headerlink" title="三国游戏"></a>三国游戏</h3><p><img src="https://img-blog.csdnimg.cn/801c46d9cbc34e2bae816890c413a3d9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/af32c24f09c94d45a4da06045614f5f7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/77064a078bdc445287c1e275e2b16e73.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1199">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> gen[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="comment">// 贪心+博弈论</span></span><br><span class="line"><span class="comment">// 每次选择第二大即可！</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; gen[i][j];</span><br><span class="line">            gen[j][i] = gen[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(gen[i] + <span class="number">1</span>, gen[i] + <span class="number">1</span> + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, gen[i][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="推销员"><a href="#推销员" class="headerlink" title="推销员"></a>推销员</h3><p><img src="https://img-blog.csdnimg.cn/32d69d1293bb4f11ade9082c00ca3f6a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a5c8b741d1a54e84a05120619d642889.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P2672">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P2672</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dis;</span><br><span class="line">    <span class="type">int</span> tire;</span><br><span class="line">&#125; a[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> t[<span class="number">100000</span>];    <span class="comment">// t[i]代表前i个最大疲劳值前缀和</span></span><br><span class="line"><span class="type">int</span> d[<span class="number">100000</span>];    <span class="comment">// q[i]代表前i个最大疲劳值的用户中在距离花费的疲劳值</span></span><br><span class="line"><span class="type">int</span> post[<span class="number">100000</span>]; <span class="comment">// post[i]代表挑去i个最大疲劳值用户之后，剩下之中的最大值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.tire &gt; b.tire;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].dis;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + N, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t[i] = t[i - <span class="number">1</span>] + a[i].tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i] = <span class="built_in">max</span>(d[i - <span class="number">1</span>], a[i].dis * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = N; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        post[i] = <span class="built_in">max</span>(post[i + <span class="number">1</span>], <span class="number">2</span> * a[i].dis + a[i].tire);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(t[i] + d[i], t[i - <span class="number">1</span>] + post[i]) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;洛谷题单-贪心&quot;&gt;&lt;a href=&quot;#洛谷题单-贪心&quot; class=&quot;headerlink&quot; title=&quot;洛谷题单-贪心&quot;&gt;&lt;/a&gt;洛谷题单-贪心&lt;/h1&gt;&lt;h3 id=&quot;牛奶&quot;&gt;&lt;a href=&quot;#牛奶&quot; class=&quot;headerlink&quot; title=&quot;牛</summary>
      
    
    
    
    <category term="洛谷" scheme="http://example.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题单-分治</title>
    <link href="http://example.com/2024/07/31/%E6%B4%9B%E8%B0%B7%E5%88%86%E6%B2%BB/"/>
    <id>http://example.com/2024/07/31/%E6%B4%9B%E8%B0%B7%E5%88%86%E6%B2%BB/</id>
    <published>2024-07-31T02:29:36.328Z</published>
    <updated>2022-07-07T14:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洛谷分治题单"><a href="#洛谷分治题单" class="headerlink" title="洛谷分治题单"></a>洛谷分治题单</h1><h3 id="归并排序or逆序对"><a href="#归并排序or逆序对" class="headerlink" title="归并排序or逆序对"></a>归并排序or逆序对</h3><p><img src="https://img-blog.csdnimg.cn/488baaf266124332bdce5fff01668155.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1908">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000000</span>], c[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">mergesort</span>(a, left, mid);</span><br><span class="line"><span class="built_in">mergesort</span>(a, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = left, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= a[j])</span><br><span class="line">c[k++] = a[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = ans + mid - i + <span class="number">1</span>; <span class="comment">//归并排序就是把这句去了</span></span><br><span class="line">c[k++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">c[k++] = a[j++];</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">c[k++] = a[i++];</span><br><span class="line"><span class="keyword">for</span> (i = left, j = <span class="number">0</span>; i &lt;= right; i++, j++)</span><br><span class="line">a[i] = c[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">mergesort</span>(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p><img src="https://img-blog.csdnimg.cn/e3d09886e34e49d2ba869c29c71aba7b.png" alt="在这里插入图片描述"><br>水题<br><a href="https://www.luogu.com.cn/problem/P1226">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1226</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a %= c;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans *= a;</span><br><span class="line">            ans %= c;</span><br><span class="line">        &#125;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = a * a % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld^%lld mod %lld=%lld&quot;</span>, a, b, c, <span class="built_in">fast_power</span>(a, b, c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="幂次方"><a href="#幂次方" class="headerlink" title="幂次方"></a>幂次方<img src="https://img-blog.csdnimg.cn/4be810a82a844db9b7cbe5be8bbdffa6.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/cac4c222f29c4af78dd603925a51d5cc.png" alt="在这里插入图片描述"></h3><p><a href="https://www.luogu.com.cn/problem/P1010">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1010</span></span><br><span class="line"><span class="comment">// 分治递归</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, tar = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tar &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        tar *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> gap = n - tar / <span class="number">2</span>;</span><br><span class="line">    cnt--; <span class="comment">//出来的时候已经比n大了，应该回退一位</span></span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span> || cnt == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(%d)&quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">1</span>)</span><br><span class="line">        ; <span class="comment">//假如是1的话，不必输出2(1)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cnt &gt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>); <span class="comment">//递归，用同样的方式表示cnt</span></span><br><span class="line">        <span class="built_in">search</span>(cnt);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="built_in">search</span>(gap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">search</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平面最近点对（Pro）"><a href="#平面最近点对（Pro）" class="headerlink" title="平面最近点对（Pro）"></a>平面最近点对（Pro）</h3><p><img src="https://img-blog.csdnimg.cn/a8567dfc234e41eeb0c9bd6ac50140d7.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1429">传送门</a><br>这道题的思路其实很有意思，有点像之前的归并排序的模板，它的思路很好理解，将一个点集分割，当解决1个点集时，我们将其分割为俩，将各个子集的最短距离求出，但是这样还没完！<strong>关键我们之前只分别考虑了两个点集内的最短，假如两个点集之间的点有最短咋办捏？</strong><br><strong>我们的方法是创建隔离带，我们设之前两个内点集的最短距离是minf，取点集中沿x轴方向最中间的点，以这个点为中心，左右各延拓minf的区域，讨论这段区域的点之间的最短距离！</strong><br><strong>为什么只考虑这一段呢？因为超过这个隔离带，两点的距离必然大于minf，无需考虑！</strong><br><img src="https://img-blog.csdnimg.cn/5334b319ff3947b29de155fc29a30d9a.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1429</span></span><br><span class="line"><span class="comment">// 分治算法</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">&#125; point[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">min</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x = (a.x - b.x) * (a.x - b.x);</span><br><span class="line">    <span class="type">double</span> y = (a.y - b.y) * (a.y - b.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> minf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span> minf;</span><br><span class="line">    <span class="keyword">if</span> (left + <span class="number">1</span> == right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dis</span>(point[left], point[right]);</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">double</span> min1 = <span class="built_in">merge</span>(left, mid);</span><br><span class="line">    <span class="type">double</span> min2 = <span class="built_in">merge</span>(mid + <span class="number">1</span>, right);</span><br><span class="line">    minf = <span class="built_in">min</span>(min1, min2); <span class="comment">//两个子点集的最短</span></span><br><span class="line">    <span class="comment">// 关键是求跨越两个点集之间的最短可能距离</span></span><br><span class="line">    vector&lt;node&gt; gap; <span class="comment">//创建隔离带，以平行y轴的中线为界，向左右延申长度为minf的隔离带</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(point[mid].x - point[i].x) &lt; minf)</span><br><span class="line">            gap.<span class="built_in">push_back</span>(point[i]);</span><br><span class="line">    &#125; <span class="comment">//有资格进入备选范围</span></span><br><span class="line">    <span class="built_in">sort</span>(gap.<span class="built_in">begin</span>(), gap.<span class="built_in">end</span>(), cmp2);</span><br><span class="line">    <span class="type">int</span> l = gap.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; l &amp;&amp; gap[j].y - gap[i].y &lt; minf; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> remp;</span><br><span class="line">            remp = <span class="built_in">dis</span>(gap[i], gap[j]);</span><br><span class="line">            <span class="keyword">if</span> (minf &gt; remp)</span><br><span class="line">                minf = remp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int temp[100000];</span></span><br><span class="line"><span class="comment">// bool cmps(const int &amp;a, const int &amp;b) &#123; return point[a].y &lt; point[b].y; &#125;</span></span><br><span class="line"><span class="comment">// double merge(int left, int right)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     double d = 2 &lt;&lt; 20;</span></span><br><span class="line"><span class="comment">//     if (left == right)</span></span><br><span class="line"><span class="comment">//         return d;</span></span><br><span class="line"><span class="comment">//     if (left + 1 == right)</span></span><br><span class="line"><span class="comment">//         return dis(point[left], point[right]);</span></span><br><span class="line"><span class="comment">//     int mid = left + right &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">//     double d1 = merge(left, mid);</span></span><br><span class="line"><span class="comment">//     double d2 = merge(mid + 1, right);</span></span><br><span class="line"><span class="comment">//     d = min(d1, d2);</span></span><br><span class="line"><span class="comment">//     int i, j, k = 0;</span></span><br><span class="line"><span class="comment">//     for (i = left; i &lt;= right; i++)</span></span><br><span class="line"><span class="comment">//         if (fabs(point[mid].x - point[i].x) &lt; d) // 这里不太一样</span></span><br><span class="line"><span class="comment">//             temp[k++] = i;</span></span><br><span class="line"><span class="comment">//     sort(temp, temp + k, cmps);</span></span><br><span class="line"><span class="comment">//     for (i = 0; i &lt; k; i++)</span></span><br><span class="line"><span class="comment">//         for (j = i + 1; j &lt; k &amp;&amp; point[temp[j]].y - point[temp[i]].y &lt; d; j++)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             double d3 = dis(point[temp[i]], point[temp[j]]);</span></span><br><span class="line"><span class="comment">//             if (d &gt; d3)</span></span><br><span class="line"><span class="comment">//                 d = d3;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     return d;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; point[i].x &gt;&gt; point[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(point + <span class="number">1</span>, point + <span class="number">1</span> + n, cmp1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>, <span class="built_in">merge</span>(<span class="number">1</span>, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="奶牛选密码"><a href="#奶牛选密码" class="headerlink" title="奶牛选密码"></a>奶牛选密码</h3><p><img src="https://img-blog.csdnimg.cn/3f9ffd4d33e8428ab8bd6eb5e4ca0fe7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6a1d66bcc6184e399dac98a36651f705.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P3612">传送门</a><br>超时代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3612</span></span><br><span class="line"><span class="comment">// 超限了T_T</span></span><br><span class="line">string str;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> N;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ans</span><span class="params">(string tar, <span class="type">long</span> <span class="type">long</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        tar += tar[l - <span class="number">1</span>];</span><br><span class="line">        tar += tar.<span class="built_in">substr</span>(<span class="number">0</span>, l - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; tar &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">ans</span>(tar, l * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tar[N - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; str &gt;&gt; N;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> l = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">ans</span>(str, l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ac代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3612</span></span><br><span class="line"><span class="comment">// 分治 参考题解：https://www.luogu.com.cn/blog/issue-s/solution-p3612</span></span><br><span class="line">string str;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; str &gt;&gt; N;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> l;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; N) <span class="comment">//等效于递归，由当前串不断向前回退</span></span><br><span class="line">    &#123;</span><br><span class="line">        l = len;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; N)</span><br><span class="line">            l *= <span class="number">2</span>;</span><br><span class="line">        l /= <span class="number">2</span>; <span class="comment">//得到目标长度的一半长</span></span><br><span class="line">        N -= (l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>)</span><br><span class="line">            N = l;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; str[N - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="地毯填铺"><a href="#地毯填铺" class="headerlink" title="地毯填铺"></a>地毯填铺</h3><p><img src="https://img-blog.csdnimg.cn/e3c24efaf0f246e1bef2dffdd696be12.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">3                          </span><br><span class="line">3 3   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">输出</span><br><span class="line">5 5 1</span><br><span class="line">2 2 4</span><br><span class="line">1 1 4</span><br><span class="line">1 4 3</span><br><span class="line">4 1 2</span><br><span class="line">4 4 1</span><br><span class="line">2 7 3</span><br><span class="line">1 5 4</span><br><span class="line">1 8 3</span><br><span class="line">3 6 3</span><br><span class="line">4 8 1</span><br><span class="line">7 2 2</span><br><span class="line">5 1 4</span><br><span class="line">6 3 2</span><br><span class="line">8 1 2</span><br><span class="line">8 4 1</span><br><span class="line">7 7 1</span><br><span class="line">6 6 1</span><br><span class="line">5 8 3</span><br><span class="line">8 5 2</span><br><span class="line">8 8 1</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P1228">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1228</span></span><br><span class="line"><span class="comment">// 递归分治</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lu ans(x + l - 1, y + l - 1, x, y, l) <span class="comment">//左上</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ru ans(x + l - 1, y + l, x, y + l, l) <span class="comment">//右上</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ld ans(x + l, y + l - 1, x + l, y, l) <span class="comment">//左下</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rd ans(x + l, y + l, x + l, y + l, l) <span class="comment">//右下</span></span></span><br><span class="line"><span class="comment">// tarx,tary是(等效)公主的位置</span></span><br><span class="line"><span class="comment">// x,y是正在搜索的方格的左上顶角坐标</span></span><br><span class="line"><span class="comment">// len是正在搜索方格的边长</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ans</span><span class="params">(<span class="type">long</span> <span class="type">long</span> tarx, <span class="type">long</span> <span class="type">long</span> tary, <span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y, <span class="type">long</span> <span class="type">long</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> l = len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (tarx &lt; l + x &amp;&amp; tary &lt; l + y) <span class="comment">//公主在左上</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x, y, l);</span><br><span class="line">        ru;</span><br><span class="line">        ld;</span><br><span class="line">        rd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tarx &lt; l + x &amp;&amp; tary &gt;= l + y) <span class="comment">//右上角</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x, y + l, l);</span><br><span class="line">        lu;</span><br><span class="line">        ld;</span><br><span class="line">        rd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tarx &gt;= x + l &amp;&amp; tary &lt; l + y) <span class="comment">//左下角</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x + l, y, l);</span><br><span class="line">        lu;</span><br><span class="line">        ru;</span><br><span class="line">        rd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tarx &gt;= x + l &amp;&amp; tary &gt;= l + y) <span class="comment">//右下角</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x + l, y + l, l);</span><br><span class="line">        lu;</span><br><span class="line">        ru;</span><br><span class="line">        ld;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k, tarx, tary;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; tarx &gt;&gt; tary;</span><br><span class="line">    <span class="built_in">ans</span>(tarx, tary, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">pow</span>(<span class="number">2</span>, k));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;洛谷分治题单&quot;&gt;&lt;a href=&quot;#洛谷分治题单&quot; class=&quot;headerlink&quot; title=&quot;洛谷分治题单&quot;&gt;&lt;/a&gt;洛谷分治题单&lt;/h1&gt;&lt;h3 id=&quot;归并排序or逆序对&quot;&gt;&lt;a href=&quot;#归并排序or逆序对&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="洛谷" scheme="http://example.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
