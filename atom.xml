<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蜡笔小金QAQ的个人主页</title>
  
  <subtitle>Re0:从零开始的IT码农生活</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-04T14:11:15.470Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蜡笔小金QAQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>朝花夕拾(二)————大一下蹲家学习生活回顾</title>
    <link href="http://example.com/2022/07/04/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE(%E4%BA%8C)%E2%80%94%E2%80%94%E5%A4%A7%E4%B8%80%E4%B8%8B%E8%B9%B2%E5%AE%B6%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB%E5%9B%9E%E9%A1%BE/"/>
    <id>http://example.com/2022/07/04/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE(%E4%BA%8C)%E2%80%94%E2%80%94%E5%A4%A7%E4%B8%80%E4%B8%8B%E8%B9%B2%E5%AE%B6%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB%E5%9B%9E%E9%A1%BE/</id>
    <published>2022-07-04T09:01:39.349Z</published>
    <updated>2022-07-04T14:11:15.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p><strong>先挖一个坟，以纪念逝去的青春</strong></p><p><img src="https://img-blog.csdnimg.cn/d0a81ffd844442d7993391fb5def33fb.png" alt="在这里插入图片描述"><br>12月30号，ACM寒假培训的最后一天，整个宿舍已经只剩下我一个了，原本有两个山东室友和自己并肩作战，结果却先润了，走前的前一天，爸妈让我把桌上的东西全部放入箱子，所有的衣服都寄回家，当初还不太理解，现在看真是明智之举、、、、、、<br><img src="https://img-blog.csdnimg.cn/f7465d82b18b4e869b2589a27cc12299.jpeg" alt="在这里插入图片描述"><br>走的前一天晚上，我到5157去串门，住在那里的是dxy大佬，七天培训经常找他debug，慢慢变熟了<br>我的是31号一早的火车，他走得比我迟，我去和他道别，寒暄之余，我清晰地记得我说了一句：<br><strong>“三个月后再见！”</strong><br><img src="https://img-blog.csdnimg.cn/8902995139684a03bdc4bab2b01d1c18.png" alt="在这里插入图片描述"></p><h1 id="蹲家生活"><a href="#蹲家生活" class="headerlink" title="蹲家生活"></a>蹲家生活</h1><p>我原本以为20年疫情的寒假，是我人生最长的假期<br>现在看来，是我太年轻了。</p><p>从12月31号离开学校，到7月3号的今天课设刚刚写完，已经整整过去半年的时间。不知不觉一个学期竟然在家中度过。</p><p>有些事想想真的很恍惚，即使在过去的12年学习生活中，虽然也是在家上学读书，但是大部分的时间其实都在学校，宅在家里的时间其实并不多，在这个半年里，在家几乎宅了半年。学习，生活全在家中解决，无论是以往的小学中学生活，还是以后步入社会的工作生活。呆在家里时间这么长的经历应该是绝无仅有的。我忍不住想，这样宝贵的人生阅历，到底是赢还是输呢？</p><h3 id="文化课学习"><a href="#文化课学习" class="headerlink" title="文化课学习"></a>文化课学习</h3><p>其实导员正式通知开学延期的时候，我对文化课的学习并不是很担心</p><p>20年疫情，线上学习半个学期回到学校，开学考试考的名次是高中里最好的一次，在家中学习必然会有折扣，只不过是多少问题，我觉得，过去十二年，从小学，到初中，再到大学；坎坎坷坷走到现在，支持我走下去的绝对不是自己的天资——我一直觉得自己是没有别人聪明的，理解同一个知识点也比别人慢半拍，坚持到现在，是靠着比别人更多的努力。笨鸟先飞，勤能补拙，本该如此而已。</p><h5 id="马原"><a href="#马原" class="headerlink" title="马原"></a>马原</h5><p><img src="https://img-blog.csdnimg.cn/408f37678cda4a3b9df916d1cbe33dd9.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/6be19f01d7e54d24823d54e4d9253aba.png" alt="在这里插入图片描述"><br>大学考试里，最先考的就是马原了。</p><p>说实话，马原考前真的让我挺着急的，3月29号正值上海疫情，自己所在的城市也有上海回来的阳性感染者，没过几天，快递停运，直接封城。那时候连书都没有，学校打印店的资料也寄不过来。那时候真的挺焦虑的，马原本身就要背书，我手头上没有实体书，快递停运也寄不过来，更何况马原课本有将近400面，很多概念听上去就已经晦涩难懂，学分占比3分，真的很让人头大。</p><p>实在没有办法，后来让学友发的顺丰航空，运费就花了70块钱，我自己还有点心疼，爸妈倒觉得无所谓，钱能解燃眉之急，再贵也值。<br><img src="https://img-blog.csdnimg.cn/d196db759200455cb876af766fac0ab0.jpeg" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/958e413621be40ce8cbd5cee6bc9fd45.jpeg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0521b6c8bbc94847b91f883928f3cedb.jpeg" alt="在这里插入图片描述"><br>（夺命连催）<br>资料到手，万事具备。从三月下旬，到五月中旬，我每天早上固定六点半起床背马原，一开始不习惯早起，坐在书桌前背书总是效率低下，总是打瞌睡，疫情封楼也无法外出，后来我想到一个办法——到单元楼的天台去背书，那段时间每天凌晨起来到顶楼背书，经常还会遇到一个今年高考的文科女生也在天台背书，有一次她问我是哪所中学，我尴尬的说我上大学（笑哭），她惊讶了很长时间：“上大学也这么辛苦吗？”</p><p>其实幸苦与否并也不是时间段决定，还是看个人追求吧。如果对上的大学无所谓，高中也可以天天玩乐过的很轻松；如果想在大学学到东西，天天起早贪黑辛苦程度也不亚于高中。只不过高中老师催得多，家长看的严，同学们也卷的明显；大学往往都淡化了。每个人都有自己的生活节奏，如人喝水，冷暖自知，自己觉得充实就好。<br><img src="https://img-blog.csdnimg.cn/2a04622bf4844117a8eae8ae649a13a8.jpeg" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/8e9d94b9b21f41818ef3eb3dcc2cbc99.jpeg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/de9073f689a04e3ba6ac8efdcc784e34.jpeg" alt="在这里插入图片描述"><br>（反复翻旧的马原课本）<br>其实一开始背真的很绝望，感觉根本记不住，很难下手，总是不由自主用礼貌用语去问候作者父母，<br>但是随着一刷，二刷，三刷，慢慢觉得也没那么难记，到考前最后一刷，回顾这两个月的马原学习，我觉得书里的很多道理是很有用的，晦涩难懂的理论慢慢从理解也变成认同了。有时在饭后之余，我也会给父母讲一讲书本上学到的马克思的唯物论和唯物辩证法（？）</p><p>有时候也会去想：也许我去学文更合适？</p><p>后来马原也拿到了满意的分数，算是对得起两个月少睡的懒觉。感谢马克思，让我一学期保持了六点钟起床的好习惯。<br><img src="https://s2.loli.net/2022/07/04/6AXWvRfBzhCJ7oY.jpg" alt="清晨六点半的城市"><br>（早上六点半的风景）</p><p><del>这个城市，真的值得我守护吗？</del>（中二病犯了）</p><h5 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h5><p>大一上学期选的排球，老师有点严格， </p><p>（未完待续，先鸽了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;先挖一个坟，以纪念逝去的青春&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.</summary>
      
    
    
    
    <category term="大学生活" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="回忆" scheme="http://example.com/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>朝花夕拾-GPLT赛后遐想</title>
    <link href="http://example.com/2022/04/24/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BEGPLT%E8%B5%9B%E5%90%8E%E9%81%90%E6%83%B3/"/>
    <id>http://example.com/2022/04/24/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BEGPLT%E8%B5%9B%E5%90%8E%E9%81%90%E6%83%B3/</id>
    <published>2022-04-23T23:48:03.592Z</published>
    <updated>2022-04-24T02:10:29.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="朝花夕拾-GPLT赛后遐想"><a href="#朝花夕拾-GPLT赛后遐想" class="headerlink" title="朝花夕拾-GPLT赛后遐想"></a>朝花夕拾-GPLT赛后遐想</h1><p>2022年的GPLT圆满结束，在前有蓝桥杯结束不到半个月，后有一星期即将大学物理考试的情况下，说实话这个天梯赛时间上真的有点尴尬。</p><p>gplt（团体程序设计天梯赛），规则就是每个学校拉若干的队伍，每个队伍十个人，队伍排名按照是个人做出来题目得分的总和进行排名，每个学校获奖队伍只能有三个（想获奖还必须挤入学校队伍前三）。</p><p>三月下旬的时候，学校的竞赛队实行包分配制度，前三个队伍是拿奖队，汇聚了各路卷王和大二学长，成员大多是俱乐部名声在外的大佬。后面三队是大一同学(我在第五组)组成的队伍，定位其实是重在参与，为明年积累经验。</p><p>所以当时看到分队表，表中的队伍实力是从一到六逐级递减的，看到自己没能进入前三队，说实话，挺难受的说。</p><p>学校的这样的决策肯定是正确的，想让奖项最大化，优先让实力强劲的同学去组建前三队，这个策略很合理(换做我我也会这样去组织)，让大一先积累经验，大二再战。虽然知道如此,那几天心情都不太好，总觉得自己获奖无望了。之前寒假专门报了洛谷算法班，蓝桥杯从第六届做到了第十三届，gplt的往年真题在分队结果没出之前就一直在刷，当你紧锣密鼓严阵以待，最终结果大概率是一无所获。换谁都有点挫败吧。</p><p>3月25号，正好是星期六，和初中的铁哥们连麦打游戏，多年的哥们一听我的声音就知道我的心情不好，我说出事情的原委，哥们安慰之余，也鼓励我做好自己</p><p>“你还是认真准备，努力过了，就算获不了奖也要打出威风出来”</p><p>下号的时候他这么说。<br><img src="https://s2.loli.net/2022/04/24/Vzt6ysTB8gA3QmL.jpg"></p><p>分队结果过了几天后，其实自己也慢慢想开了，分队机制本来就很合理，自己还是自己，曾经付出的努力没有烟消云散，现在多了的是和我并肩作战的其他队员和继续走下去的决心。</p><p>3月26   号星期天，一大早我爬起来，昨天晚上我加了我们第五小组其他九名队员的QQ，今早陆续通过申请，我拉了一个“天梯赛第五小组”的交流群，群建好后，留在我草稿里的群公告反复删改，提出了自愿每日训练打卡的想法。</p><p>原先担心提议可能会遇到冷落，结果大家都纷纷赞成，我也暗自松了一口气，其实我一直觉得，只要大家一起努力，一起进步，结果怎么样，我都觉得没有遗憾了。<br><img src="https://s2.loli.net/2022/04/24/2vUQjqbculIAsGS.png"></p><p>时间转眼过了一个月，打卡活动井然有序，天梯赛如期而至。</p><p>考前其实一直抱着获不了奖的心态去准备，考试的时候也没想太多，感觉今年的题目和往年差别有点大，L1八道题没有一个是字符串问题，这和之前网上所流传的“天梯赛就是字符串大赛”完全不同，不过影响不大，前七道题都一遍ac，第八题第一次交内存超限，我想了想，换成stl动态数组存矩阵，也顺利ac。到了L2，真正的考验才刚刚开始，第一道栈的模拟，题目信息量过大再加上本来就是大一刚学底子薄弱，一道题写了将近一个小时，自己运行竟然跑不出来，后来赶紧跳过做了L2第二题，第二题部分通过，又赶紧去改第一题的代码，还好，运气不错，第一题顺利通过。</p><p>16：30到了，我在椅子上靠了一会，感觉自己考的不好，这次果然获奖无望了，我抱着吃瓜的心理去看了榜单，结果奇迹出现了。</p><p>这是我们比赛结果的榜单(河北省内)，第五小组是我们<br><img src="https://s2.loli.net/2022/04/24/KvWzoNu89JwImsr.png"></p><p>我们第五组，在学校定位是气氛组的我们，挤进了校内前三。</p><p>我激动了好一会，再回头看小组群，<br>已经是99+。</p><p><img src="https://s2.loli.net/2022/04/24/fkhOqBMl63wdmuc.jpg"><br><img src="https://s2.loli.net/2022/04/24/3r82jHQFiVKWaeM.jpg"><br><img src="https://s2.loli.net/2022/04/24/4iT82kqBQmbluXh.jpg"><br><strong>我只想说：xdm！牛逼！！！<br>在座的都是狠人！</strong></p><p>4月23日天梯赛考完当天晚上，又是周六<br>我和铁哥们又在晚上连麦打游戏，他得知这个消息之后，只是淡淡说了一句：</p><p>“意料之中”</p><p>晚上玩完游戏，躺在床上，忍不住想，觉得当初的自己其实也挺幼稚的，为什么会觉得自己不行呢，为什么要那么快否定自己呢。想起来曾经看过的一部传记电影《至暗时刻》的片尾丘吉尔名言，一直也很喜欢这句话。</p><p>“Success is not final, failure is not fatal — it is the courage to continue that counts”</p><p><strong>成功不是终点，失败也并非灾难：最重要的是前进的勇气</strong></p><p>致敬从未放弃的自己，也致敬给力的队友，也致敬风华正茂的年华。<br><img src="https://s2.loli.net/2022/04/24/lJ31MXvo6qdEFxD.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;朝花夕拾-GPLT赛后遐想&quot;&gt;&lt;a href=&quot;#朝花夕拾-GPLT赛后遐想&quot; class=&quot;headerlink&quot; title=&quot;朝花夕拾-GPLT赛后遐想&quot;&gt;&lt;/a&gt;朝花夕拾-GPLT赛后遐想&lt;/h1&gt;&lt;p&gt;2022年的GPLT圆满结束，在前有蓝桥杯结束不到半</summary>
      
    
    
    
    <category term="pta天梯赛" scheme="http://example.com/categories/pta%E5%A4%A9%E6%A2%AF%E8%B5%9B/"/>
    
    
    <category term="回忆" scheme="http://example.com/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>scanf和printf读入输出字符串的探讨</title>
    <link href="http://example.com/2022/04/15/scanf%E5%92%8Cprintf%E8%AF%BB%E5%85%A5%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>http://example.com/2022/04/15/scanf%E5%92%8Cprintf%E8%AF%BB%E5%85%A5%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%A2%E8%AE%A8/</id>
    <published>2022-04-15T14:07:03.379Z</published>
    <updated>2022-04-22T07:59:13.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scanf和printf读入输出字符串的探讨"><a href="#scanf和printf读入输出字符串的探讨" class="headerlink" title="scanf和printf读入输出字符串的探讨"></a>scanf和printf读入输出字符串的探讨</h1><h3 id="1-scanf读入char字符数组（char字符串）"><a href="#1-scanf读入char字符数组（char字符串）" class="headerlink" title="1. scanf读入char字符数组（char字符串）"></a>1. scanf读入char字符数组（char字符串）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">char</span> str[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;len);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-cin-getline-整行读入char字符数组（char字符串）"><a href="#2-cin-getline-整行读入char字符数组（char字符串）" class="headerlink" title="2. cin.getline()整行读入char字符数组（char字符串）"></a>2. cin.getline()整行读入char字符数组（char字符串）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> remp[<span class="number">50</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(remp,<span class="number">10000</span>);</span><br><span class="line">cout&lt;&lt;remp&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,remp);</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(remp)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c490473344b24006b852cc0fa5a9ff3c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-getline-读入string字符串，并且用printf强转输出"><a href="#3-getline-读入string字符串，并且用printf强转输出" class="headerlink" title="3. getline()读入string字符串，并且用printf强转输出"></a>3. getline()读入string字符串，并且用printf强转输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">string remp;</span><br><span class="line"><span class="built_in">getline</span>(cin,remp);</span><br><span class="line">cout&lt;&lt;remp&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;remp.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,remp.<span class="built_in">c_str</span>());</span><br><span class="line">cout&lt;&lt;remp.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a6993013441b443288984a86d43d3a54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="4-scanf和printf读入输出string"><a href="#4-scanf和printf读入输出string" class="headerlink" title="4. scanf和printf读入输出string"></a>4. scanf和printf读入输出string</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">string remp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,remp.<span class="built_in">c_str</span>());</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(remp.<span class="built_in">c_str</span>())&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;remp.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,remp.<span class="built_in">c_str</span>());</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(remp.<span class="built_in">c_str</span>())&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很有意思的是用scanf强转读入的string字符串，用其内置的length（）函数求其长度竟然使用不了，将string强转为char数组再用strlen（）求长度就能求出来了，真的很神奇<br><img src="https://img-blog.csdnimg.cn/05b925ca44df4b75b58e777e493c30ed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="5-string读入，printf输出-好像没啥用"><a href="#5-string读入，printf输出-好像没啥用" class="headerlink" title="5.string读入，printf输出(好像没啥用)"></a>5.string读入，printf输出(好像没啥用)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string remp;</span><br><span class="line">    <span class="built_in">getline</span>(cin, remp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, remp.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;scanf和printf读入输出字符串的探讨&quot;&gt;&lt;a href=&quot;#scanf和printf读入输出字符串的探讨&quot; class=&quot;headerlink&quot; title=&quot;scanf和printf读入输出字符串的探讨&quot;&gt;&lt;/a&gt;scanf和printf读入输出字符串的</summary>
      
    
    
    
    <category term="探讨" scheme="http://example.com/categories/%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉搜索树</title>
    <link href="http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/"/>
    <id>http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/</id>
    <published>2022-04-15T14:02:33.106Z</published>
    <updated>2022-04-16T02:40:06.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈BST"><a href="#浅谈BST" class="headerlink" title="浅谈BST"></a>浅谈BST</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 最近不顺心的事情有点多，再加上赶ptaL2 的题单，很久没做知识总结了 ，现在pta的题目告一段落，参考了某大佬 <del>（某卷王）</del> 总结的知识点，鸣谢大佬！总结一下BST问题的知识点，供以后参考。<br> 封面：<br> <img src="https://img-blog.csdnimg.cn/1eb941207e6b46578ce8055ab92fc6bc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> <em><strong>站在巨人 <del>（卷王）</del> 的肩上，才能看 <del>（卷）</del> 的更远</strong></em></p><h3 id="二叉搜索树的性质"><a href="#二叉搜索树的性质" class="headerlink" title="二叉搜索树的性质"></a>二叉搜索树的性质</h3><p> 一棵二叉搜索树可被递归地定义为具有下列性质的二叉树：对于任一结点</p><ul><li>其左子树中所有结点的键值小于该结点的键值；</li><li>其右子树中所有结点的键值大于等于该结点的键值；</li><li>其左右子树都是二叉搜索树。</li></ul><p>乍一看，其实感觉和二叉堆很像，不过二叉堆左右儿子之间没有可比性，因为二叉堆是根据与父亲节点大小关系建堆的，兄弟节点似乎无法比较，所以同一个序列，以不同顺序输入的生成的二叉堆序列也自然不同。<br>二叉搜索树也有类似的性质，但是二叉搜索树输入的节点不会发生位置交替，这和二叉堆边插入边排序不同，所以，同一组数字不同顺序输入二叉搜索树也会导致二叉搜索树结构不同。假如输入的数字过于玄学，会导致树的左右子树不平衡，如果将两个子树平衡，就变成了平衡树(Treap)</p><h3 id="二叉搜索树的操作"><a href="#二叉搜索树的操作" class="headerlink" title="二叉搜索树的操作"></a>二叉搜索树的操作</h3><h5 id="必要的初始化"><a href="#必要的初始化" class="headerlink" title="必要的初始化"></a>必要的初始化</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF -1</span></span><br><span class="line"><span class="type">int</span> BST[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">BST[i] = INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST[root] &gt;= x)<span class="comment">//说明该节点应该在其左边</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span>, x); <span class="comment">//左儿子比父亲小，右儿子更大</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, x); <span class="comment">//右儿子比父亲大，往右边放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>中序遍历其实就是序列从小到大排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="找最大"><a href="#找最大" class="headerlink" title="找最大"></a>找最大</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往右走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_max</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="找最小"><a href="#找最小" class="headerlink" title="找最小"></a>找最小</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往左走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_min</span>(root * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span> <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[root]) <span class="comment">//往右找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[root]) <span class="comment">//往左找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//找到了，开始修改</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = INF; <span class="comment">//没有儿子，直接封杀</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF) <span class="comment">//左子树存在，右子树无</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, BST[root * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF) <span class="comment">//左子树空，右子树存在</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, BST[root * <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[root * <span class="number">2</span>] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有两种修改方式！</span></span><br><span class="line"><span class="comment">//第一种是修改用后驱节点(右子树最小节点更换)</span></span><br><span class="line"><span class="comment">//第二种是用前驱节点修改(左子树最大节点更换)</span></span><br><span class="line"><span class="comment">//这里演示前者</span></span><br><span class="line"><span class="type">int</span> post_point = <span class="built_in">get_min</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">BST[root] = post_point;</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, post_point);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="汇总代码，实弹演习"><a href="#汇总代码，实弹演习" class="headerlink" title="汇总代码，实弹演习"></a>汇总代码，实弹演习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">7</span><br><span class="line">8 10 11 8 6 7 5</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF -1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> BST[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST[root] &gt;= x)<span class="comment">//说明该节点应该在其左边</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span>, x); <span class="comment">//左儿子比父亲小，右儿子更大</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, x); <span class="comment">//右儿子比父亲大，往右边放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floor_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(root);</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa = q.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; BST[fa] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (BST[fa * <span class="number">2</span>] != INF)</span><br><span class="line">q.<span class="built_in">push</span>(fa * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (BST[fa * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">q.<span class="built_in">push</span>(fa * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往左走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_min</span>(root * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往右走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_max</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> x)</span> <span class="comment">//查找某一个特殊的元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[now])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">search</span>(now * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[now])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">search</span>(now * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span> <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[root]) <span class="comment">//往右找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[root]) <span class="comment">//往左找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//找到了，开始修改</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = INF; <span class="comment">//没有儿子，直接封杀</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF) <span class="comment">//左子树存在，右子树无</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, BST[root * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF) <span class="comment">//左子树空，右子树存在</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, BST[root * <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[root * <span class="number">2</span>] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有两种修改方式！</span></span><br><span class="line"><span class="comment">//第一种是修改用后驱节点(右子树最小节点更换)</span></span><br><span class="line"><span class="comment">//第二种是用前驱节点修改(左子树最大节点更换)</span></span><br><span class="line"><span class="comment">//这里演示前者</span></span><br><span class="line"><span class="type">int</span> post_point = <span class="built_in">get_min</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">BST[root] = post_point;</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, post_point);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">BST[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> remp;</span><br><span class="line">cin &gt;&gt; remp;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, remp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pre_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">post_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">in_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_max</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_min</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">in_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src="https://img-blog.csdnimg.cn/c277f4fd28ab478ab87798259efeae16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="插一道题"><a href="#插一道题" class="headerlink" title="插一道题"></a>插一道题</h3><p><img src="https://img-blog.csdnimg.cn/64f02fa50dc142548aadcf90cecebf13.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题我是参考LP大佬的解法，鸣谢大佬！解法很巧妙，我们看题，它题目告诉我们它输入的序列有可能是正常的二叉搜索树，也可能是镜像的，那咋办捏？<br>判断两遍就可以了！先用当正常的遍历一下，试试水，如果成了就直接pass，不成了的话就用镜像的方式遍历一次<br>那么，我们怎么判断一个遍历是不是一个二叉搜索树捏？<br>以正常的为例子！<br>看图！</p><p><img src="https://img-blog.csdnimg.cn/6ed9337cc54b4fe0bc84b4106a82950c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><del>字有点丑不好意思我的锅</del><br>它生成的前序遍历应该是：<br><img src="https://img-blog.csdnimg.cn/9fc055e195d340dd8b629d0754336b09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>你会发现：对一段前序遍历，第一个元素是根节点，蓝色箭头之前到根节点都是小于根节点的！而绿色箭头都是大于根节点的！<br>而这两个箭头指的也是根节点的左右子树！<br>所以直接按这个规律进行判断！判断成功，就判断它的子树是否满足！</p><p>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="type">int</span> pre[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge1</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> <span class="comment">//判断是否是正序</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// start是根节点</span></span><br><span class="line"><span class="keyword">if</span> (start &gt; end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> node1 = start + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> node2 = end;</span><br><span class="line"><span class="keyword">while</span> (node1 &lt;= end &amp;&amp; pre[node1] &lt; pre[start])</span><br><span class="line">node1++; <span class="comment">//从前往后寻找比根节点小的最后一个值</span></span><br><span class="line"><span class="keyword">while</span> (node2 &gt; start &amp;&amp; pre[node2] &gt;= pre[start])</span><br><span class="line">node2--; <span class="comment">//从后往前寻找比根节点大的最后一个值</span></span><br><span class="line"></span><br><span class="line">node1--; <span class="comment">//多加了</span></span><br><span class="line">node2++; <span class="comment">//多减了</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;node1&lt;&lt;&quot; &quot;&lt;&lt;node2&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span> (node2 != node1 + <span class="number">1</span>) <span class="comment">//只有两个指针中间只差一个(根节点)</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">judge1</span>(start + <span class="number">1</span>, node1);  <span class="comment">//验证左子树</span></span><br><span class="line"><span class="built_in">judge1</span>(node2, end);   <span class="comment">//查右子树</span></span><br><span class="line">ans.<span class="built_in">push_back</span>(pre[start]); <span class="comment">//后序遍历，最后放入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge2</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> <span class="comment">//判断是否是镜像</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt; end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> node1 = start + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> node2 = end;</span><br><span class="line"><span class="keyword">while</span> (node1 &lt;= end &amp;&amp; pre[node1] &gt;= pre[start])</span><br><span class="line">node1++;</span><br><span class="line"><span class="keyword">while</span> (node2 &gt;= start &amp;&amp; pre[node2] &lt; pre[start])</span><br><span class="line">node2--;</span><br><span class="line"></span><br><span class="line">node1--;</span><br><span class="line">node2++;</span><br><span class="line"><span class="keyword">if</span> (node2 != node1 + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">judge2</span>(start + <span class="number">1</span>, node1);</span><br><span class="line"><span class="built_in">judge2</span>(node2, end);</span><br><span class="line">ans.<span class="built_in">push_back</span>(pre[start]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pre[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">judge1</span>(<span class="number">1</span>, num);   <span class="comment">//先正序构造一下，试一下水</span></span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">size</span>() != num) <span class="comment">//试水失败，说明可能是镜像，再试一次水</span></span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">judge2</span>(<span class="number">1</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">size</span>() == num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">if</span> (i != num - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈BST&quot;&gt;&lt;a href=&quot;#浅谈BST&quot; class=&quot;headerlink&quot; title=&quot;浅谈BST&quot;&gt;&lt;/a&gt;浅谈BST&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉堆（没写完）</title>
    <link href="http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E5%A0%86%EF%BC%88%E6%B2%A1%E5%86%99%E5%AE%8C%EF%BC%89/"/>
    <id>http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E5%A0%86%EF%BC%88%E6%B2%A1%E5%86%99%E5%AE%8C%EF%BC%89/</id>
    <published>2022-04-15T14:00:03.391Z</published>
    <updated>2022-04-16T02:39:55.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈二叉堆"><a href="#浅谈二叉堆" class="headerlink" title="浅谈二叉堆"></a>浅谈二叉堆</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>复习基础数据结构，供日后学习参考吧<br><img src="https://img-blog.csdnimg.cn/8f5d8f0b554542ed886f25e14829095e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><del>（放一个封面）</del></p><h3 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h3><p>二叉堆分为最大堆(大顶堆)和最小堆(小顶堆)，具体区别是：</p><p><strong>大顶堆父亲节点永远大于子节点(堆顶元素是最大的)</strong></p><p><strong>小顶堆父亲节点永远小于子节点(堆顶元素是最小的)</strong></p><p>那么二叉堆如何构建？</p><h3 id="二叉堆建立"><a href="#二叉堆建立" class="headerlink" title="二叉堆建立"></a>二叉堆建立</h3><ul><li>大顶堆构建：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">big_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b_Heap[++b_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = b_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b_Heap[son] &lt;= b_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(b_Heap[son], b_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>小顶堆构建<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">small_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_Heap[++s_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = s_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s_Heap[son] &gt;= s_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s_Heap[son], s_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>汇总完整代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 大顶堆和小顶堆的建立（最小堆+最大堆）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="type">int</span> s_Size, b_Size;</span><br><span class="line"><span class="type">int</span> s_Heap[maxn];</span><br><span class="line"><span class="type">int</span> b_Heap[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">small_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_Heap[++s_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = s_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s_Heap[son] &gt;= s_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s_Heap[son], s_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">big_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b_Heap[++b_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = b_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b_Heap[son] &lt;= b_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(b_Heap[son], b_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="built_in">big_build</span>(remp);</span><br><span class="line">        <span class="built_in">small_build</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; s_Heap[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; b_Heap[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉堆的元素删除操作"><a href="#二叉堆的元素删除操作" class="headerlink" title="二叉堆的元素删除操作"></a>二叉堆的元素删除操作</h3><del>有空再写吧，肚子饿了，吃饭去了</del><br><img src="https://img-blog.csdnimg.cn/2267460cdc4741b285969ad80c8e7090.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈二叉堆&quot;&gt;&lt;a href=&quot;#浅谈二叉堆&quot; class=&quot;headerlink&quot; title=&quot;浅谈二叉堆&quot;&gt;&lt;/a&gt;浅谈二叉堆&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉树</title>
    <link href="http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2022-04-15T13:52:46.833Z</published>
    <updated>2022-04-17T08:47:09.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈二叉树"><a href="#浅谈二叉树" class="headerlink" title="浅谈二叉树"></a>浅谈二叉树</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>（初级数据结构鲨我）</del><br>之前寒假集训的时候基础数据结构就学的不太好，很多还是眼高手低，这几天正好开始准备PTA天梯赛的题，L2的题都是这种基础数据结构模拟题，欠账出来都是要还的，今天正好趁着刚学的热乎劲写一下理解，供日后参考</p><h3 id="二叉树的三种遍历"><a href="#二叉树的三种遍历" class="headerlink" title="二叉树的三种遍历"></a>二叉树的三种遍历</h3><p>四种主要的遍历思想为：</p><p>前序遍历：根结点 —&gt; 左子树 —&gt; 右子树</p><p>中序遍历：左子树—&gt; 根结点 —&gt; 右子树</p><p>后序遍历：左子树 —&gt; 右子树 —&gt; 根结点</p><p>层次遍历：只需按层次遍历即可<br><img src="https://img-blog.csdnimg.cn/455b12b832be4b52a416139db40ea978.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对于这个树来说</p><ul><li><h5 id="前序遍历："><a href="#前序遍历：" class="headerlink" title="前序遍历："></a>前序遍历：</h5><p>124753689</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="中序遍历："><a href="#中序遍历：" class="headerlink" title="中序遍历："></a>中序遍历：</h5><p>742513869</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="后序遍历："><a href="#后序遍历：" class="headerlink" title="后序遍历："></a>后序遍历：</h5><p>745289631</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;rchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h5 id="层序遍历："><a href="#层序遍历：" class="headerlink" title="层序遍历："></a>层序遍历：</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">floor_read</span><span class="params">(node *tree)</span> <span class="comment">//层序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node *&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(tree);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        node *remp;</span><br><span class="line">        remp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; remp-&gt;num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>那么这三种遍历有什么特点呢？</em>*</p><h3 id="三种遍历构建二叉树"><a href="#三种遍历构建二叉树" class="headerlink" title="三种遍历构建二叉树"></a>三种遍历构建二叉树</h3></li><li><h5 id="已知前序和中序"><a href="#已知前序和中序" class="headerlink" title="已知前序和中序"></a>已知前序和中序</h5></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> inorder[maxn];   <span class="comment">//中序</span></span><br><span class="line"><span class="type">int</span> preorder[maxn];  <span class="comment">//先序</span></span><br><span class="line"><span class="type">int</span> postorder[maxn]; <span class="comment">//后序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">build</span><span class="params">(<span class="type">int</span> pre[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != pre[<span class="number">0</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = pre[<span class="number">0</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">build</span>(pre + <span class="number">1</span>, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">build</span>(pre + rootnode + <span class="number">1</span>, in + rootnode + <span class="number">1</span>, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line">main函数：</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    node *head = <span class="keyword">new</span> node;</span><br><span class="line">    head = <span class="built_in">build</span>(preorder, inorder, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="已知后序和中序构建二叉树"><a href="#已知后序和中序构建二叉树" class="headerlink" title="已知后序和中序构建二叉树"></a>已知后序和中序构建二叉树</h5></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> inorder[maxn];   <span class="comment">//中序</span></span><br><span class="line"><span class="type">int</span> preorder[maxn];  <span class="comment">//先序</span></span><br><span class="line"><span class="type">int</span> postorder[maxn]; <span class="comment">//后序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="type">int</span> post[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != post[len - <span class="number">1</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = post[len - <span class="number">1</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">create</span>(post, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">create</span>(post + rootnode, in + <span class="number">1</span> + rootnode, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    node *head = <span class="keyword">new</span> node;</span><br><span class="line">    head = <span class="built_in">create</span>(postorder, inorder, N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h5 id="已知前序后序"><a href="#已知前序后序" class="headerlink" title="已知前序后序"></a>已知前序后序</h5></li><li><em>无解！！！<br>仅仅知道前序和后序无法构造唯一二叉树！</em>*<h3 id="三种遍历构建完全二叉树"><a href="#三种遍历构建完全二叉树" class="headerlink" title="三种遍历构建完全二叉树"></a>三种遍历构建完全二叉树</h3></li><li><strong>知后序构建完全二叉树且求其层序遍历</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="comment">// 知后序，构建完全二叉树以及层序的遍历</span></span><br><span class="line"><span class="type">int</span> post[maxn];</span><br><span class="line"><span class="type">int</span> tree[maxn];</span><br><span class="line"><span class="type">int</span> node = <span class="number">1</span>; <span class="comment">//标识后序遍历</span></span><br><span class="line"><span class="type">int</span> n;        <span class="comment">//节点数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> tree[], <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    tree[cnt] = post[node++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; post[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; tree[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; tree[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>知前序构造完全二叉树且求其层序遍历</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="comment">// 知前序，构建完全二叉树和层序遍历</span></span><br><span class="line"><span class="type">int</span> pre[maxn];</span><br><span class="line"><span class="type">int</span> tree[maxn];</span><br><span class="line"><span class="type">int</span> node = <span class="number">1</span>; <span class="comment">//标识后序遍历</span></span><br><span class="line"><span class="type">int</span> n;        <span class="comment">//节点数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> tree[], <span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    tree[cnt] = pre[node++];</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">build</span>(tree, cnt * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; pre[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; tree[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; tree[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h3><p>读前序后序中序数组一定要从下标0开始读！<del>(别问我怎么知道的)</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 二叉树知前序中序后序构造二叉树+前序后序层序遍历二叉树</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 50</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> inorder[maxn];   <span class="comment">//中序</span></span><br><span class="line"><span class="type">int</span> preorder[maxn];  <span class="comment">//先序</span></span><br><span class="line"><span class="type">int</span> postorder[maxn]; <span class="comment">//后序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    node *lchild;</span><br><span class="line">    node *rchild;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node *<span class="title">build</span><span class="params">(<span class="type">int</span> pre[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != pre[<span class="number">0</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = pre[<span class="number">0</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">build</span>(pre + <span class="number">1</span>, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">build</span>(pre + rootnode + <span class="number">1</span>, in + rootnode + <span class="number">1</span>, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">create</span><span class="params">(<span class="type">int</span> post[], <span class="type">int</span> in[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> rootnode = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (rootnode = <span class="number">0</span>; in[rootnode] != post[len - <span class="number">1</span>]; rootnode++)</span><br><span class="line">        ;</span><br><span class="line">    node *tree = <span class="keyword">new</span> node;</span><br><span class="line">    tree-&gt;num = post[len - <span class="number">1</span>];</span><br><span class="line">    tree-&gt;lchild = <span class="built_in">create</span>(post, in, rootnode);</span><br><span class="line">    tree-&gt;rchild = <span class="built_in">create</span>(post + rootnode, in + <span class="number">1</span> + rootnode, len - rootnode - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floor_read</span><span class="params">(node *tree)</span> <span class="comment">//层序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node *&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(tree);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        node *remp;</span><br><span class="line">        remp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; remp-&gt;num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;lchild);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (remp-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(remp-&gt;rchild);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;lchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">        <span class="built_in">pre_read</span>(tree-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_read</span><span class="params">(node *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;lchild);</span><br><span class="line">        <span class="built_in">post_read</span>(tree-&gt;rchild);</span><br><span class="line">        cout &lt;&lt; tree-&gt;num &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; inorder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; preorder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; postorder[i];</span><br><span class="line">    &#125;</span><br><span class="line">    node *head = <span class="keyword">new</span> node;</span><br><span class="line">    <span class="comment">// head = build(preorder, inorder, N);</span></span><br><span class="line">    head = <span class="built_in">create</span>(postorder, inorder, N);</span><br><span class="line">    <span class="built_in">floor_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pre_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">in_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">post_read</span>(head);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我自己造的输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 2 3 4 5 6 7</span><br><span class="line">4 1 3 2 6 5 7</span><br><span class="line">2  3  1  5  7  6  4  </span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 1 6 3 5 7 2        </span><br><span class="line">4  1  3  2  6  5  7  </span><br><span class="line">1  3  2  4  6  5  7  </span><br><span class="line">2  3  1  5  7  6  4  </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3c64bb1caea942ca96bc0fdf15f19f62.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="自勉"><a href="#自勉" class="headerlink" title="自勉"></a>自勉</h3><p><img src="https://img-blog.csdnimg.cn/e153fd342d884c489eceedcec31b97a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>醍醐灌顶！以此自勉！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈二叉树&quot;&gt;&lt;a href=&quot;#浅谈二叉树&quot; class=&quot;headerlink&quot; title=&quot;浅谈二叉树&quot;&gt;&lt;/a&gt;浅谈二叉树&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈背包问题</title>
    <link href="http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-15T13:49:38.904Z</published>
    <updated>2022-04-16T02:40:00.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><p><a href="https://www.dotcpp.com/oj/problem2131.html">01背包题目</a><br><img src="https://img-blog.csdnimg.cn/0e87672f33b3445095c84274a3d06404.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>采用一维优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// OJ传送门：https://www.dotcpp.com/oj/problem2131.html</span></span><br><span class="line"><span class="comment">// 01背包一维优化</span></span><br><span class="line"><span class="comment">// 特点：每个物品只有一个</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10000</span></span><br><span class="line"><span class="type">int</span> N, M; <span class="comment">// N个物品，背包容量M</span></span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> space[maxn];</span><br><span class="line"><span class="type">int</span> bag[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; space[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) <span class="comment">//枚举编号</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = M; j &gt;= space[i]; j--) <span class="comment">//枚举空间(从后往前！)</span></span><br><span class="line">        &#123;</span><br><span class="line">            bag[j] = <span class="built_in">max</span>(bag[j - space[i]] + value[i], bag[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bag[M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p><a href="https://www.dotcpp.com/oj/problem2132.html">完全背包题目</a><br><img src="https://img-blog.csdnimg.cn/ba602608026942509532ba8ea32adc91.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// OJ传送门：https://www.dotcpp.com/oj/problem2131.html</span></span><br><span class="line"><span class="comment">// 完全背包(一维优化)</span></span><br><span class="line"><span class="comment">// 特点：每个物品数量无限</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="type">int</span> N, M; <span class="comment">// N个物品,M空间</span></span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> space[maxn];</span><br><span class="line"><span class="type">int</span> bag[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; space[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = space[i]; j &lt;= M; j++) <span class="comment">//从前往后遍历！</span></span><br><span class="line">        &#123;</span><br><span class="line">            bag[j] = <span class="built_in">max</span>(bag[j], bag[j - space[i]] + value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bag[M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p><a href="https://www.dotcpp.com/oj/problem2048.html">多重背包oj传送门</a><br><img src="https://img-blog.csdnimg.cn/c681abf178414c878d9d3fbdef6c4912.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// OJ传送门：https://www.dotcpp.com/oj/problem2048.html</span></span><br><span class="line"><span class="comment">// 多重背包(一维优化)</span></span><br><span class="line"><span class="comment">// 特点：每个物品有多个，且数量有限且给出</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10000</span></span><br><span class="line"><span class="type">int</span> N, M;</span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> space[maxn];</span><br><span class="line"><span class="type">int</span> bag[maxn];</span><br><span class="line"><span class="type">int</span> cnt[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; space[i] &gt;&gt; value[i] &gt;&gt; cnt[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = M; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= cnt[i]; k++) <span class="comment">//多一个次数循环</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - k * space[i] &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">//写break也行</span></span><br><span class="line">                bag[j] = <span class="built_in">max</span>(bag[j], bag[j - k * space[i]] + k * value[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bag[M];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ul><li>三种背包问题我用的都是一维优化</li><li>大家有没有发现，01背包和完全背包的唯一区别就是j(空间)一个是从头开始循环，而另外一个则是恰恰相反，其实道理很简单：<strong>01背包考虑每个物品只用一次，它实际上转移方程是和i未选上之前的此时j进行比较，所以我们从后往前循环，（因为j-space[i]的值肯定比我们的j小，所以保证i只用一次），而完全背包相反，我们从头开始循环，因为i物品可以反复使用，所以j-space[i]在j的循环范围内，如果满足条件还可以继续使用</strong></li><li>多重背包可以转化为01背包问题（将第i个物品作为n个相同物品计入物品总数中）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;01背包&quot;&gt;&lt;a href=&quot;#01背包&quot; class=&quot;headerlink&quot; title=&quot;01背包&quot;&gt;&lt;/a&gt;01背包&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.dotcpp.com/oj/problem2131.html&quot;&gt;01背包题目&lt;/a</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>二分查找模板</title>
    <link href="http://example.com/2022/04/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%9D%BF%E5%AD%90(check()%E5%87%BD%E6%95%B0)/"/>
    <id>http://example.com/2022/04/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%9D%BF%E5%AD%90(check()%E5%87%BD%E6%95%B0)/</id>
    <published>2022-04-15T13:47:35.873Z</published>
    <updated>2022-04-16T02:40:04.997Z</updated>
    
    <content type="html"><![CDATA[<p>之前找了很多博客，想找一个万能的二分板子，始终没有找到合适的，后来找同学大佬要了一个（鸣谢大佬！QAQ），现在将其上传，供日后自己学习使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">erfen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>, r = n, ans;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>check()函数是当满足查找条件以及向最佳答案压缩的方向返回true，不满足条件返回false</li><li>l = mid + 1;和r = mid - 1;这两个表达式要根据查找目标在数组的左右情况要调换位置</li><li>二分实现查找lower_bound的原理：<strong>一定要理解这一段！！！比如我们要查找两个数之和等于目标值，返回一个第一个值最小的组合，当我们找到一个满足和等于目标值的时候，我们不仅要记录这个答案(将ans更新)，然后将二分区间向左压缩(前提是数列先按照和大小从小到大排，如果和相同的话按前面的数从小到大排)，看看能不能把区间往压一点！这才是lower_bound的核心！即：找到符合大条件的时候。先将该答案存储作为权宜之计，然后将区间向最优答案压缩，这是靠check函数的诱导来实现的！</strong></li></ol><ul><li><strong>总而言之：check函数保证是满足查找条件！当满足查找条件后，我们先将ans及时更新，然后根据需要，想我们想让他压缩的方向进行压缩，即l=mid+1，r=mid+1这两个式子根据需要的压缩方向决定！</strong><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a href="https://www.luogu.com.cn/problem/P1083">一道二分+差分模板题</a><br><img src="https://img-blog.csdnimg.cn/3f907bc0c78444b3b376d66fb8bdb9ae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>二分+差分的一道题<br>洛谷P1083<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//二分+差分数组(+前缀和)</span></span><br><span class="line"><span class="comment">//传送门：https://www.luogu.com.cn/problem/P1083</span></span><br><span class="line"><span class="comment">//题解传送门：https://www.luogu.com.cn/blog/1557114139--com/solution-p1083</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">1000000</span>]; <span class="comment">//每天教室的最大使用量</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line">node ask[<span class="number">1000000</span>];    <span class="comment">//记录申请数量</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c[<span class="number">1000000</span>]; <span class="comment">//差分数组</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> num)</span>   <span class="comment">//通过二分来查找到底第哪一次出现无法访问</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[ask[i].start] += ask[i].cost;</span><br><span class="line">        c[ask[i].end + <span class="number">1</span>] -= ask[i].cost;</span><br><span class="line">    &#125; <span class="comment">//差分构造</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now += c[i]; <span class="comment">// now即代表当日的申请数</span></span><br><span class="line">        <span class="keyword">if</span> (now &gt; a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//因为要查找不满足的第一个值，所以不满足条件的时候返回true（符合条件返回true）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;ask[i].cost, &amp;ask[i].start, &amp;ask[i].end); <span class="comment">//读入申请</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">judge</span>(m) == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = m, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>; <span class="comment">//满足条件时，要向左压缩</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>; <span class="comment">//反之向右压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>贪心+队列模拟+二分的题<br><img src="https://img-blog.csdnimg.cn/f312d68a6ef44bae9db370bcc1dd30d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://pintia.cn/problem-sets/1506479836133273600/problems/1506481091208822788</span></span><br><span class="line"><span class="comment">// 队列模拟+贪心+二分</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> trail[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cin.tie(0), cout.tie(0);</span></span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span> || trail[cnt] &lt; remp)</span><br><span class="line">        &#123;</span><br><span class="line">            trail[++cnt] = remp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">1</span>, r = cnt;</span><br><span class="line">            <span class="type">int</span> ans;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (remp &lt; trail [mid])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = mid;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            trail[ans] = remp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前找了很多博客，想找一个万能的二分板子，始终没有找到合适的，后来找同学大佬要了一个（鸣谢大佬！QAQ），现在将其上传，供日后自己学习使用。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>算法模板(不定期更新)</title>
    <link href="http://example.com/2022/04/15/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF(%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0)/"/>
    <id>http://example.com/2022/04/15/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF(%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0)/</id>
    <published>2022-04-15T13:45:36.931Z</published>
    <updated>2022-04-23T23:36:22.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bfs最短路模板"><a href="#bfs最短路模板" class="headerlink" title="bfs最短路模板"></a>bfs最短路模板</h3><p>最短路+打印路径+记录方向</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// bfs路径打印</span></span><br><span class="line"><span class="comment">// https://blog.csdn.net/ryo_218/article/details/88830082?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1</span></span><br><span class="line"><span class="type">int</span> m, n; <span class="comment">//长，高</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    string path;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> maze[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;; <span class="comment">// D&lt;L&lt;R&lt;U</span></span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> dir[<span class="number">4</span>] = &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> startx, <span class="type">int</span> starty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n &amp;&amp; y == m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> startx, <span class="type">int</span> starty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    visit[startx][starty] = <span class="number">1</span>;</span><br><span class="line">    node p;</span><br><span class="line">    p.x = startx, p.y = starty;</span><br><span class="line">    q.<span class="built_in">push</span>(p);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>().x;</span><br><span class="line">        <span class="type">int</span> y = q.<span class="built_in">front</span>().y;</span><br><span class="line">        string way = q.<span class="built_in">front</span>().path;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(x, y, startx, starty))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; way;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> rempx = x + dirx[i];</span><br><span class="line">            <span class="type">int</span> rempy = y + diry[i];</span><br><span class="line">            string rempway = way + dir[i];</span><br><span class="line">            <span class="keyword">if</span> (maze[rempx][rempy] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; visit[rempx][rempy] == <span class="number">0</span> &amp;&amp; rempx &lt;= n &amp;&amp; rempx &gt; <span class="number">0</span> &amp;&amp; rempy &lt;= m &amp;&amp; rempy &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;&quot;1 &quot;;</span></span><br><span class="line">                <span class="comment">//  cout&lt;&lt;rempway&lt;&lt;endl;</span></span><br><span class="line">                visit[rempx][rempy] = <span class="number">1</span>;</span><br><span class="line">                node remp;</span><br><span class="line">                remp.x = rempx, remp.y = rempy, remp.path = rempway;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; rempway &lt;&lt; endl;</span></span><br><span class="line">                q.<span class="built_in">push</span>(remp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            maze[i][j] = remp[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 样例</span></span><br><span class="line"><span class="comment">50 30</span></span><br><span class="line"><span class="comment">01010101001011001001010110010110100100001000101010</span></span><br><span class="line"><span class="comment">00001000100000101010010000100000001001100110100101</span></span><br><span class="line"><span class="comment">01111011010010001000001101001011100011000000010000</span></span><br><span class="line"><span class="comment">01000000001010100011010000101000001010101011001011</span></span><br><span class="line"><span class="comment">00011111000000101000010010100010100000101100000000</span></span><br><span class="line"><span class="comment">11001000110101000010101100011010011010101011110111</span></span><br><span class="line"><span class="comment">00011011010101001001001010000001000101001110000000</span></span><br><span class="line"><span class="comment">10100000101000100110101010111110011000010000111010</span></span><br><span class="line"><span class="comment">00111000001010100001100010000001000101001100001001</span></span><br><span class="line"><span class="comment">11000110100001110010001001010101010101010001101000</span></span><br><span class="line"><span class="comment">00010000100100000101001010101110100010101010000101</span></span><br><span class="line"><span class="comment">11100100101001001000010000010101010100100100010100</span></span><br><span class="line"><span class="comment">00000010000000101011001111010001100000101010100011</span></span><br><span class="line"><span class="comment">10101010011100001000011000010110011110110100001000</span></span><br><span class="line"><span class="comment">10101010100001101010100101000010100000111011101001</span></span><br><span class="line"><span class="comment">10000000101100010000101100101101001011100000000100</span></span><br><span class="line"><span class="comment">10101001000000010100100001000100000100011110101001</span></span><br><span class="line"><span class="comment">00101001010101101001010100011010101101110000110101</span></span><br><span class="line"><span class="comment">11001010000100001100000010100101000001000111000010</span></span><br><span class="line"><span class="comment">00001000110000110101101000000100101001001000011101</span></span><br><span class="line"><span class="comment">10100101000101000000001110110010110101101010100001</span></span><br><span class="line"><span class="comment">00101000010000110101010000100010001001000100010101</span></span><br><span class="line"><span class="comment">10100001000110010001000010101001010101011111010010</span></span><br><span class="line"><span class="comment">00000100101000000110010100101001000001000000000010</span></span><br><span class="line"><span class="comment">11010000001001110111001001000011101001011011101000</span></span><br><span class="line"><span class="comment">00000110100010001000100000001000011101000000110011</span></span><br><span class="line"><span class="comment">10101000101000100010001111100010101001010000001000</span></span><br><span class="line"><span class="comment">10000010100101001010110000000100101010001011101000</span></span><br><span class="line"><span class="comment">00111100001000010000000110111000000001000000001011</span></span><br><span class="line"><span class="comment">10000001100111010111010001000110111010101101111000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="迪杰斯特拉（最短路）"><a href="#迪杰斯特拉（最短路）" class="headerlink" title="迪杰斯特拉（最短路）"></a>迪杰斯特拉（最短路）</h3><p>一道模板题：<br><img src="https://img-blog.csdnimg.cn/261a01af1cb541c9a7e08b216a9d3391.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>大循环是n-1次循环<br>标号从0开始到n-1<br>题目没说清楚</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 10000</span></span><br><span class="line"><span class="type">int</span> edge[maxn][maxn];</span><br><span class="line"><span class="type">int</span> path[maxn];</span><br><span class="line"><span class="type">bool</span> visit[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, s;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">path[i] = INF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; edge[i][j];</span><br><span class="line"><span class="keyword">if</span> (edge[i][j] == <span class="number">0</span>)</span><br><span class="line">edge[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">edge[i][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">path[s] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> min1 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((min1 == <span class="number">-1</span> || path[j] &lt; path[min1]) &amp;&amp; visit[j] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">min1 = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">visit[min1] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line">path[j] = <span class="built_in">min</span>(path[min1] + edge[min1][j], path[j]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;path[j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == s)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (path[i] == INF)</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; path[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另附有最大公因数，最小公倍数求法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 迪杰斯特拉算法(首次使用紫书模板)</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">2030</span>][<span class="number">2030</span>];</span><br><span class="line"><span class="type">int</span> path[<span class="number">2030</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">2030</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">gcd</span>(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, INF, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt; <span class="number">21</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> cost = <span class="built_in">lcm</span>(i, j);</span><br><span class="line">            edge[i][j] = cost;</span><br><span class="line">            edge[j][i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 算法开始</span></span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">    <span class="built_in">memset</span>(path, INF, <span class="built_in">sizeof</span>(path));</span><br><span class="line">    path[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> start, min1 = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[j] &amp;&amp; path[j] &lt;= min1)</span><br><span class="line">            &#123;</span><br><span class="line">                min1 = path[j];</span><br><span class="line">                start = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[start] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            path[j] = <span class="built_in">min</span>(path[j], path[start] + edge[start][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; path[<span class="number">2021</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记录并打印路径版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> maze[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> dis[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> path[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> visit[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> tar)</span> <span class="comment">// 打印路径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; tar;</span><br><span class="line">    <span class="type">int</span> remp = tar;</span><br><span class="line">    <span class="keyword">while</span> (path[remp])</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; path[remp];</span><br><span class="line">        remp = path[remp];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, s = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; maze[i][j];</span><br><span class="line">            <span class="keyword">if</span> (maze[i][j] == <span class="number">0</span>)</span><br><span class="line">                maze[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        maze[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="built_in">sizeof</span>(dis));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min1 = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visit[j] == <span class="literal">false</span> &amp;&amp; (min1 == <span class="number">-1</span> || dis[min1] &gt; dis[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                min1 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[min1] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[j] &gt; dis[min1] + maze[min1][j])</span><br><span class="line">            &#123;</span><br><span class="line">                path[j] = min1; <span class="comment">//记录前驱节点</span></span><br><span class="line">                dis[j] = dis[min1] + maze[min1][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dis[n] &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">print</span>(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外附上打印路径方式(加变式)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://pintia.cn/problem-sets/994805046380707840/problems/994805073643683840</span></span><br><span class="line"><span class="comment">// 迪杰斯特拉最短路(加变式)+打印路径</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 600</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> city[maxn];       <span class="comment">//每一个城市的救援队</span></span><br><span class="line"><span class="type">int</span> cost[maxn][maxn]; <span class="comment">//维护图</span></span><br><span class="line"><span class="type">int</span> path[maxn];       <span class="comment">//代表从起点到i城市的权值</span></span><br><span class="line"><span class="type">int</span> pre[maxn];        <span class="comment">//记录i城市前驱节点</span></span><br><span class="line"><span class="type">int</span> num[maxn];        <span class="comment">//记录从起点到i城市有最短路有多少种走法</span></span><br><span class="line"><span class="type">int</span> sum[maxn];        <span class="comment">// i城市到起点最短路上能积极的最多救援队</span></span><br><span class="line"><span class="type">int</span> visit[maxn];      <span class="comment">//标记蓝点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n, m, s, d;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; d;</span><br><span class="line">    <span class="built_in">memset</span>(cost, INF, <span class="built_in">sizeof</span>(cost));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; city[i];</span><br><span class="line">        sum[i] = city[i]; <span class="comment">//初始化sum数组</span></span><br><span class="line">        num[i] = <span class="number">1</span>;       <span class="comment">//初始化num数组</span></span><br><span class="line">        pre[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c1, c2, cos;</span><br><span class="line">        cin &gt;&gt; c1 &gt;&gt; c2 &gt;&gt; cos;</span><br><span class="line">        cost[c1][c2] = cost[c2][c1] = cos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(path, INF, <span class="built_in">sizeof</span>(path));</span><br><span class="line">    path[s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min1 = INF, start = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visit[j] == <span class="literal">false</span> &amp;&amp; path[j] &lt;= min1)</span><br><span class="line">            &#123;</span><br><span class="line">                start = j;</span><br><span class="line">                min1 = path[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[start] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (path[j] &gt; path[start] + cost[start][j])</span><br><span class="line">            &#123;</span><br><span class="line">                path[j] = path[start] + cost[start][j];</span><br><span class="line">                pre[j] = start; <span class="comment">//更新pre前驱</span></span><br><span class="line">                sum[j] = city[j] + sum[start];</span><br><span class="line">                num[j] = num[start];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (path[j] == path[start] + cost[start][j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (sum[j] &lt; city[j] + sum[start])</span><br><span class="line">                &#123;</span><br><span class="line">                    pre[j] = start;</span><br><span class="line">                    sum[j] = city[j] + sum[start];</span><br><span class="line">                &#125;</span><br><span class="line">                num[j] = num[j] + num[start];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// path[j] = min(path[start] + cost[start][j], path[j]);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;path &quot;;</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; n; i++)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; path[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;pre &quot;;</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; n; i++)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; pre[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;sum &quot;;</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; n; i++)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; sum[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;num &quot;;</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; n; i++)</span></span><br><span class="line">    <span class="comment">//     cout &lt;&lt; num[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; num[d] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; sum[d] &lt;&lt; endl;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    <span class="type">int</span> end = d;</span><br><span class="line">    <span class="keyword">while</span> (d != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a.<span class="built_in">push_back</span>(d);</span><br><span class="line">        d = pre[d];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i)</span><br><span class="line">            cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弗洛伊德算法"><a href="#弗洛伊德算法" class="headerlink" title="弗洛伊德算法"></a>弗洛伊德算法</h3><p>注：假如是普通的最短路寻找，数组的初始化有所不同，要把所有的自回路赋值为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">edge[i][i]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// floyed算法(会超时大概一分钟之后得到答案/捂脸）)</span></span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 答案：10266837</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">2030</span>][<span class="number">2030</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">gcd</span>(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt; <span class="number">21</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> cost = <span class="built_in">lcm</span>(i, j);</span><br><span class="line">            edge[i][j] = cost;</span><br><span class="line">            edge[j][i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2021</span>; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[i][j] = <span class="built_in">min</span>(edge[i][k] + edge[k][j], edge[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">    cout&lt;&lt;edge[<span class="number">1</span>][<span class="number">2021</span>];</span><br><span class="line">    <span class="comment">// cout&lt;&lt;lcm(3,5);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="克鲁斯卡尔算法"><a href="#克鲁斯卡尔算法" class="headerlink" title="克鲁斯卡尔算法"></a>克鲁斯卡尔算法</h3><p>原题：<a href="https://www.luogu.com.cn/problem/P2330">繁忙的都市</a><br>克鲁斯卡尔+并查集模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.luogu.com.cn/problem/P2330</span></span><br><span class="line"><span class="comment">// 最小生成树+克鲁斯卡尔算法</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> con 100000</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> start;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125; edge[con];</span><br><span class="line"><span class="type">int</span> father[maxn];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int link[maxn];</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[a] == a)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> father[a] = <span class="built_in">find</span>(father[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num_ans, cost_ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2, remp3;</span><br><span class="line">        cin &gt;&gt; remp1 &gt;&gt; remp2 &gt;&gt; remp3;</span><br><span class="line">        edge[i].start = remp1,</span><br><span class="line">        edge[i].end = remp2;</span><br><span class="line">        edge[i].cost = remp3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 好戏登场</span></span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">        <span class="comment">// link[i] = 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> link = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s = edge[i].start;</span><br><span class="line">        <span class="type">int</span> e = edge[i].end;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(s) != <span class="built_in">find</span>(e))</span><br><span class="line">        &#123;</span><br><span class="line">            link++;</span><br><span class="line">            num_ans++;</span><br><span class="line">            cost_ans = edge[i].cost; <span class="comment">//因为数组按照cost值升序，所以最大值一定是最后一个进入mst的路的权值</span></span><br><span class="line">            <span class="type">int</span> fa1 = <span class="built_in">find</span>(s);</span><br><span class="line">            <span class="type">int</span> fa2 = <span class="built_in">find</span>(e);</span><br><span class="line">            father[fa1] = father[fa2];</span><br><span class="line">            <span class="comment">// int sum = link[fa1] + link[fa2];</span></span><br><span class="line">            <span class="comment">// link[fa1] = link[fa2] = sum;</span></span><br><span class="line">            <span class="comment">// if (sum == n)</span></span><br><span class="line">            <span class="comment">//     break;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (link == n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cost_ans;<span class="comment">//每个边一次连两个点，所以个数一定是n-1个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>原题：    <a href="https://www.luogu.com.cn/problem/P4017">最长食物链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.luogu.com.cn/problem/P4017</span></span><br><span class="line"><span class="comment">// 题解：https://www.luogu.com.cn/problem/solution/P4017</span></span><br><span class="line"><span class="comment">// 拓扑排序</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 5000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 80112002</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="type">int</span> in[maxn], out[maxn]; <span class="comment">//一个是入度，一个是出度</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans[maxn];     <span class="comment">// ans[i]表示到达第i个结点时，此时拥有的路径总数</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2;</span><br><span class="line">        cin &gt;&gt; remp1 &gt;&gt; remp2;        <span class="comment">// remp2吃remp1</span></span><br><span class="line">        edge[remp1].<span class="built_in">push_back</span>(remp2); <span class="comment">//被吃掉的后面接捕食者</span></span><br><span class="line">        in[remp2]++;</span><br><span class="line">        out[remp1]++; <span class="comment">//右节点入度+1,左节点出度+1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (in[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            ans[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> front = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge[front].<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            in[edge[front][i]]--;</span><br><span class="line">            ans[edge[front][i]] = (ans[edge[front][i]] + ans[front]) % mod;</span><br><span class="line">            <span class="keyword">if</span> (in[edge[front][i]] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(edge[front][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (out[i] == <span class="number">0</span>) <span class="comment">//只要出度为0，说明是食物链终点（切不可用sort快排取最大！因为出度为0的点不止一个！）</span></span><br><span class="line">            ans1 += ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans1 % mod;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="素数筛"><a href="#素数筛" class="headerlink" title="素数筛"></a>素数筛</h3><p>埃式筛：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> prime[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i*i;j&lt;=num;j+=i)<span class="comment">//这里有一个小优化，j 从 i * i 而不是从 i + i开始，因为 i*(2~ i-1)在 2~i-1时都已经被筛去，所以从i * i开始。</span></span><br><span class="line">        prime[j]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!prime[i])</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欧拉筛</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//欧拉筛 时间复杂度O(n)</span></span><br><span class="line"><span class="type">bool</span> judge[<span class="number">1000000</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;; <span class="comment">// 0，1先筛去</span></span><br><span class="line"><span class="type">int</span> prime[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!judge[i])</span><br><span class="line">            prime[count++] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (prime[j] * i &gt; num)</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//如果此时已经大于边界，后面的素数肯定也大于边界，所以直接break</span></span><br><span class="line">            judge[prime[j] * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 对于 i%prime[j] == 0 就break的解释 ：当 i是prime[j]的倍数时，i = kprime[j]，如果继续运算 j+1，i * prime[j+1] = prime[j] * k prime[j+1]，这里prime[j]是最小的素因子，当i = k * prime[j+1]时会重复，所以才跳出循环。</span></span><br><span class="line"><span class="comment">// 举个例子 ：i = 8 ，j = 1，prime[j] = 2，如果不跳出循环，prime[j+1] = 3，8 * 3 = 2 * 4 * 3 = 2 * 12，在i = 12时会计算。因为欧拉筛法的原理便是通过最小素因子来消除。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)</span><br><span class="line">    cout&lt;&lt;prime[i]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 给定三个正整数A，B和C，求A ^B  mod C的结果</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fastpower</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a %= c;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b)</span><br><span class="line">&#123;</span><br><span class="line">a %= c;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">ans = (ans*a) % c;</span><br><span class="line">b = b / <span class="number">2</span>;</span><br><span class="line">a = (a*a)%c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">cout &lt;&lt; <span class="built_in">fastpower</span>(a, b, c) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="string查找子串"><a href="#string查找子串" class="headerlink" title="string查找子串"></a>string查找子串</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string tar;</span><br><span class="line">cin&gt;&gt;tar;</span><br><span class="line">string remp;</span><br><span class="line">cin&gt;&gt;remp;</span><br><span class="line"><span class="keyword">if</span>(tar.<span class="built_in">find</span>(remp)!=string::npos)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;YES&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="STL迭代器"><a href="#STL迭代器" class="headerlink" title="STL迭代器"></a>STL迭代器</h3><p>这里以vector为例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = a.<span class="built_in">begin</span>(); it != a.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="priority-queue使用和自定义排序"><a href="#priority-queue使用和自定义排序" class="headerlink" title="priority_queue使用和自定义排序"></a>priority_queue使用和自定义排序</h3><p>因为自定义排序是重载 &lt; 运算符来实现的，而且优先队列默认是大顶堆，所以定义时<br>return xxx &lt; xxx 是从大到小排<br>return xxx &gt; xxx 是从小到大排<br>是恰好相反的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例：</span><br><span class="line">1 324 23  21 794 9 90 92 12 29 </span><br><span class="line">输出:</span><br><span class="line">1 9 12 21 23 29 90 92 324 794 </span><br><span class="line">1 9 12 21 23 29 90 92 324 794 </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.cost &gt; b.cost; <span class="comment">//从小到大</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b; <span class="comment">//从小到大</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;node, vector&lt;node&gt;, cmp1&gt; a;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, cmp2&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        node t;</span><br><span class="line">        t.cost = remp;</span><br><span class="line">        a.<span class="built_in">push</span>(t);</span><br><span class="line">        b.<span class="built_in">push</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a.<span class="built_in">top</span>().cost &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; b.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        b.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">区间dp模板</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//初始dp数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt; n; ++i)</span><br><span class="line">        &#123;                                <span class="comment">//枚举区间的起点</span></span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>;         <span class="comment">//根据起点和长度得出终点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j; ++k) <span class="comment">//枚举最优分割点</span></span><br><span class="line">                                         <span class="comment">//状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/24/arFHZngxQK3JzGk.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">// 传送门：https://pintia.cn/problem-sets/1506479836133273600/problems/1506481091213017090</span><br><span class="line">// 区间dp</span><br><span class="line">#define maxn 1010</span><br><span class="line">int dp[maxn][maxn];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string str;</span><br><span class="line">    getline(cin, str);</span><br><span class="line">    int len = str.length();</span><br><span class="line">    for (int i = 0; i &lt; len; i++)</span><br><span class="line">        dp[i][i] = 1;</span><br><span class="line">    // 注意！一定要先枚举区间长度，再去枚举起点！</span><br><span class="line">    for (int l = 1; l &lt;= len; l++) //枚举长度</span><br><span class="line">    &#123;</span><br><span class="line">        for (int i = 0; i &lt; len; i++) //枚举起点</span><br><span class="line">        &#123;</span><br><span class="line">            int j = l + i;</span><br><span class="line">            if (j &gt;= len)</span><br><span class="line">                continue;</span><br><span class="line">            if (str[i] == str[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);</span><br><span class="line">                bool judge = true; //下面判断这一段区间是不是回文的</span><br><span class="line">                for (int node1 = i, node2 = j; node1 &lt;= node2; node1++, node2--)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (str[node1] != str[node2])</span><br><span class="line">                    &#123;</span><br><span class="line">                        judge = false;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (judge)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[i + 1][j - 1] + 2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[0][len - 1];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4966fccdd70946a58255e93fe20b545a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 区间dp</span></span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2767</span></span><br><span class="line"><span class="comment">// 其实就是求最长回文区间长度，最终结果就是总长减去最长回文区间</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  string str;</span><br><span class="line">  cin &gt;&gt; str;</span><br><span class="line">  <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= len; l++) <span class="comment">//枚举区间长度</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + l - <span class="number">1</span> &lt; len; i++) <span class="comment">//枚举区间起点</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">int</span> j = i + l - <span class="number">1</span>; <span class="comment">//区间终点</span></span><br><span class="line">          <span class="keyword">if</span> (l == <span class="number">1</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              dp[i][j] = <span class="number">1</span>; <span class="comment">//长度为一的区间回文长度为1</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">              dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]); <span class="comment">//一种是选右不选左，另一种是选左不选右</span></span><br><span class="line">              <span class="keyword">if</span> (str[i] == str[j])</span><br><span class="line">              &#123;</span><br><span class="line">                  dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; len - dp[<span class="number">0</span>][len - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">区间dp模板</span></span><br><span class="line"><span class="comment">  memset(dp, 0, sizeof(dp));</span></span><br><span class="line"><span class="comment">  //初始dp数组</span></span><br><span class="line"><span class="comment">  for (int len = 2; len &lt;= n; len++)</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">      //枚举区间长度</span></span><br><span class="line"><span class="comment">      for (int i = 1; i + len - 1 &lt; n; ++i)</span></span><br><span class="line"><span class="comment">      &#123;                                //枚举区间的起点</span></span><br><span class="line"><span class="comment">          int j = i + len - 1;         //根据起点和长度得出终点</span></span><br><span class="line"><span class="comment">          for (int k = i; k &lt;= j; ++k) //枚举最优分割点</span></span><br><span class="line"><span class="comment">                                       //状态转移方程</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bfs最短路模板&quot;&gt;&lt;a href=&quot;#bfs最短路模板&quot; class=&quot;headerlink&quot; title=&quot;bfs最短路模板&quot;&gt;&lt;/a&gt;bfs最短路模板&lt;/h3&gt;&lt;p&gt;最短路+打印路径+记录方向&lt;/p&gt;
&lt;figure class=&quot;highlight cpp</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>线段树模板(对应洛谷一道线段树模板题)</title>
    <link href="http://example.com/2022/04/15/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF(%E5%AF%B9%E5%BA%94%E6%B4%9B%E8%B0%B7%E4%B8%80%E9%81%93%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98)/"/>
    <id>http://example.com/2022/04/15/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF(%E5%AF%B9%E5%BA%94%E6%B4%9B%E8%B0%B7%E4%B8%80%E9%81%93%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E9%A2%98)/</id>
    <published>2022-04-15T13:38:14.322Z</published>
    <updated>2022-04-16T02:40:01.841Z</updated>
    
    <content type="html"><![CDATA[<p><em>最近正好在学线段树，搞懂后写一篇博客记录一下模板，供日后自己学习参考</em><br>原题传送门：<a href="https://www.luogu.com.cn/problem/P3372">洛谷线段树模板题</a><br><img src="https://img-blog.csdnimg.cn/914fa7ae530a4430a6c395e3e7950754.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>经典的RMQ问题，我们用线段树来解决<br>线段树有一般两种写法，一种是结构体写法，还有一种是用堆结构来写<br>本蒟蒻采用堆结构来写<br>实现的操作：<br>区间修改，区间询问。<br>注意，堆写法数组要开原数组的四倍！！！(谨记！<br>此代码已在洛谷AC，可以放心食用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 洛谷传送门：https://www.luogu.com.cn/problem/P3372</span></span><br><span class="line"><span class="comment">// 线段树模板</span></span><br><span class="line"><span class="comment">// 区间修改+区间询问</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[maxn];        <span class="comment">//原数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tree[maxn * <span class="number">4</span>]; <span class="comment">//线段树</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lazy[maxn * <span class="number">4</span>]; <span class="comment">//懒数组</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right)</span> <span class="comment">// pushdouw的作用是将x节点的lazy数组下传到左右儿子</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lazy[x] == <span class="number">0</span>) <span class="comment">//如果为0，则该区间没有被修改，不需要下传</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    lazy[x &lt;&lt; <span class="number">1</span>] += lazy[x];</span><br><span class="line">    tree[x &lt;&lt; <span class="number">1</span>] += lazy[x] * (mid - left + <span class="number">1</span>);</span><br><span class="line">    lazy[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[x];</span><br><span class="line">    tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[x] * (right - mid);</span><br><span class="line">    lazy[x] = <span class="number">0</span>; <span class="comment">//记得清零！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// x代表线段树的节点号,left代表原数组的区间左端点，right代表原数组的区间右端点</span></span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] = a[left];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, left, mid);</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">    tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> tar_left, <span class="type">int</span> tar_right)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="comment">// left和right代表目前访问的节点的区间左右，tar_left和tar_right代表目标区间</span></span><br><span class="line">    <span class="keyword">if</span> (left == tar_left &amp;&amp; right == tar_right)</span><br><span class="line">        <span class="keyword">return</span> tree[x];</span><br><span class="line">    <span class="comment">// 要用到下一层</span></span><br><span class="line">    <span class="built_in">pushdown</span>(x, left, right);               <span class="comment">//将上一层对这一层的影响清算完毕</span></span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;          <span class="comment">//将影响延续，继续寻找</span></span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &gt; mid) <span class="comment">//右边是大于号才算横跨两个区间！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> left_ans = <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, mid);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> right_ans = <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, mid + <span class="number">1</span>, tar_right);</span><br><span class="line">        <span class="keyword">return</span> left_ans + right_ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &gt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> tar_left, <span class="type">int</span> tar_right, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//y代表修改值</span></span><br><span class="line">    <span class="keyword">if</span> (left == tar_left &amp;&amp; right == tar_right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] += (right - left + <span class="number">1</span>) * y;</span><br><span class="line">        lazy[x] += y; <span class="comment">//懒数组要标记！</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 到达这里，说明要继续向下访问，要将tree继续修改</span></span><br><span class="line">    <span class="built_in">pushdown</span>(x, left, right);</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &gt; mid) <span class="comment">// tar_right&gt;mid才是跨两个区间！</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, mid, y);</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, mid + <span class="number">1</span>, tar_right, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tar_right &lt;= mid)</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, tar_right, y);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, tar_left, tar_right, y);</span><br><span class="line">    tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">if</span> (remp == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> remp1, remp2, remp3;</span><br><span class="line">            cin &gt;&gt; remp1 &gt;&gt; remp2 &gt;&gt; remp3;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, remp1, remp2, remp3);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (remp == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> remp1, remp2;</span><br><span class="line">            cin &gt;&gt; remp1 &gt;&gt; remp2;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, remp1, remp2) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;最近正好在学线段树，搞懂后写一篇博客记录一下模板，供日后自己学习参考&lt;/em&gt;&lt;br&gt;原题传送门：&lt;a href=&quot;https://www.luogu.com.cn/problem/P3372&quot;&gt;洛谷线段树模板题&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://i</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于const和#define定义常量的一点区别(坑)</title>
    <link href="http://example.com/2022/04/15/%E5%85%B3%E4%BA%8Econst%E5%92%8Cdefine%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E4%B8%80%E7%82%B9%E5%8C%BA%E5%88%AB(%E5%9D%91)/"/>
    <id>http://example.com/2022/04/15/%E5%85%B3%E4%BA%8Econst%E5%92%8Cdefine%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F%E7%9A%84%E4%B8%80%E7%82%B9%E5%8C%BA%E5%88%AB(%E5%9D%91)/</id>
    <published>2022-04-15T13:36:51.204Z</published>
    <updated>2022-04-16T02:39:53.393Z</updated>
    
    <content type="html"><![CDATA[<p>一般大部分人都喜欢用#define来定义代码中的常量，可以让代码更简洁，我原先认为const 和#define定义常量的效果相同，但事实上并非如此</p><p>这几天在写一道状压dp的题，无意间发现了关于const和#define定义常量的一些区别：<br>看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> test1 1 &lt;&lt; 21</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> test2 = <span class="number">1</span> &lt;&lt; <span class="number">21</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test1: &quot;</span> &lt;&lt; test1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test2: &quot;</span> &lt;&lt; test2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面的代码，乍一看应该结果是相同的，但是请看运行结果：<br><img src="https://img-blog.csdnimg.cn/63caed0235f747ffbffa8476272c84dc.png" alt="在这里插入图片描述"><br>如此看来，如果用#define来定义位运算得出的常量，得出的答案是错误的 (似乎直接忽略位运算符直接拼接？）<br>但是const int 定义得出了正确的结果。</p><p>姑且记住是一个坑点吧、、、debug一下午才发现是常量值错了。而且这种错误有隐蔽性，很难发现</p><p>如果有大佬知道二者还有其他区别或者知道这种区别的原因，本蒟蒻愿闻其详（期待）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般大部分人都喜欢用#define来定义代码中的常量，可以让代码更简洁，我原先认为const 和#define定义常量的效果相同，但事实上并非如此&lt;/p&gt;
&lt;p&gt;这几天在写一道状压dp的题，无意间发现了关于const和#define定义常量的一些区别：&lt;br&gt;看代码：&lt;/p</summary>
      
    
    
    
    <category term="探讨" scheme="http://example.com/categories/%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第六届蓝桥杯题解  2022/3/22</title>
    <link href="http://example.com/2022/04/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/04/15/%E7%AC%AC%E5%85%AD%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2022-04-15T13:26:04.290Z</published>
    <updated>2022-04-16T02:39:25.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六届蓝桥杯题解"><a href="#第六届蓝桥杯题解" class="headerlink" title="第六届蓝桥杯题解"></a>第六届蓝桥杯题解</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>新蝙蝠侠太好看了！！！姥爷牛逼！！！<br><img src="https://img-blog.csdnimg.cn/f83f829feff64591897de0e79423debb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>强推去看！！！！！</p><h3 id="方程整数解"><a href="#方程整数解" class="headerlink" title="方程整数解"></a>方程整数解</h3><p><img src="https://img-blog.csdnimg.cn/d754088bc2314575b5e732d27bd89c41.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题可以直接暴力来写，答案有点坑，题目没有说不是负数！答案是 -30</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67081</span></span><br><span class="line"><span class="comment">// 答案：-30</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">40</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">40</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt;= <span class="number">40</span>; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * i + j * j + z * z == <span class="number">1000</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, j);</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, z);</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="星系炸弹"><a href="#星系炸弹" class="headerlink" title="星系炸弹"></a>星系炸弹</h3><p><img src="https://img-blog.csdnimg.cn/354d4b5219ca46b8ad426d27fce9e96c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接嗯模拟即可，其实也可以直接用excel来算 <del>（太犯规了）</del>，代码解法贴在下面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67081</span></span><br><span class="line"><span class="comment">// 模拟</span></span><br><span class="line"><span class="comment">// 答案：2017-8-05</span></span><br><span class="line"><span class="type">int</span> month[<span class="number">2</span>][<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>,</span><br><span class="line">                    <span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> y, m, d;</span><br><span class="line">    y = <span class="number">2014</span>;</span><br><span class="line">    m = <span class="number">11</span>;</span><br><span class="line">    d = <span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">while</span> (sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum - (month[<span class="number">1</span>][m] - d) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d += sum;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum -= (month[<span class="number">1</span>][m] - d);</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (m == <span class="number">13</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m = <span class="number">1</span>;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum - (month[<span class="number">0</span>][m] - d) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d += sum;</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum -= (month[<span class="number">0</span>][m] - d);</span><br><span class="line">                m++;</span><br><span class="line">                d = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (m == <span class="number">13</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m = <span class="number">1</span>;</span><br><span class="line">                    y++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷的写法，更清晰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> mon[<span class="number">2</span>][<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,</span><br><span class="line"><span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> y,m,d;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">y=<span class="number">2014</span>,m=<span class="number">11</span>,d=<span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> last=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">while</span>(last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(y%<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(last&gt;=(mon[<span class="number">0</span>][m]-d))</span><br><span class="line">&#123;</span><br><span class="line">last-=(mon[<span class="number">0</span>][m]-d);</span><br><span class="line">d=<span class="number">0</span>;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">d+=last;</span><br><span class="line">last=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">m=<span class="number">1</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(last&gt;=(mon[<span class="number">1</span>][m]-d))</span><br><span class="line">&#123;</span><br><span class="line">last-=(mon[<span class="number">1</span>][m]-d);</span><br><span class="line">d=<span class="number">0</span>;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">d+=last;</span><br><span class="line">last=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">12</span>)</span><br><span class="line">&#123;</span><br><span class="line">m=<span class="number">1</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="奇妙的数字"><a href="#奇妙的数字" class="headerlink" title="奇妙的数字"></a>奇妙的数字</h3><p><img src="https://img-blog.csdnimg.cn/92fb0087d02e4feea7baf28962fc7a64.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接暴力就完了，从1到1000枚举，算到谁是谁</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67081</span></span><br><span class="line"><span class="comment">// 暴力枚举</span></span><br><span class="line"><span class="type">int</span> visit[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt1 = <span class="number">0</span>, cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        visit[x % <span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt1++;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        visit[y % <span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt2++;</span><br><span class="line">        y /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt1 + cnt2 != <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i] != <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(i * i * i, i * i))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="格子中输出"><a href="#格子中输出" class="headerlink" title="格子中输出"></a>格子中输出</h3><p><img src="https://img-blog.csdnimg.cn/273706240b5f4502a6a7ea7815370736.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b7489e08975741ea85b6510ae7b05b99.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题实属有点恶心，如果不知道printf的这种用法多半是寄了 <del>（比如说我）</del><br> <strong>(width-2-strlen(buf))/2,” “,buf,(width-2-strlen(buf)+1)/2,” “</strong><br>因为它题目要求如果没有办法中间，要向左上靠，所以前面是除2，后面直接减去</p><h3 id="九数组"><a href="#九数组" class="headerlink" title="九数组"></a>九数组</h3><p><img src="https://img-blog.csdnimg.cn/4c3d77fc760f477485327db653e2e88f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/72f4206767f042c498fdba94d4f2c121.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题考察的是对深搜回溯的理解，dfs回溯写多的可以妙出答案<br><strong>t = x[k], x[k] = x[i], x[i] = t;</strong></p><h3 id="牌型种数"><a href="#牌型种数" class="headerlink" title="牌型种数"></a>牌型种数</h3><p><img src="https://img-blog.csdnimg.cn/67ab867c4ca04fb19ba4edd2c9d9f474.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d2c5013770644eebb8233f9919a1fa8c.png" alt="在这里插入图片描述"><br>简化一下模型，就是13种牌，每种牌有四张，然后取13张，有多少种取法<br>这道题解法很多：<br>首先是暴力枚举，直接枚举每种牌的个数,如果和能等于13就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>;a &lt; <span class="number">5</span>;a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> b = <span class="number">0</span>;b &lt; <span class="number">5</span>;b++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>;c &lt; <span class="number">5</span>;c++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">0</span>;d &lt; <span class="number">5</span>;d++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> e = <span class="number">0</span>;e &lt; <span class="number">5</span>;e++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> f = <span class="number">0</span>;f &lt; <span class="number">5</span>;f++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> g = <span class="number">0</span>;g &lt; <span class="number">5</span>;g++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>;h &lt; <span class="number">5</span>;h++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>;k &lt; <span class="number">5</span>;k++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>;l &lt; <span class="number">5</span>;l++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">0</span>;m &lt; <span class="number">5</span>;m++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a+b+c+d+e+f+g+h+i+j+k+l+m) == <span class="number">13</span>)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有就是用深搜来写<br>思路很巧妙，一开始没想到，想到就很容易</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/alidadaaaa/article/details/79690108?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164793048016780274131254%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164793048016780274131254&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-79690108.142^v3^pc_search_result_cache,143^v4^control&amp;utm_term=%E7%89%8C%E5%9E%8B%E7%A7%8D%E6%95%B0&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> cardnum)</span> <span class="comment">// n是代表牌的花色，cardnum代表牌的总数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">13</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cardnum == <span class="number">13</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cardnum &gt; <span class="number">13</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>, cardnum + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷换了一种写法，还是第二种思路，写法更清晰严谨</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> cardnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cardnum&gt;<span class="number">13</span>&amp;&amp;num&gt;<span class="number">14</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">14</span>&amp;&amp;cardnum==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num&lt;=<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">3</span>);</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,cardnum+<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="手链样式"><a href="#手链样式" class="headerlink" title="手链样式"></a>手链样式</h3><p><img src="https://img-blog.csdnimg.cn/cac6bf69c48c4cc890f18d98bcb60b41.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>我们首先要理解它题目的转动和反转的意思<br>就好比AAABBBBCCCCC是一个链<br>首先我们理解第一个词，转动—–手链是一个环，所以说呢，我们先放第一个简单的情况进行类比<br>第一种情况就是 AAABBBBCCCCC,然后串成环，头部的A和尾部的C就连接起来了<br>现在我们进行一次转动，转动一个单位，字符串就成了AABBBBCCCCCA,但是呢，在手链这个环中，样式还是没变，也就是说，当我们转动其中一种情况的环时，同时能诞生出好几种不同字符串相同样式的环，这些情况就不能算进去。<br>另外一种情况翻转，翻转这种情况的实际上其实就是将手链转动一周，例如：AAABBBBCCCCC转动一周后就是CCCCCBBBBAAA。<br>那么问题来了，我们搜到一种排列方式，我们要标记他的转动和翻转，怎么实现呢？<br>很简单也很巧妙！！！比如AAABBBBCCCCC，我们将其str=str+str，自己加上自己，相同的字符串连到一起，这样变成AAABBBBCCCCCAAABBBBCCCCC！!这样就可以解决转动的问题！我们再将字符串倒序，就可以解决反转的问题！！！<br>因此综上所述，我们有效的处理这两种限制情况的办法就是构建两个个新的字符串，一个为两个字符串相拼接，另一个是将前一个字符串倒序。（temp1 = str + str，temp=reverse（str+str））<br><a href="https://blog.csdn.net/bettle_king/article/details/115028506?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164795808916780269877692%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164795808916780269877692&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-115028506.142%5Ev3%5Epc_search_result_cache,143%5Ev4%5Econtrol&utm_term=%E6%89%8B%E9%93%BE%E6%A0%B7%E5%BC%8F&spm=1018.2226.3001.4187">参考大佬思路</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/bettle_king/article/details/115028506?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164793155016782184611226%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164793155016782184611226&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-115028506.142^v3^pc_search_result_cache,143^v4^control&amp;utm_term=%E6%89%8B%E9%93%BE%E6%A0%B7%E5%BC%8F&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 环上问题</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">vector&lt;string&gt; a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string tar = <span class="string">&quot;AAABBBBCCCCC&quot;</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].<span class="built_in">find</span>(tar) != string::npos) <span class="comment">//假如在已经储存的字符串依次遍历找不到新字符串的子串</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        string remp1 = tar + tar;</span><br><span class="line">        a.<span class="built_in">push_back</span>(remp1);</span><br><span class="line">        <span class="built_in">reverse</span>(remp1.<span class="built_in">begin</span>(), remp1.<span class="built_in">end</span>());</span><br><span class="line">        a.<span class="built_in">push_back</span>(remp1);</span><br><span class="line">        ans++;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(tar.<span class="built_in">begin</span>(), tar.<span class="built_in">end</span>()));</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外补一下这个next_premutation的说明，这是stl内置求一个序列全排列的函数，可以自动枚举不同次序字符串<br>模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">cout&lt;&lt;a[i];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">next_premutation</span>(<span class="number">0</span>,len<span class="number">-1</span>))</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qian2213762498/article/details/79683905?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164795839916781683966330%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164795839916781683966330&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-79683905.142%5Ev3%5Epc_search_result_cache,143%5Ev4%5Econtrol&utm_term=next_permutation&spm=1018.2226.3001.4187">next_premutation详解</a></p><h3 id="饮料换购"><a href="#饮料换购" class="headerlink" title="饮料换购"></a>饮料换购</h3><p>直接模拟就行，老老实实按步骤来<br><img src="https://img-blog.csdnimg.cn/ee67e81af30e4201809167863e8091fe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2796</span></span><br><span class="line"><span class="comment">// 嗯模拟</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> ping = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="keyword">while</span> (num)</span><br><span class="line">    &#123;</span><br><span class="line">        num--;</span><br><span class="line">        ans++;</span><br><span class="line">        ping++;</span><br><span class="line">        <span class="keyword">if</span> (ping == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ping = <span class="number">0</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="垒骰子"><a href="#垒骰子" class="headerlink" title="垒骰子"></a>垒骰子</h3><p><img src="https://img-blog.csdnimg.cn/86156e3b9f5a401ba1d7a1afd91ad1ec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题的题目很坑，当时做的时候看样例一脸懵逼，两个骰子为啥会有500多种方法？<br>其实可以想象一下，一个骰子，当朝上的方向固定时，它可以转动：<br><img src="https://img-blog.csdnimg.cn/9d33bcce42824cda860e737b558e966f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>理解题意之后，可以考虑两种方式入手<br>第一种：深搜：（TLE）只能37分<br>这应该时考场上没有办法的办法了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://lx.lanqiao.cn/problem.page?gpid=T2797</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> link[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; edge;</span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// n个骰子，m个排斥关系</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    edge[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">    edge[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">    edge[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">    edge[<span class="number">6</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">            link[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt, <span class="type">int</span> up)</span> <span class="comment">// up代表上方数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == n)</span><br><span class="line">    &#123;</span><br><span class="line">        (ans++) % mod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) <span class="comment">//枚举下一个上方数字</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; link[up][edge[i]] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (link[up][edge[i]]) <span class="comment">// 如果和下面的骰子不矛盾</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">            <span class="built_in">dfs</span>(cnt + <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">start</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2;</span><br><span class="line">        cin &gt;&gt; remp1 &gt;&gt; remp2;</span><br><span class="line">        link[remp1][remp2] = link[remp2][remp1] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = (ans * <span class="built_in">fast_power</span>(<span class="number">4</span>, n, mod)) % mod;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：dp（TLE）75分<br>dp[i][j]代表第i层骰子朝上的面是j时，此时的方案数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// dp解法：http://lx.lanqiao.cn/problem.page?gpid=T2797</span></span><br><span class="line"><span class="comment">// 75分</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">50000</span>][<span class="number">7</span>]; <span class="comment">// dp[i][j]代表第i层j朝上时，此时有多少种方案</span></span><br><span class="line"><span class="type">int</span> op[<span class="number">7</span>];              <span class="comment">//对立面</span></span><br><span class="line"><span class="type">int</span> conflict[<span class="number">7</span>][<span class="number">7</span>];     <span class="comment">//冲突</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> <span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    op[<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">    op[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line">    op[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">    op[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    op[<span class="number">5</span>] = <span class="number">2</span>;</span><br><span class="line">    op[<span class="number">6</span>] = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2;</span><br><span class="line">        cin &gt;&gt; remp1 &gt;&gt; remp2;</span><br><span class="line">        conflict[remp1][remp2] = conflict[remp2][remp1] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="comment">//枚举层数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++) <span class="comment">//枚举上面的骰子顶部数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">6</span>; k++) <span class="comment">//枚举上面骰子顶部数字</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> down = op[k];</span><br><span class="line">                <span class="keyword">if</span> (conflict[j][down] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][k] = dp[i][k] + dp[i - <span class="number">1</span>][j];</span><br><span class="line">                    dp[i][k] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = ans + dp[n][i];</span><br><span class="line">        ans %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans * <span class="built_in">fast_power</span>(<span class="number">4</span>, n, mod);</span><br><span class="line">    ans %= mod;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种：矩阵快速幂（AC）100<br><del>（我不会我是菜鸡）</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第六届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第六届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第六届蓝桥杯题解&quot;&gt;&lt;/a&gt;第六届蓝桥杯题解&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第七届蓝桥杯题解  2022/3/19</title>
    <link href="http://example.com/2022/04/15/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/04/15/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2022-04-15T13:24:00.574Z</published>
    <updated>2022-04-16T02:39:20.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七届蓝桥杯"><a href="#第七届蓝桥杯" class="headerlink" title="第七届蓝桥杯"></a>第七届蓝桥杯</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><del>（不会吧不会吧不会吧，不会真有大学生到快到四月都没开学吧）</del><br><img src="https://img-blog.csdnimg.cn/4ddcbe9bccf84604953ef264ebc2122f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>乌丸千岁（💊千岁）</p><h3 id="网友年龄"><a href="#网友年龄" class="headerlink" title="网友年龄"></a>网友年龄</h3><p><img src="https://img-blog.csdnimg.cn/3044c8d872e34ecc9d0166d7db0927f2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>直接循环嵌套穷举就好了，没啥好说的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// 循环嵌套</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (((i * <span class="number">10</span> + j) - (j * <span class="number">10</span> + i)) == <span class="number">27</span>)</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生日蜡烛"><a href="#生日蜡烛" class="headerlink" title="生日蜡烛"></a>生日蜡烛</h3><p><img src="https://img-blog.csdnimg.cn/f445dae7acf44980b7d5bc792fb8789d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16"><br>没什么好办法，从0开始枚举开始过生日的可能情况，依次判断就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// 枚举!</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">236</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> year = x;</span><br><span class="line">    <span class="keyword">while</span> (sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        sum -= year;</span><br><span class="line">        year--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> year + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">20</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(i))</span><br><span class="line">            cout &lt;&lt; <span class="built_in">judge</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方格填数"><a href="#方格填数" class="headerlink" title="方格填数"></a>方格填数</h3><p><img src="https://img-blog.csdnimg.cn/b7aad6c45ca743b68c3853be53800a77.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c1cf8bc64add4742a5ca04043f7436a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对角也算相邻！！！dfs模板题，正常思路是先在之前的递归中将数字填入，最后在最后一次循环进行判断即可。<br>我当时做麻烦了，以边的形式存图，其实用连接矩阵更好一点。<br>不过用边存图的话dfs好写一点<br>总之各有千秋吧，能做出来就行<br>我的思路大体是，在dfs中间枚举可能情况，边搜边判断，如果有不符合的情况直接筛掉，到最后能构造完的就是正解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// 深搜+回溯</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> pos[<span class="number">10</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(num - pos[edge[x][i]]) == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">check</span>(x, i))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            pos[x] = i;</span><br><span class="line">            visit[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span></span><br><span class="line">            <span class="comment">// cout&lt;&lt;i&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line">            visit[i] = <span class="number">0</span>;</span><br><span class="line">            pos[x] = <span class="number">-10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">start</span>();</span><br><span class="line">    <span class="comment">// memset(pos, INF, sizeof(pos));</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">        pos[i] = <span class="number">-10</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷换了一个写法，思路差不多，区别是先枚举，最后判断，这样写可能慢了一点，但是更清晰</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> pos[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">pos[i]=<span class="number">-199</span>;</span><br><span class="line">    edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">1</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">    edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">2</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">3</span>].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">4</span>].<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">6</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">0</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">5</span>].<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">    edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">2</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">1</span>), edge[<span class="number">6</span>].<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">7</span>].<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">7</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">9</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">3</span>), edge[<span class="number">8</span>].<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">    edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">8</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">5</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">4</span>), edge[<span class="number">9</span>].<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//判断第x格子行不行 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l=edge[x].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=edge[x][i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(pos[x]-pos[y])==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">judge</span>(i))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(visit[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">visit[i]=<span class="number">1</span>;</span><br><span class="line">pos[x]=i;</span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>);</span><br><span class="line">visit[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="https://img-blog.csdnimg.cn/813fb97e2f5a46b3bc9eb45ffae02cf5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8bc2cdd22d5a46c8bdbf4253b1f675ca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/a993a2ae392d439682573ae73d75e6fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/85eedd8e07044c5b8a4a8ab442dc74b1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>考察快排的基本思路，学过的应该秒出答案吧 <del>（不好意思我不会现学的）</del> 其实先学先用也可以，题目给了快排的思路，可以照葫芦画瓢</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快排解释：https://blog.csdn.net/Mr_xiayijie/article/details/80469293?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164736128916780357279308%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164736128916780357279308&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-80469293.142^v2^pc_search_result_cache,143^v4^control&amp;utm_term=%E5%BF%AB%E6%8E%92%E5%8E%9F%E7%90%86&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 快排基本原理</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> p, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = p;</span><br><span class="line">    <span class="type">int</span> j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> x = a[p];</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; r &amp;&amp; a[++i] &lt; x)</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">while</span> (a[--j] &gt; x)</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(a, p, j); <span class="comment">//填空在这里</span></span><br><span class="line">    <span class="comment">//解释：这个时候a[j]已经比x小了，此时交换可以满足左边比x小，右边比x大</span></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> p, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> q = <span class="built_in">partition</span>(a, p, r);</span><br><span class="line">        <span class="built_in">quicksort</span>(a, p, q - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quicksort</span>(a, q + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> a[] = &#123;<span class="number">5</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">17</span>&#125;;</span><br><span class="line">    <span class="type">int</span> N = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quicksort</span>(a, <span class="number">0</span>, N - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寒假作业"><a href="#寒假作业" class="headerlink" title="寒假作业"></a>寒假作业</h3><p><img src="https://img-blog.csdnimg.cn/1d492543844c496e9364e0620e89ed4c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>很有意思的一道dfs题，思路和之前的那道题思路很像，边搜边排除，到最后能搜完的就是正解，思路出来了代码很好写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=264529</span></span><br><span class="line"><span class="comment">// dfs+剪枝</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">14</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">1</span>) <span class="comment">//算加法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">13</span> - i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i + j &gt; <span class="number">13</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                visit[i] = visit[j] = visit[i + j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;+&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i + j &lt;&lt; endl;</span></span><br><span class="line">                <span class="built_in">dfs</span>(<span class="number">2</span>);</span><br><span class="line">                visit[i] = visit[j] = visit[i + j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">2</span>) <span class="comment">// 算减法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j] || visit[i - j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j == (i - j))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                visit[i] = visit[j] = visit[i - j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;-&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i - j &lt;&lt; endl;</span></span><br><span class="line">                <span class="built_in">dfs</span>(<span class="number">3</span>);</span><br><span class="line">                visit[i] = visit[j] = visit[i - j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= (<span class="number">13</span> / i); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j] || visit[i * j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == j || i == i * j || j == i * j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;*&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i * j &lt;&lt; endl;</span></span><br><span class="line">                visit[i] = visit[j] = visit[i * j] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(<span class="number">4</span>);</span><br><span class="line">                visit[i] = visit[j] = visit[i * j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">13</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j != <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (visit[i] || visit[j] || visit[i / j])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (i == j || i == i / j || j == i / j)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot;/&quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; i / j &lt;&lt; endl;</span></span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剪邮票"><a href="#剪邮票" class="headerlink" title="剪邮票"></a>剪邮票</h3><p><img src="https://img-blog.csdnimg.cn/2fbe3da0f3394e898704cb83be8e549e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9253d109917e430098dfb87ab9d52eba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>也是dfs题，我当时自己写的时候犯了一个错误，首先讲一下我的思路：首先用dfs生成五个不相同的数字，然后将这5个数字在图上对应的地方标记，然后dfs图看看是否为连通块。但是要注意：<strong>假如你使用dfs搜出来的数字组合，你搜出来的序列是有重复的！12345和54321是一种情况！</strong> ，当时我第一次跑的时候答案是一万多，后来想了一个多小时，才发现是这个错了，解决方式很简单。每一种情况会被重复5！次，结果除一下5！就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67636</span></span><br><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="comment">// 思路：首先用dfs生成五个不相同的数字，然后将这5个数字在图上对应的地方标记，然后dfs图看看是否为连通块</span></span><br><span class="line"><span class="type">int</span> pos_x[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> pos_y[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">13</span>];</span><br><span class="line"><span class="type">bool</span> edge[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> dirx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">bool</span> sum[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> &amp;cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(x &lt;= <span class="number">2</span> &amp;&amp; x &gt;= <span class="number">0</span> &amp;&amp; y &lt;= <span class="number">3</span> &amp;&amp; y &gt;= <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (edge[x][y] == <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;x&quot; &lt;&lt; x &lt;&lt; &quot; &quot;</span></span><br><span class="line">    <span class="comment">//      &lt;&lt; &quot;y&quot; &lt;&lt; y &lt;&lt; &quot; &quot;;</span></span><br><span class="line">    edge[x][y] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1 = x + dirx[i];</span><br><span class="line">        <span class="type">int</span> y1 = y + diry[i];</span><br><span class="line">        <span class="built_in">dfs</span>(x1, y1, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, <span class="number">0</span>, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="type">int</span> x1;</span><br><span class="line">    <span class="type">int</span> y1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            edge[pos_x[i]][pos_y[i]] = <span class="literal">true</span>;</span><br><span class="line">            x1 = pos_x[i];</span><br><span class="line">            y1 = pos_y[i]; </span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; x1 &lt;&lt; &quot; &quot; &lt;&lt; y1 &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(x1, y1, cnt);</span><br><span class="line">    <span class="comment">// cout&lt;&lt;cnt;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">select</span><span class="params">(<span class="type">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt &gt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// for (int i = 1; i &lt;= 12; i++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     if (visit[i] == true)</span></span><br><span class="line">        <span class="comment">//         cout &lt;&lt; i &lt;&lt; &quot; &quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">check</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visit[i] == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                visit[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">select</span>(cnt + <span class="number">1</span>);</span><br><span class="line">                visit[i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">select</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans / (<span class="number">5</span> * <span class="number">4</span> * <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷换了一个写法，更清晰一点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> maze[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> visit[<span class="number">4</span>][<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> posx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> posy[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> dirx[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span>cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx=x+dirx[i];</span><br><span class="line"><span class="type">int</span> rempy=y+diry[i];</span><br><span class="line"><span class="keyword">if</span>(!(rempx&lt;=<span class="number">3</span>&amp;&amp;rempx&gt;=<span class="number">1</span>&amp;&amp;rempy&lt;=<span class="number">4</span>&amp;&amp;rempy&gt;=<span class="number">1</span>))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(maze[rempx][rempy]&amp;&amp;visit[rempx][rempy]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">visit[rempx][rempy]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">get</span>(rempx,rempy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="built_in">sizeof</span>(visit));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(maze[i][j]&amp;&amp;visit[i][j]==<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">visit[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">get</span>(i,j);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&lt;=<span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">12</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=posx[i];</span><br><span class="line"><span class="type">int</span> y=posy[i];</span><br><span class="line"><span class="keyword">if</span>(maze[x][y])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">maze[x][y]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>);</span><br><span class="line">maze[x][y]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">judge</span>())</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans/(<span class="number">5</span>*<span class="number">4</span>*<span class="number">3</span>*<span class="number">2</span>*<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="四平方和"><a href="#四平方和" class="headerlink" title="四平方和"></a>四平方和</h3><p><img src="https://img-blog.csdnimg.cn/6b8f93aa93b9479b99b63c1aae8747dd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/f88884cbe0ac4a93942285112560e5ff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>这道题是真的离谱。。。。我当时一开始写，想了一堆优化方案。。。<br>我的自己思路是这样的; 首先枚举后两项，将大的数字组合先存起来，然后从头枚举前两个小的，再二分查找满足条件的后两项</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2766</span></span><br><span class="line"><span class="comment">// 二分</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> c, d;</span><br><span class="line">    <span class="type">int</span> sumcd;</span><br><span class="line">&#125; edge[<span class="number">10000000</span>]; <span class="comment">//存储c，d</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if (x.d != y.d)</span></span><br><span class="line">    <span class="comment">//      return x.d &gt; y.d;</span></span><br><span class="line">    <span class="keyword">if</span> (x.sumcd!=y.sumcd) <span class="keyword">return</span> x.sumcd &lt; y.sumcd;</span><br><span class="line"><span class="keyword">if</span> (x.c!=y.c) <span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line"><span class="keyword">return</span> x.d&lt;y.d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a * a + b * b + edge[mid].sumcd &gt;= num)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_ans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i*i &lt;=num; i++) <span class="comment">//枚举后一项(d)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j*j+i*i &lt;=num; j++) <span class="comment">//枚举后一项(c)</span></span><br><span class="line">        <span class="comment">//注意循环的写法有讲究：</span></span><br><span class="line">        <span class="comment">// i从最大的maxn开始循环，而j从0开始找</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            edge[cnt].c = i;</span><br><span class="line">            edge[cnt].d = j;</span><br><span class="line">            edge[cnt].sumcd = i * i + j * j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + cnt + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i*i &lt;= num; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j*j+i*i &lt;= num; j++)</span><br><span class="line">        <span class="comment">// 从a最小开始找，因为题目要求找第一个，即a最小</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right = cnt;</span><br><span class="line">            <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(i, j, mid))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = mid;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i * i + j * j + edge[ans].sumcd == num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i * i + j * j + edge[ans].sumcd &lt;&lt; endl;</span></span><br><span class="line">                <span class="comment">// cout &lt;&lt; num &lt;&lt; endl;</span></span><br><span class="line">                cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; edge[ans].c &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; edge[ans].d;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="built_in">get_ans</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>但是！这道题压根不用这么麻烦！！！！<br>四重暴力循环会超时，但是可以三维优化一下就可以解决问题！！！<br>该说不愧是暴力杯啊？？？真有你的蓝桥杯！！！！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2766</span></span><br><span class="line"><span class="comment">// 暴 力 循 环</span></span><br><span class="line"><span class="comment">// 把四维优化为三维，我giao竟然ac了！蓝桥杯真有你的！不愧是暴力杯</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="type">int</span> maxn = <span class="built_in">sqrt</span>(num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= maxn; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = j; z &lt;= maxn; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> remp = <span class="built_in">sqrt</span>(num - (i * i + j * j + z * z));</span><br><span class="line">                <span class="keyword">if</span> (remp * remp + i * i + j * j + z * z == num)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; z &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; remp;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外再加dxy大佬的另一个解法：<br>鸣谢dxy大佬！！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pii pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">-1</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i;j*j+i*i&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">int</span> temp=i*i+j*j;</span><br><span class="line"><span class="keyword">if</span> (a[temp]!=<span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">a[temp]=i;</span><br><span class="line">b[temp]=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=i;i*i+j*j&lt;=n;j++)&#123;</span><br><span class="line"><span class="type">int</span> temp=n-i*i-j*j;</span><br><span class="line"><span class="keyword">if</span> (a[temp]!=<span class="number">-1</span>)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;a[temp]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b[temp]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><del>(我是伞兵)</del><br><img src="https://img-blog.csdnimg.cn/e551534a70554cd6b42ca83ffe008510.png" alt="在这里插入图片描述"></p><h3 id="密码脱落"><a href="#密码脱落" class="headerlink" title="密码脱落"></a>密码脱落</h3><p><img src="https://img-blog.csdnimg.cn/4966fccdd70946a58255e93fe20b545a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一道区间dp模版题，理解了思路不难<br>贴一个区间dp模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">区间dp模板</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="comment">//初始dp数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt; n; ++i)</span><br><span class="line">        &#123;                                <span class="comment">//枚举区间的起点</span></span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>;         <span class="comment">//根据起点和长度得出终点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= j; ++k) <span class="comment">//枚举最优分割点</span></span><br><span class="line">                                         <span class="comment">//状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  下面是全代码：<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 区间dp</span></span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2767</span></span><br><span class="line"><span class="comment">// 其实就是求最长回文区间长度，最终结果就是总长减去最长回文区间</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= len; l++) <span class="comment">//枚举区间长度</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + l - <span class="number">1</span> &lt; len; i++) <span class="comment">//枚举区间起点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = i + l - <span class="number">1</span>; <span class="comment">//区间终点</span></span><br><span class="line">            <span class="keyword">if</span> (l == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>; <span class="comment">//长度为一的区间回文长度为1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]); <span class="comment">//一种是选右不选左，另一种是选左不选右</span></span><br><span class="line">                <span class="keyword">if</span> (str[i] == str[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i][j], dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; len - dp[<span class="number">0</span>][len - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">区间dp模板</span></span><br><span class="line"><span class="comment">    memset(dp, 0, sizeof(dp));</span></span><br><span class="line"><span class="comment">    //初始dp数组</span></span><br><span class="line"><span class="comment">    for (int len = 2; len &lt;= n; len++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        //枚举区间长度</span></span><br><span class="line"><span class="comment">        for (int i = 1; i + len - 1 &lt; n; ++i)</span></span><br><span class="line"><span class="comment">        &#123;                                //枚举区间的起点</span></span><br><span class="line"><span class="comment">            int j = i + len - 1;         //根据起点和长度得出终点</span></span><br><span class="line"><span class="comment">            for (int k = i; k &lt;= j; ++k) //枚举最优分割点</span></span><br><span class="line"><span class="comment">                                         //状态转移方程</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h3 id="消除尾一"><a href="#消除尾一" class="headerlink" title="消除尾一"></a>消除尾一</h3><p><img src="https://img-blog.csdnimg.cn/1eac25083df0423db0b0926b8238df3e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>代码填空，理解题意就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (x &gt;&gt; (<span class="number">31</span> - i)) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;   &quot;</span>);</span><br><span class="line"></span><br><span class="line">    x = x &amp; (x + <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (x &gt;&gt; (<span class="number">31</span> - i)) &amp; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">103</span>);</span><br><span class="line">    <span class="built_in">f</span>(<span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第七届蓝桥杯&quot;&gt;&lt;a href=&quot;#第七届蓝桥杯&quot; class=&quot;headerlink&quot; title=&quot;第七届蓝桥杯&quot;&gt;&lt;/a&gt;第七届蓝桥杯&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第八届蓝桥杯题解  2022/3/13</title>
    <link href="http://example.com/2022/04/15/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/04/15/%E7%AC%AC%E5%85%AB%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2022-04-15T13:20:37.573Z</published>
    <updated>2022-04-16T02:39:22.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八届蓝桥杯题解"><a href="#第八届蓝桥杯题解" class="headerlink" title="第八届蓝桥杯题解"></a>第八届蓝桥杯题解</h1><h3 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h3><p><em><strong><del>鼠鼠开学又延迟了呜呜呜呜呜呜呜呜</del></strong></em><br>我以为高考结束是我的最长的假期<br>但是事实证明：<br>我太年轻了.jpg<br><del>（所以这是你摆烂的理由吗fw）</del><br><img src="https://img-blog.csdnimg.cn/c92043afb4e54c92a73b7e5956f71b22.gif" alt="在这里插入图片描述"><br><del>言归正传</del></p><h3 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h3><p><img src="https://img-blog.csdnimg.cn/18bf8f44d0b54d3195dd0b0092bedc72.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8118255842a042449bb5cde98c806d16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以考虑深搜来做，只要能到边界我们认为就是可以走出来，那么咱们怎么知道他走不出来呢？处理方式很简单，众所周知，细心的你肯定能发现，假如想每个方格只走一次且一直走下去是不可能的，如果走不出来，肯定是在兜圈子，那么我们只要当走到走过的地点，我们认为它不行。实现很简单，设一个visit数组即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// dfs</span></span><br><span class="line"><span class="comment">// 答案：31</span></span><br><span class="line"><span class="type">char</span> edge[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; dirx, diry;</span><br><span class="line"><span class="type">int</span> visit[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(x &lt;= <span class="number">10</span> &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="number">10</span> &amp;&amp; y &gt;= <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (visit[x][y]) <span class="comment">//如果走不出去，肯定是走到原来走过的点转圈圈</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> tar = edge[x][y];</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> next_x = x + dirx[tar];</span><br><span class="line">    <span class="type">int</span> next_y = y + diry[tar];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(next_x, next_y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;D&#x27;</span>] = <span class="number">1</span>, diry[<span class="string">&#x27;D&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;U&#x27;</span>] = <span class="number">-1</span>, diry[<span class="string">&#x27;U&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;L&#x27;</span>] = <span class="number">0</span>, diry[<span class="string">&#x27;L&#x27;</span>] = <span class="number">-1</span>;</span><br><span class="line">    dirx[<span class="string">&#x27;R&#x27;</span>] = <span class="number">0</span>, diry[<span class="string">&#x27;R&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            edge[i][j + <span class="number">1</span>] = remp[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">dfs</span>(i, j))</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">样例：</span></span><br><span class="line"><span class="comment">UDDLUULRUL</span></span><br><span class="line"><span class="comment">UURLLLRRRU</span></span><br><span class="line"><span class="comment">RRUURLDLRD</span></span><br><span class="line"><span class="comment">RUDDDDUUUU</span></span><br><span class="line"><span class="comment">URUDLLRRUU</span></span><br><span class="line"><span class="comment">DURLRLDLRL</span></span><br><span class="line"><span class="comment">ULLURLLRDU</span></span><br><span class="line"><span class="comment">RDLULLRDDD</span></span><br><span class="line"><span class="comment">UUDDUDUDLL</span></span><br><span class="line"><span class="comment">ULRDLUURRR</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>二刷的新写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">char</span>,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; dir;</span><br><span class="line"><span class="type">char</span> maze[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> visit[<span class="number">100</span>][<span class="number">100</span>]; </span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dir[<span class="string">&#x27;U&#x27;</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">dir[<span class="string">&#x27;D&#x27;</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">dir[<span class="string">&#x27;L&#x27;</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">dir[<span class="string">&#x27;R&#x27;</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(x&lt;=<span class="number">10</span>&amp;&amp;x&gt;=<span class="number">1</span>&amp;&amp;y&lt;=<span class="number">10</span>&amp;&amp;y&gt;=<span class="number">1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(visit[x][y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">visit[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> d=maze[x][y];</span><br><span class="line"><span class="type">int</span> rempx=x+dir[d].first;</span><br><span class="line"><span class="type">int</span> rempy=y+dir[d].second;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dfs</span>(rempx,rempy); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">string remp;</span><br><span class="line">cin&gt;&gt;remp;</span><br><span class="line"><span class="type">int</span> l=remp.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;l;j++)</span><br><span class="line">&#123;</span><br><span class="line">maze[i][j+<span class="number">1</span>]=remp[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="built_in">sizeof</span>(visit));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(i,j))</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="跳蚱蜢"><a href="#跳蚱蜢" class="headerlink" title="跳蚱蜢"></a>跳蚱蜢</h3><p><img src="https://img-blog.csdnimg.cn/ac73a688bd2f47de9cbac42d08b996d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>一道bfs题，第一眼看上去没啥思路，很难想到是bfs，但是想到了就很简单，我们考虑用数字字符串模拟，0代表空盘子，一切变换围绕空盘子展开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// bfs模板题</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string path;</span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line">string start = <span class="string">&quot;087654321&quot;</span>;</span><br><span class="line">string tar = <span class="string">&quot;012345678&quot;</span>; <span class="comment">// 0代表空盘子</span></span><br><span class="line"><span class="type">int</span> dir[] = &#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">map&lt;string, <span class="type">bool</span>&gt; visit;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(string str, <span class="type">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == ch)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node s;</span><br><span class="line">    s.path = start;</span><br><span class="line">    s.step = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node now = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        string remp = now.path;</span><br><span class="line">        <span class="keyword">if</span> (visit[remp])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        visit[remp] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> nowstep = now.step;</span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">find</span>(remp, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; remp &lt;&lt; &quot; &quot; &lt;&lt; nowstep &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            string next = remp;</span><br><span class="line">            <span class="built_in">swap</span>(next[pos], next[(pos + dir[i] + <span class="number">9</span>) % <span class="number">9</span>]); <span class="comment">//防止溢出</span></span><br><span class="line">            <span class="keyword">if</span> (next == tar)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = nowstep + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node nextnode;</span><br><span class="line">            nextnode.path = next;</span><br><span class="line">            nextnode.step = nowstep + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(nextnode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方格分割"><a href="#方格分割" class="headerlink" title="方格分割"></a>方格分割</h3><p><img src="https://img-blog.csdnimg.cn/5b2675f731234ab8a57a6ab0d13a817b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6b45c1e9f8e941f18171a3fb234fc301.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这道题第一眼看很吓人，但是有了突破口很容易，因为图形是对称，所以构造分割线肯定在图形中心开始延展，因为对称，所以向一个方向延申，其另一头必然从相反一头延展。我们只要记录能延展到边界的分割线个数即可<br>结果要除4，因为有旋转对称，只要能通过旋转得到，就是同一个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// dfs深搜</span></span><br><span class="line"><span class="comment">// 思路很巧妙，利用中心点向边缘发散，因为是对称的，所以扩展方向只有两种，免去了最终判断是否是对称的必要</span></span><br><span class="line"><span class="comment">// 只需要计算能到达边界的分割线个数即可</span></span><br><span class="line"><span class="comment">// 结果需要除4，因为旋转相同算同一种分法</span></span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span> || y == <span class="number">1</span> || x == <span class="number">7</span> || y == <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (visit[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    visit[<span class="number">8</span> - x][<span class="number">8</span> - y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">7</span> &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="number">7</span> &amp;&amp; y &gt;= <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">dfs</span>(x + dirx[i], y + diry[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    visit[x][y] = <span class="number">0</span>;</span><br><span class="line">    visit[<span class="number">8</span> - x][<span class="number">8</span> - y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; ans / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新：二刷的时候又仔细想了一下，感觉不是很严谨，visit回溯修改应该放在for里面，虽然感觉有点问题，但是答案两种写法结果一样，不知道什么原因，有懂哥知道的话说一下<br>这是二刷的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> dirx[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">7</span>||y==<span class="number">1</span>||y==<span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx=x+dirx[i];</span><br><span class="line"><span class="type">int</span> rempy=y+diry[i];</span><br><span class="line"><span class="keyword">if</span>(visit[rempx][rempy])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">visit[rempx][rempy]=visit[<span class="number">8</span>-rempx][<span class="number">8</span>-rempy]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(rempx,rempy);</span><br><span class="line">visit[rempx][rempy]=visit[<span class="number">8</span>-rempx][<span class="number">8</span>-rempy]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">visit[<span class="number">4</span>][<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">cout&lt;&lt;ans/<span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字母组串"><a href="#字母组串" class="headerlink" title="字母组串"></a>字母组串</h3><p><img src="https://img-blog.csdnimg.cn/12477a6a08b2462fbe4c80422b51a820.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>其实道理很简单，长度为n的字符串肯定由n-1个字符串得到，n-1个字符串缺少的字母有三种情况：缺a，缺b，缺c<br>无脑加起来就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// 简单递归</span></span><br><span class="line"><span class="comment">// a个A，b个B，c个C 字母，能组成多少个不同的长度为n的串。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span> || c &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(a, b, c - <span class="number">1</span>, n - <span class="number">1</span>) + <span class="built_in">f</span>(a - <span class="number">1</span>, b, c, n - <span class="number">1</span>) + <span class="built_in">f</span>(a, b - <span class="number">1</span>, c, n - <span class="number">1</span>); <span class="comment">// 填空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简单递归，n个字符由n-1的三种字符相加而成</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">f</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">f</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公共子串"><a href="#最大公共子串" class="headerlink" title="最大公共子串"></a>最大公共子串</h3><p><img src="https://img-blog.csdnimg.cn/7f5605a0679b4996aae0af80af6268b3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这个也很容易，a[i][j]的含义是截至第一个字符串i位置和第二个字符串j位置相同字符的个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 256</span></span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// 这个不难，看懂思路就可以填出来</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[N][N];</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(s1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>) * N * N);</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= len2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i - <span class="number">1</span>] == s2[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j] = a[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>; <span class="comment">//填空</span></span><br><span class="line">                <span class="keyword">if</span> (a[i][j] &gt; max)</span><br><span class="line">                    max = a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">f</span>(<span class="string">&quot;abcdkkk&quot;</span>, <span class="string">&quot;baabcdadabc&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则问题"><a href="#正则问题" class="headerlink" title="正则问题"></a>正则问题</h3><p><img src="https://img-blog.csdnimg.cn/8747d79c7c654922b2c6a2ed4f753976.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""><br>题目意思有点晦涩，大概是定义新运算吧(<del>正则我也不知道是什么东西</del>)<br>遇到“|”就比较其左右两边的大小 如样例((xx|xxx)x|(x|xx))xx<br>(xx|xxx)的长度为3，遇到x加上1得4，(x|xx)=2，4|2=4，遇到<br>xx得到6<br>这个思路是从大佬学的，思路确实很强悍，化繁为简，很难想到，但是想到就很容易<br>大体思路就是：设置一个max值，temp进行计数，每当遇到“|”或者“）”就结算一次，将max更新，然后计数器temp清零</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2823</span></span><br><span class="line"><span class="comment">// 递归(思路很巧妙)</span></span><br><span class="line"><span class="type">int</span> pos; <span class="comment">//指针</span></span><br><span class="line"><span class="type">int</span> len; <span class="comment">//字符串长度</span></span><br><span class="line">string str;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ans</span><span class="params">()</span> <span class="comment">// ans()计算的是一个&quot;(...)&quot;值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> max1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pos &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            temp += <span class="built_in">ans</span>(); <span class="comment">//遇到</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            temp++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            max1 = <span class="built_in">max</span>(temp, max1); <span class="comment">//时刻更新这个max1，到最后直接返回max1</span></span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[pos] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos++;</span><br><span class="line">            max1 = <span class="built_in">max</span>(temp, max1);</span><br><span class="line">            <span class="keyword">return</span> max1; <span class="comment">//切记：这个地方temp就别清零了！！因为括号还可能有&#x27;x&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    max1 = <span class="built_in">max</span>(temp, max1);</span><br><span class="line">    <span class="keyword">return</span> max1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; str;</span><br><span class="line">    len = str.<span class="built_in">length</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">ans</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包子凑数"><a href="#包子凑数" class="headerlink" title="包子凑数"></a>包子凑数</h3><p><img src="https://img-blog.csdnimg.cn/b4ada1b44a4f42a683bb46a76b271cf0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>完全背包问题<br>这个地方有一个结论，就是假如这些包子数的公因数是1，答案就是有限个，否则是INF<br>关于这个结论的解释：如果输入的数的最大公约数不为1，那么就会有无数种数目是凑不出的，比如最大公约数是3，那么选出n笼后的结果就一定是3的倍数，这样不是3的倍数的数字就凑不出了。<br>（鸣谢cjmdyl大佬！！！结论的解释！）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67724</span></span><br><span class="line"><span class="comment">// 完全背包</span></span><br><span class="line"><span class="comment">// 记住：假如输入的数最大公约数不是1，则就是INF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10010</span></span><br><span class="line"><span class="type">int</span> value[maxn];</span><br><span class="line"><span class="type">int</span> visit[maxn];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0和任何数的最大公因数是这个数自己</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gcd</span>(x, y) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; value[i];</span><br><span class="line">        flag = <span class="built_in">gcd</span>(flag, value[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;INF&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        visit[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = value[i]; j &lt;= maxn; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (visit[j - value[i]])</span><br><span class="line">                    visit[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[i])</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第八届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第八届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第八届蓝桥杯题解&quot;&gt;&lt;/a&gt;第八届蓝桥杯题解&lt;/h1&gt;&lt;h3 id=&quot;胡言乱语&quot;&gt;&lt;a href=&quot;#胡言乱语&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第九届蓝桥杯题解  2022/3/8</title>
    <link href="http://example.com/2022/04/15/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/04/15/%E7%AC%AC%E4%B9%9D%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2022-04-15T13:06:37.386Z</published>
    <updated>2022-04-16T02:38:07.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第九届蓝桥杯题解"><a href="#第九届蓝桥杯题解" class="headerlink" title="第九届蓝桥杯题解"></a>第九届蓝桥杯题解</h1><p><em>本应该是上周就发出来的，前几天考试，鸽了两天</em><br><em>（<del>生产队的驴也不敢这么休息吧</del>）</em><br><img src="https://img-blog.csdnimg.cn/1db2d1b188854c48b5e7c268a87c1cd7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><del>鬼灭之刃真好看</del>（划去）</p><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><p>很简单的一道签到题，其实不用程序算，可以直接用等比数列算一下，然后让程序约一下分就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; gcd(1048575, 524288) &lt;&lt; endl;</span></span><br><span class="line">    cout &lt;&lt; <span class="number">1048575</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="number">524288</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="星期一"><a href="#星期一" class="headerlink" title="星期一"></a>星期一</h3><p>看一下日历，年末最后一天是星期天，直接设置以7为周期的循环，找到几是几</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">7</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">36525</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (now == <span class="number">1</span>)</span><br><span class="line">            ans++;</span><br><span class="line">        <span class="keyword">if</span> (now == <span class="number">0</span>)</span><br><span class="line">            now = <span class="number">7</span>;</span><br><span class="line">        now--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘积尾零"><a href="#乘积尾零" class="headerlink" title="乘积尾零"></a>乘积尾零</h3><p>读入一个数据后，统计其5和2的因数，到最后统计5和2的个数，取最小即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num5 = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (tar % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num2++;</span><br><span class="line">        tar /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (tar % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num5++;</span><br><span class="line">        tar /= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="built_in">check</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(num2, num5);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5650 4542 3554 473 946 4114 3871 9073 90 4329 </span></span><br><span class="line"><span class="comment">2758 7949 6113 5659 5245 7432 3051 4434 6704 3594 </span></span><br><span class="line"><span class="comment">9937 1173 6866 3397 4759 7557 3070 2287 1453 9899 </span></span><br><span class="line"><span class="comment">1486 5722 3135 1170 4014 5510 5120 729 2880 9019 </span></span><br><span class="line"><span class="comment">2049 698 4582 4346 4427 646 9742 7340 1230 7683 </span></span><br><span class="line"><span class="comment">5693 7015 6887 7381 4172 4341 2909 2027 7355 5649 </span></span><br><span class="line"><span class="comment">6701 6645 1671 5978 2704 9926 295 3125 3878 6785 </span></span><br><span class="line"><span class="comment">2066 4247 4800 1578 6652 4616 1113 6205 3264 2915 </span></span><br><span class="line"><span class="comment">3966 5291 2904 1285 2193 1428 2265 8730 9436 7074 </span></span><br><span class="line"><span class="comment">689 5510 8243 6114 337 4096 8199 7313 3685 211 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="第几个幸运数"><a href="#第几个幸运数" class="headerlink" title="第几个幸运数"></a>第几个幸运数</h3><p>筛查目标数字的方法很巧妙<br>直接用stl的set来做，会简单很多<br>注意一下set的用法，stl用好了可以省很多事 (<strong><del>用的不好会多很多事</del></strong>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.lanqiao.cn/courses/2786/learning/?id=67806</span></span><br><span class="line"><span class="comment">// set集合使用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 59084709587505</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">set&lt;<span class="type">long</span> <span class="type">long</span>&gt; lisit;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> head = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> remp = head * a[i];</span><br><span class="line">            <span class="keyword">if</span> (remp &lt;= maxn)</span><br><span class="line">                lisit.<span class="built_in">insert</span>(remp);</span><br><span class="line">        &#125;</span><br><span class="line">        head = *(lisit.<span class="built_in">upper_bound</span>(head));</span><br><span class="line">        <span class="keyword">if</span> (head == maxn)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注：</span></span><br><span class="line">    <span class="comment">// 1、set集合自带排序，二分可以直接用</span></span><br><span class="line">    <span class="comment">// 2、set自带upper_bound返回的是地址</span></span><br><span class="line">    cout &lt;&lt; lisit.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="航班时间"><a href="#航班时间" class="headerlink" title="航班时间"></a>航班时间</h3><p>一道模拟题，读取数据用到一个sscanf，可以省很多事，在做天梯赛的字符串处理可以大杀四方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2723</span></span><br><span class="line"><span class="comment">// 纯模拟 (读数据真给我上了一课)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_time</span><span class="params">(<span class="type">int</span> &amp;h1, <span class="type">int</span> &amp;h2, <span class="type">int</span> &amp;m1, <span class="type">int</span> &amp;m2, <span class="type">int</span> &amp;s1, <span class="type">int</span> &amp;s2, <span class="type">int</span> &amp;cha)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cha = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> tar[<span class="number">100</span>];</span><br><span class="line">    cin.<span class="built_in">getline</span>(tar, <span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(tar);</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">17</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sscanf</span>(tar, <span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>, &amp;h1, &amp;m1, &amp;s1, &amp;h2, &amp;m2, &amp;s2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sscanf</span>(tar, <span class="string">&quot;%d:%d:%d %d:%d:%d (+%d)&quot;</span>, &amp;h1, &amp;m1, &amp;s1, &amp;h2, &amp;m2, &amp;s2, &amp;cha);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get_cha</span><span class="params">(<span class="type">int</span> h1, <span class="type">int</span> m1, <span class="type">int</span> s1, <span class="type">int</span> h2, <span class="type">int</span> m2, <span class="type">int</span> s2, <span class="type">int</span> cha)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (h2 - h1) * <span class="number">3600</span> + (m2 - m1) * <span class="number">60</span> + (s2 - s1) + cha * <span class="number">24</span> * <span class="number">3600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin.<span class="built_in">ignore</span>(); <span class="comment">//去除换行，解释：https://blog.csdn.net/weixin_43938629/article/details/104484119?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164613668016781685343058%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164613668016781685343058&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-104484119.pc_search_result_cache&amp;utm_term=getline%E6%97%A0%E6%B3%95%E8%AF%BB%E5%85%A5&amp;spm=1018.2226.3001.4187</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> h1, h2, m1, m2, s1, s2, cha;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; h1 &lt;&lt; &quot; &quot; &lt;&lt; m1 &lt;&lt; &quot; &quot; &lt;&lt; s1 &lt;&lt; &quot; &quot; &lt;&lt; h2 &lt;&lt; &quot; &quot; &lt;&lt; m2 &lt;&lt; &quot; &quot; &lt;&lt; s2 &lt;&lt; &quot; &quot; &lt;&lt; cha &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">get_time</span>(h1, h2, m1, m2, s1, s2, cha);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cost1 = <span class="built_in">get_cha</span>(h1, m1, s1, h2, m2, s2, cha);</span><br><span class="line">        <span class="built_in">get_time</span>(h1, h2, m1, m2, s1, s2, cha);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cost2 = <span class="built_in">get_cha</span>(h1, m1, s1, h2, m2, s2, cha);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cost = (cost1 + cost2) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> h = cost / <span class="number">3600</span>;</span><br><span class="line">        cost = cost % <span class="number">3600</span>;</span><br><span class="line">        <span class="type">int</span> m = cost / <span class="number">60</span>;</span><br><span class="line">        <span class="type">int</span> s = cost % <span class="number">60</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>, h, m, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷的新写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> sh1,sm1,ss1,sh2,sm2,ss2,sday;</span><br><span class="line"><span class="type">int</span> eh1,em1,es1,eh2,em2,es2,eday;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ss,es; </span><br><span class="line"><span class="type">long</span> <span class="type">long</span> anss;</span><br><span class="line"><span class="type">int</span> h,s,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gettime</span><span class="params">(<span class="type">char</span> remp1[],<span class="type">char</span> remp2[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> len1=<span class="built_in">strlen</span>(remp1);</span><br><span class="line"><span class="keyword">if</span>(remp1[len1<span class="number">-1</span>]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp1,<span class="string">&quot;%d:%d:%d %d:%d:%d (+%d)&quot;</span>,&amp;sh1,&amp;sm1,&amp;ss1,&amp;sh2,&amp;sm2,&amp;ss2,&amp;sday);</span><br><span class="line"><span class="comment">//cout&lt;&lt;sday&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp1,<span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>,&amp;sh1,&amp;sm1,&amp;ss1,&amp;sh2,&amp;sm2,&amp;ss2);</span><br><span class="line">sday=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len2=<span class="built_in">strlen</span>(remp2);</span><br><span class="line"><span class="keyword">if</span>(remp2[len2<span class="number">-1</span>]==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp2,<span class="string">&quot;%d:%d:%d %d:%d:%d (+%d)&quot;</span>,&amp;eh1,&amp;em1,&amp;es1,&amp;eh2,&amp;em2,&amp;es2,&amp;eday);</span><br><span class="line"><span class="comment">//cout&lt;&lt;eday&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sscanf</span>(remp2,<span class="string">&quot;%d:%d:%d %d:%d:%d&quot;</span>,&amp;eh1,&amp;em1,&amp;es1,&amp;eh2,&amp;em2,&amp;es2);</span><br><span class="line">eday=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">es=(eh2*<span class="number">3600</span>+em2*<span class="number">60</span>+es2)-(eh1*<span class="number">3600</span>+em1*<span class="number">60</span>+es1)+eday*<span class="number">24</span>*<span class="number">3600</span>;</span><br><span class="line">ss=(sh2*<span class="number">3600</span>+sm2*<span class="number">60</span>+ss2)-(sh1*<span class="number">3600</span>+sm1*<span class="number">60</span>+ss1)+sday*<span class="number">24</span>*<span class="number">3600</span>;</span><br><span class="line">anss=(es+ss)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">figure</span><span class="params">(<span class="type">long</span> <span class="type">long</span> anss)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">h=anss/<span class="number">3600</span>;</span><br><span class="line">anss=anss%<span class="number">3600</span>;</span><br><span class="line">m=anss/<span class="number">60</span>;</span><br><span class="line">s=anss%<span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> remp1[<span class="number">100</span>],remp2[<span class="number">100</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(remp1,<span class="number">100</span>);</span><br><span class="line">cin.<span class="built_in">getline</span>(remp2,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">gettime</span>(remp1,remp2);</span><br><span class="line"><span class="built_in">delta</span>();</span><br><span class="line"><span class="built_in">figure</span>(anss);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d\n&quot;</span>, h, m, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三体攻击"><a href="#三体攻击" class="headerlink" title="三体攻击"></a>三体攻击</h3><p>这道题真的写吐血了，差分当时只会一维的，临时含泪学了二维三维，具体思路直接看代码注释<br>首先我们可以分析一下，想要随时对三维数据进行加减更新，线段树不是首选（**<del>多维线段树咱也不会</del>**），我们考虑三维差分来维护数据，但是如何找到具体是哪一次攻击造成第一艘战舰的削减？我们考虑用二分查找，来查找造成削减的攻击。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>三维差分数组肯定不能开三维数组，我们考虑一维优化</li><li>我的代码在acwing可以ac（好像样例对就可以ac？数据有点水）蓝桥杯官网提交是83分，六个过五个，最后一个样例想过必须在二分上作文章，我的二分是每次将数组清零，重新搜，数据一大就超时了</li><li>尽量用scanf读数据，我cin输入没清缓存的话只有64分，清一下就83分了，最后一个数据靠读数据是没办法了（快读试了没用)，只能在查找上做文章。</li><li><a href="https://blog.csdn.net/qq_38937133/article/details/112403275?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164614551416780264064879%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164614551416780264064879&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-112403275.pc_search_result_cache&utm_term=%E4%B8%89%E7%BB%B4%E5%B7%AE%E5%88%86&spm=1018.2226.3001.4187">ac代码(二分Pro)（我学不来）</a></li><li>acwing上的数据有点水，想测一下到底能不能过尽量去蓝桥杯官网跑一下<a href="http://lx.lanqiao.cn/problem.page?gpid=T2724">官网题目oj传送门</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2724</span></span><br><span class="line"><span class="comment">// 三维差分(一维优化)+二分</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 2000010 <span class="comment">//因 为A*B*C&lt;=10^6</span></span></span><br><span class="line"><span class="type">int</span> A, B, C, m;</span><br><span class="line"><span class="type">int</span> cha[maxn]; <span class="comment">//差分数组</span></span><br><span class="line"><span class="type">int</span> a[maxn];   <span class="comment">//通过差分数组还原的原数组</span></span><br><span class="line"><span class="type">int</span> instead[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sa, sb, sc, ea, eb, ec;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125; query[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_pos</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * B * C + b * C + c; <span class="comment">//将三维坐标优化成一维存储(该数字是第a*B*C+b*C+c个，保证一一对应)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(instead, cha, <span class="built_in">sizeof</span>(cha));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= A; i++)</span></span><br><span class="line">    <span class="comment">//     for (int j = 1; j &lt;= B; j++)</span></span><br><span class="line">    <span class="comment">//         for (int k = 1; k &lt;= C; k++)</span></span><br><span class="line">    <span class="comment">//             cout &lt;&lt; instead[get_pos(i, j, k)];</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1 = query[i].sa;</span><br><span class="line">        <span class="type">int</span> x2 = query[i].ea;</span><br><span class="line">        <span class="type">int</span> y1 = query[i].sb;</span><br><span class="line">        <span class="type">int</span> y2 = query[i].eb;</span><br><span class="line">        <span class="type">int</span> z1 = query[i].sc;</span><br><span class="line">        <span class="type">int</span> z2 = query[i].ec;</span><br><span class="line">        <span class="type">int</span> remp = query[i].cost;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y1, z1)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y1, z2 + <span class="number">1</span>)] += remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y2 + <span class="number">1</span>, z1)] += remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y1, z1)] += remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x1, y2 + <span class="number">1</span>, z2 + <span class="number">1</span>)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y1, z2 + <span class="number">1</span>)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, z1)] -= remp;</span><br><span class="line">        instead[<span class="built_in">get_pos</span>(x2 + <span class="number">1</span>, y2 + <span class="number">1</span>, z2 + <span class="number">1</span>)] += remp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= B; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= C; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[<span class="built_in">get_pos</span>(i, j, k)] = (a[<span class="built_in">get_pos</span>(i, j, k - <span class="number">1</span>)] + a[<span class="built_in">get_pos</span>(i, j - <span class="number">1</span>, k)] + a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j, k)]) - (a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j - <span class="number">1</span>, k)] + a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j, k - <span class="number">1</span>)] + a[<span class="built_in">get_pos</span>(i, j - <span class="number">1</span>, k - <span class="number">1</span>)]) + a[<span class="built_in">get_pos</span>(i - <span class="number">1</span>, j - <span class="number">1</span>, k - <span class="number">1</span>)] + instead[<span class="built_in">get_pos</span>(i, j, k)];</span><br><span class="line">                <span class="comment">// cout &lt;&lt; a[get_pos(i, j, k)] &lt;&lt; &#x27; &#x27;;</span></span><br><span class="line">                <span class="keyword">if</span> (a[<span class="built_in">get_pos</span>(i, j, k)] &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    cin &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= A; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= B; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= C; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> remp;</span><br><span class="line">                cin &gt;&gt; remp;</span><br><span class="line">                <span class="comment">//开始更新差分数组</span></span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j, k)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j, k)] -= remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j + <span class="number">1</span>, k)] -= remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j, k + <span class="number">1</span>)] -= remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j + <span class="number">1</span>, k)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j, k + <span class="number">1</span>)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i, j + <span class="number">1</span>, k + <span class="number">1</span>)] += remp;</span><br><span class="line">                cha[<span class="built_in">get_pos</span>(i + <span class="number">1</span>, j + <span class="number">1</span>, k + <span class="number">1</span>)] -= remp;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt;= A; i++)</span></span><br><span class="line">    <span class="comment">//     for (int j = 1; j &lt;= B; j++)</span></span><br><span class="line">    <span class="comment">//         for (int k = 1; k &lt;= C; k++)</span></span><br><span class="line">    <span class="comment">//             cout &lt;&lt; cha[get_pos(i, j, k)];</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; query[i].sa &gt;&gt; query[i].ea &gt;&gt; query[i].sb &gt;&gt; query[i].eb &gt;&gt; query[i].sc &gt;&gt; query[i].ec &gt;&gt; query[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = m, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot;true&quot; &lt;&lt; endl;</span></span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>; <span class="comment">//有战舰击毁，区间向左压缩</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>; <span class="comment">//没有战舰被击毁。区间向右压缩</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; &quot;false&quot; &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全球变暖"><a href="#全球变暖" class="headerlink" title="全球变暖"></a>全球变暖</h3>dfs+连通块，每次搜到陆地直接把这一个岛直接搜完，开个数组记录有没有被淹，到最后统计一下就行<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2725</span></span><br><span class="line"><span class="comment">// 深搜+连通块</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> edge[maxn][maxn];</span><br><span class="line"><span class="type">bool</span> visit[maxn][maxn];</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> num;       <span class="comment">//记录大陆个数</span></span><br><span class="line"><span class="type">int</span> ans_num;   <span class="comment">//记录未被淹没的海岛个数</span></span><br><span class="line"><span class="type">int</span> ans[maxn]; <span class="comment">// ans[i]记录第i个大陆剩余的岛屿</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (visit[x][y] == <span class="number">1</span> || edge[x][y] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rempy = y + diry[i];</span><br><span class="line">        <span class="type">int</span> rempx = x + dirx[i];</span><br><span class="line">        <span class="keyword">if</span> (edge[rempx][rempy] == <span class="number">0</span>)</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (edge[x][y] == <span class="number">1</span> &amp;&amp; flag == <span class="number">1</span>)</span><br><span class="line">        ans[num]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> rempy = y + diry[i];</span><br><span class="line">        <span class="type">int</span> rempx = x + dirx[i];</span><br><span class="line">        <span class="built_in">search</span>(rempx, rempy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (remp[j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[i][j + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                edge[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i][j] == <span class="number">1</span> &amp;&amp; visit[i][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;</span></span><br><span class="line">                <span class="built_in">search</span>(i, j);</span><br><span class="line">                <span class="keyword">if</span> (ans[num])</span><br><span class="line">                    ans_num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; num - ans_num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>二刷后的新写法，更清晰了一些<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> maze[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">1010</span>][<span class="number">1100</span>];</span><br><span class="line"><span class="type">int</span> num; <span class="comment">//原</span></span><br><span class="line"><span class="type">int</span> ans_num; <span class="comment">//剩</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> judge;</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (visit[x][y] == <span class="literal">true</span> || maze[x][y] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">visit[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx = dirx[i] + x;</span><br><span class="line"><span class="type">int</span> rempy = diry[i] + y;</span><br><span class="line"><span class="keyword">if</span> (maze[rempx][rempy] == <span class="number">0</span>)</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">judge = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rempx = dirx[i] + x;</span><br><span class="line"><span class="type">int</span> rempy = diry[i] + y;</span><br><span class="line"><span class="built_in">dfs</span>(rempx, rempy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> remp[<span class="number">10000</span>];</span><br><span class="line">cin &gt;&gt; remp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (remp[j] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">maze[i][j + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">maze[i][j + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (maze[i][j] == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (visit[i][j])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">judge = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i, j);</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span> (judge)</span><br><span class="line">ans_num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; num - ans_num;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="倍数问题"><a href="#倍数问题" class="headerlink" title="倍数问题"></a>倍数问题</h3>贪心+余数处理，数据的处理细节要注意！！！<br>思路很巧妙，直接枚举就好<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://lx.lanqiao.cn/problem.page?gpid=T2726</span></span><br><span class="line"><span class="comment">// 余数处理+贪心</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1100000</span></span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; a[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> remp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        a[remp % k].<span class="built_in">push_back</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(a[i].<span class="built_in">begin</span>(), a[i].<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;());</span><br><span class="line">        <span class="comment">// cout &lt;&lt; a[i][0] &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="type">long</span> j = <span class="number">0</span>; j &lt; k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> t = (k - (i + j) % k) % k; <span class="comment">//仍然要取余，k-i-j可能是负数,负数取余还是负数！达不到效果</span></span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() &amp;&amp; a[j].<span class="built_in">size</span>() &amp;&amp; a[t].<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; j != t &amp;&amp; i != t)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum = a[i][<span class="number">0</span>] + a[j][<span class="number">0</span>] + a[t][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == j &amp;&amp; j != t &amp;&amp; i != t)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>; <span class="comment">//假如以i为余数里面只有一个，不够用</span></span><br><span class="line">                    sum = a[i][<span class="number">0</span>] + a[i][<span class="number">1</span>] + a[t][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == t &amp;&amp; i != j &amp;&amp; t != j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    sum = a[i][<span class="number">0</span>] + a[i][<span class="number">1</span>] + a[j][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == t &amp;&amp; i != j &amp;&amp; t != i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j].<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    sum = a[j][<span class="number">0</span>] + a[j][<span class="number">1</span>] + a[i][<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == j &amp;&amp; j == t &amp;&amp; t == i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i].<span class="built_in">size</span>() &lt; <span class="number">3</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    sum = a[j][<span class="number">0</span>] + a[j][<span class="number">1</span>] + a[j][<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(sum, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>二刷后的新写法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;a[<span class="number">1010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> remp;</span><br><span class="line">cin&gt;&gt;remp;</span><br><span class="line">a[remp%k].<span class="built_in">push_back</span>(remp);</span><br><span class="line"><span class="comment">//cout&lt;&lt;remp&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;remp%k&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(a[i].<span class="built_in">begin</span>(),a[i].<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> z=(k-(i+j)%k)%k;</span><br><span class="line"><span class="comment">//cout&lt;&lt;z&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i].size()&lt;&lt;&quot; &quot;&lt;&lt;a[j].size()&lt;&lt;&quot; &quot;&lt;&lt;a[z].size()&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&amp;&amp;a[j].<span class="built_in">size</span>()&amp;&amp;a[z].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(i!=j&amp;&amp;i!=z&amp;&amp;j!=z)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[j][<span class="number">0</span>]+a[z][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[j][0]+a[z][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==j&amp;&amp;j!=z&amp;&amp;i!=z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[j][<span class="number">1</span>]+a[z][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[j][1]+a[z][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==z&amp;&amp;i!=j&amp;&amp;j!=z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[i][<span class="number">1</span>]+a[j][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[i][1]+a[j][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==z&amp;&amp;i!=j&amp;&amp;i!=z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j].<span class="built_in">size</span>()&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[j][<span class="number">0</span>]+a[j][<span class="number">1</span>]+a[i][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[j][0]+a[j][1]+a[i][0]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==j&amp;&amp;j==z&amp;&amp;i==z)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].<span class="built_in">size</span>()&lt;<span class="number">3</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">sum=<span class="built_in">max</span>(sum,a[i][<span class="number">0</span>]+a[i][<span class="number">1</span>]+a[i][<span class="number">2</span>]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;a[i][0]+a[i][1]+a[i][2]&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第九届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第九届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第九届蓝桥杯题解&quot;&gt;&lt;/a&gt;第九届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;本应该是上周就发出来的，前几天考试，鸽了两天&lt;/em&gt;&lt;br&gt;&lt;em&gt;（&lt;del&gt;生</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第十届蓝桥杯题解  2022/2/19</title>
    <link href="http://example.com/2022/04/15/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/04/15/%E7%AC%AC%E5%8D%81%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2022-04-15T02:35:24.184Z</published>
    <updated>2022-04-16T02:39:28.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十届蓝桥杯题解"><a href="#第十届蓝桥杯题解" class="headerlink" title="第十届蓝桥杯题解"></a>第十届蓝桥杯题解</h1><p><em>注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码蒟蒻当时参考其他大佬的题解文章所在的网址，鸣谢大佬，如有错误，欢迎各位大佬指正<br>有部分网址是提交答案的oj传送门</em></p><h3 id="平方和"><a href="#平方和" class="headerlink" title="平方和"></a>平方和</h3><p>直接暴力穷举，无需赘述</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67813</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp = n % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (remp == <span class="number">1</span> || remp == <span class="number">2</span> || remp == <span class="number">0</span> || remp == <span class="number">9</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2019</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">judge</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            ans1+=i;</span><br><span class="line">            ans2+=i*i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans2;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数列求和"><a href="#数列求和" class="headerlink" title="数列求和"></a>数列求和</h3><p>枚举过程中注意%1000</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=67813</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">20190328</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt;= <span class="number">20190324</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = (a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>] + a[i - <span class="number">3</span>])%<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a[<span class="number">20190324</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大降雨量"><a href="#最大降雨量" class="headerlink" title="最大降雨量"></a>最大降雨量</h3><p>一道脑筋急转弯题。我们可以这样去考虑，49天一共可以分为7组，这7组的中位数再取其中位数，可以画一个邻接矩阵，可以发现绝对比答案大的数字只有15个,那么答案是49-15</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://blog.csdn.net/linruier2017/article/details/88803441?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC%E5%8D%81%E5%B1%8AC++&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-88803441.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="number">34</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h3><p>一道bfs模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// bfs路径打印</span></span><br><span class="line"><span class="comment">// https://blog.csdn.net/ryo_218/article/details/88830082?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_paycolumn_v3&amp;utm_relevant_index=1</span></span><br><span class="line"><span class="type">int</span> m, n; <span class="comment">//长，高</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    string path;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> maze[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> dirx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;; <span class="comment">// D&lt;L&lt;R&lt;U</span></span><br><span class="line"><span class="type">int</span> diry[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> dir[<span class="number">4</span>] = &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> startx, <span class="type">int</span> starty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n &amp;&amp; y == m)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> startx, <span class="type">int</span> starty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    visit[startx][starty] = <span class="number">1</span>;</span><br><span class="line">    node p;</span><br><span class="line">    p.x = startx, p.y = starty;</span><br><span class="line">    q.<span class="built_in">push</span>(p);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>().x;</span><br><span class="line">        <span class="type">int</span> y = q.<span class="built_in">front</span>().y;</span><br><span class="line">        string way = q.<span class="built_in">front</span>().path;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(x, y, startx, starty))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; way;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> rempx = x + dirx[i];</span><br><span class="line">            <span class="type">int</span> rempy = y + diry[i];</span><br><span class="line">            string rempway = way + dir[i];</span><br><span class="line">            <span class="keyword">if</span> (maze[rempx][rempy] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; visit[rempx][rempy] == <span class="number">0</span> &amp;&amp; rempx &lt;= n &amp;&amp; rempx &gt; <span class="number">0</span> &amp;&amp; rempy &lt;= m &amp;&amp; rempy &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// cout&lt;&lt;&quot;1 &quot;;</span></span><br><span class="line">                <span class="comment">//  cout&lt;&lt;rempway&lt;&lt;endl;</span></span><br><span class="line">                visit[rempx][rempy] = <span class="number">1</span>;</span><br><span class="line">                node remp;</span><br><span class="line">                remp.x = rempx, remp.y = rempy, remp.path = rempway;</span><br><span class="line">                <span class="comment">// cout &lt;&lt; rempway &lt;&lt; endl;</span></span><br><span class="line">                q.<span class="built_in">push</span>(remp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            maze[i][j] = remp[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 样例</span></span><br><span class="line"><span class="comment">50 30</span></span><br><span class="line"><span class="comment">01010101001011001001010110010110100100001000101010</span></span><br><span class="line"><span class="comment">00001000100000101010010000100000001001100110100101</span></span><br><span class="line"><span class="comment">01111011010010001000001101001011100011000000010000</span></span><br><span class="line"><span class="comment">01000000001010100011010000101000001010101011001011</span></span><br><span class="line"><span class="comment">00011111000000101000010010100010100000101100000000</span></span><br><span class="line"><span class="comment">11001000110101000010101100011010011010101011110111</span></span><br><span class="line"><span class="comment">00011011010101001001001010000001000101001110000000</span></span><br><span class="line"><span class="comment">10100000101000100110101010111110011000010000111010</span></span><br><span class="line"><span class="comment">00111000001010100001100010000001000101001100001001</span></span><br><span class="line"><span class="comment">11000110100001110010001001010101010101010001101000</span></span><br><span class="line"><span class="comment">00010000100100000101001010101110100010101010000101</span></span><br><span class="line"><span class="comment">11100100101001001000010000010101010100100100010100</span></span><br><span class="line"><span class="comment">00000010000000101011001111010001100000101010100011</span></span><br><span class="line"><span class="comment">10101010011100001000011000010110011110110100001000</span></span><br><span class="line"><span class="comment">10101010100001101010100101000010100000111011101001</span></span><br><span class="line"><span class="comment">10000000101100010000101100101101001011100000000100</span></span><br><span class="line"><span class="comment">10101001000000010100100001000100000100011110101001</span></span><br><span class="line"><span class="comment">00101001010101101001010100011010101101110000110101</span></span><br><span class="line"><span class="comment">11001010000100001100000010100101000001000111000010</span></span><br><span class="line"><span class="comment">00001000110000110101101000000100101001001000011101</span></span><br><span class="line"><span class="comment">10100101000101000000001110110010110101101010100001</span></span><br><span class="line"><span class="comment">00101000010000110101010000100010001001000100010101</span></span><br><span class="line"><span class="comment">10100001000110010001000010101001010101011111010010</span></span><br><span class="line"><span class="comment">00000100101000000110010100101001000001000000000010</span></span><br><span class="line"><span class="comment">11010000001001110111001001000011101001011011101000</span></span><br><span class="line"><span class="comment">00000110100010001000100000001000011101000000110011</span></span><br><span class="line"><span class="comment">10101000101000100010001111100010101001010000001000</span></span><br><span class="line"><span class="comment">10000010100101001010110000000100101010001011101000</span></span><br><span class="line"><span class="comment">00111100001000010000000110111000000001000000001011</span></span><br><span class="line"><span class="comment">10000001100111010111010001000110111010101101111000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h3><p>额，这个题我的代码只能参考！~ 答案是跑不出来的 ~只能讲一下我的代码的大(cuo)概(wu)思路，首先求出p，q，求出p，q后转化为求逆元问题，再转化为求 C^d%e的问题。从网上查了很长时间也没搞懂怎么优化。直接摆烂了、、、、、<br>(数论不会我是菜鸡)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 素数筛+欧几里得拓展+快速幂</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> e;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d = <span class="number">212353</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n = <span class="number">1001733993063167141</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> C = <span class="number">20190324</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p, q;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> remp;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span> <span class="comment">//(a^b) %c</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a = a % c;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        a = a % c;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        b = b / <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">ex_gcd</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> &amp;x, <span class="type">long</span> <span class="type">long</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> d = <span class="built_in">ex_gcd</span>(b, a % b, x, y);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125; <span class="comment">//这个是解 ax+by=c的特殊解方程</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            p = i, q = n % i;</span><br><span class="line">    &#125; <span class="comment">// p,q得到</span></span><br><span class="line">    <span class="comment">// p = 891234941, q = 1123984201</span></span><br><span class="line">    <span class="comment">// 那么可得d * e % sum == 1, 这是一个典型的求解ax=c(mod b)问题。</span></span><br><span class="line">    <span class="comment">// 也就是e*d =1(mod sum)，我们可以用扩展欧几里得算法来求解</span></span><br><span class="line">    <span class="comment">// 欧几里得拓展</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x, y;</span><br><span class="line">    e = <span class="built_in">ex_gcd</span>(d, sum, x, y);</span><br><span class="line">    e = (e % sum + sum) % sum;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; e;</span></span><br><span class="line">    <span class="comment">// 现在求 C^e%d</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">fast_power</span>(C, e, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全二叉树权值"><a href="#完全二叉树权值" class="headerlink" title="完全二叉树权值"></a>完全二叉树权值</h3><p>一道数据结构概念题，只要知道完全二叉树的基本概念就迎刃而解了，0-2^1-1是第一层，2^1~2^2-1是第二层，2^2-&gt;2^2-1是第三层….以此类推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://lx.lanqiao.cn/problem.page?gpid=T2695</span></span><br><span class="line"><span class="comment">// 完全二叉树基本性质</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x7fffffff</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> root[<span class="number">100000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> limit = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; a[<span class="number">1</span>];</span><br><span class="line">    root[<span class="number">1</span>] = a[<span class="number">1</span>];</span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    limit = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        root[num] += a[i];</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> == limit)</span><br><span class="line">        &#123;</span><br><span class="line">            limit = limit * <span class="number">2</span>;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> max1 = -INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (max1 &lt;= root[i])</span><br><span class="line">        &#123;</span><br><span class="line">            max1 = root[i];</span><br><span class="line">            ans = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外卖店队列"><a href="#外卖店队列" class="headerlink" title="外卖店队列"></a>外卖店队列</h3><p>一道模拟题，如果直接以时间单位为循环入手直接TLE(别问我怎么知道的T—T)，可以考虑枚举每一订单，当商店接到订单之后才去处理它，可以大大减少时间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://lx.lanqiao.cn/problem.page?gpid=T2697</span></span><br><span class="line"><span class="comment">// 参考题解：https://blog.csdn.net/qq_26139541/article/details/121284273?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164491769216781685391475%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164491769216781685391475&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-8-121284273.first_rank_v2_pc_rank_v29&amp;utm_term=%E5%A4%96%E5%8D%96%E5%BA%97%E4%BC%98%E5%85%88%E7%BA%A7&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 模拟</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1000000</span></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; order[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n, m, t;</span><br><span class="line"><span class="type">int</span> ans[maxn];        <span class="comment">//记录每一家商店的分值</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> last[maxn]; <span class="comment">// 记录第i个商店上一次订单出现的时间</span></span><br><span class="line"><span class="type">bool</span> first[maxn];     <span class="comment">//进入优先序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; order[i].first &gt;&gt; order[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(order + <span class="number">1</span>, order + <span class="number">1</span> + m); <span class="comment">//让订单从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ts = order[i].first, id = order[i].second;</span><br><span class="line">        <span class="keyword">if</span> (ts != last[id]) <span class="comment">//防止出现同一时间同一家店的订单的影响</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[id] = ans[id] - (ts - last[id] - <span class="number">1</span>); <span class="comment">//清算从上一次订单到现在中间所下降的分值</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans[id] = <span class="built_in">max</span>(ans[id], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (ans[id] &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            first[id] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[id] += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans[id] &gt; <span class="number">5</span>)</span><br><span class="line">            first[id] = <span class="literal">true</span>;</span><br><span class="line">        last[id] = ts; <span class="comment">//更新last数组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123; <span class="comment">//将第m天统一进行更新（因为之前的操作的更新只会在有订单时更新，大部分商店ans数据仍然处于上一次订单更新状态）</span></span><br><span class="line">        <span class="keyword">if</span> (last[i] != t)</span><br><span class="line">            ans[i] = ans[i] - (t - last[i]);</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &lt;= <span class="number">3</span>) </span><br><span class="line">            first[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (first[i])</span><br><span class="line">            res++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷的时候用了结构体存数据，思路更清晰了一些</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> lastcall;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">bool</span> flag;<span class="comment">//记录是否在优先序列 </span></span><br><span class="line">&#125;shop[<span class="number">100010</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> time;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">&#125;ding[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(node2 a,node2 b)</span> <span class="comment">//排订单 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.time!=b.time)</span><br><span class="line"><span class="keyword">return</span> a.time&lt;b.time;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> time,id;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;time,&amp;id);</span><br><span class="line">ding[i].time=time;</span><br><span class="line">ding[i].id=id;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">sort</span>(ding+<span class="number">1</span>,ding+<span class="number">1</span>+m,cmp1);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id=ding[i].id;</span><br><span class="line"><span class="type">int</span> time=ding[i].time;</span><br><span class="line"><span class="keyword">if</span>(shop[id].lastcall!=time)</span><br><span class="line">&#123;</span><br><span class="line">shop[id].ans-=(time<span class="number">-1</span>-shop[id].lastcall); <span class="comment">//有订单的时候，不减反增 </span></span><br><span class="line">&#125;</span><br><span class="line">shop[id].ans=<span class="built_in">max</span>(shop[id].ans,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(shop[id].flag&amp;&amp;shop[id].ans&lt;=<span class="number">3</span>)</span><br><span class="line">shop[id].flag=<span class="literal">false</span>;</span><br><span class="line">shop[id].ans+=<span class="number">2</span>;</span><br><span class="line">shop[id].lastcall=time;</span><br><span class="line"><span class="keyword">if</span>(shop[id].ans&gt;<span class="number">5</span>)</span><br><span class="line">shop[id].flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//更新最后一天 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(shop[i].lastcall!=t)</span><br><span class="line">&#123;</span><br><span class="line">shop[i].ans-=(t-shop[i].lastcall); <span class="comment">//有订单的时候，不减反增 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//shop[id].ans=max(shop[id].ans,0);</span></span><br><span class="line"><span class="keyword">if</span>(shop[i].flag&amp;&amp;shop[i].ans&lt;=<span class="number">3</span>)</span><br><span class="line">shop[i].flag=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(shop[i].flag)</span><br><span class="line">res++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第十届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第十届蓝桥杯题解&quot;&gt;&lt;/a&gt;第十届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第十一届蓝桥杯题解  2022/2/19</title>
    <link href="http://example.com/2022/04/15/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/04/15/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2022-04-15T02:33:41.885Z</published>
    <updated>2022-04-16T02:39:29.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十一届蓝桥杯题解"><a href="#第十一届蓝桥杯题解" class="headerlink" title="第十一届蓝桥杯题解"></a>第十一届蓝桥杯题解</h1><p><em>注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码蒟蒻当时参考其他大佬的题解文章所在的网址，鸣谢大佬，如有错误，欢迎各位大佬指正<br>有部分网址是提交答案的oj传送门</em></p><h3 id="门牌制作"><a href="#门牌制作" class="headerlink" title="门牌制作"></a>门牌制作</h3><p>直接枚举即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://oj.ecustacm.cn/problem.php?id=1508</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">10</span>==<span class="number">2</span>)</span><br><span class="line">            a++;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=<span class="built_in">find</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="既约分数"><a href="#既约分数" class="headerlink" title="既约分数"></a>既约分数</h3><p>直接从头开始枚举即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y!=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(y,x%y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2020</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2020</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gcd</span>(i,j)==<span class="number">1</span>)</span><br><span class="line">ans++;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蛇形填数"><a href="#蛇形填数" class="headerlink" title="蛇形填数"></a>蛇形填数</h3><p>一道很经典的题，很多oj上都有的练习题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://oj.ecustacm.cn/problem.php?id=1510</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++)</span><br><span class="line">        ans+=(i*<span class="number">4</span>);</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者直接用数学公式计算，算出通项公式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 规律：设a(n)是n行h列的元素， a(n)-a(n-1)=4*(n-1)</span></span><br><span class="line"><span class="comment">// a(n)=2*n*(n-1)+1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">2</span>*<span class="number">20</span>*<span class="number">19</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七段码"><a href="#七段码" class="headerlink" title="七段码"></a>七段码</h3><p>一道深搜回溯问题，首先用dfs(1)到dfs(7)利用回溯多层递归将所有的点亮方式枚举，然后在dfs(8)中对每一层的不同种情况进行judge判断即可<br>实质上是之前的递归将所有的可能情况进行罗列，在最后一层递归中进行判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://oj.ecustacm.cn/problem.php?id=1511</span></span><br><span class="line"><span class="comment">// dfs+并查集+回溯</span></span><br><span class="line"><span class="comment">// 思路：首先用dfs(1)到dfs(7)利用回溯多层递归将所有的点亮方式枚举</span></span><br><span class="line"><span class="comment">// 然后在dfs(8)中对每一层的不同种情况进行judge判断即可</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> father[<span class="number">8</span>]; <span class="comment">//并查集数组</span></span><br><span class="line"><span class="type">int</span> use[<span class="number">8</span>];    <span class="comment">//判断是否点亮</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[<span class="number">1</span>][<span class="number">2</span>] = edge[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">2</span>][<span class="number">1</span>] = edge[<span class="number">2</span>][<span class="number">7</span>] = edge[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">3</span>][<span class="number">2</span>] = edge[<span class="number">3</span>][<span class="number">4</span>] = edge[<span class="number">3</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">4</span>][<span class="number">3</span>] = edge[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">5</span>][<span class="number">4</span>] = edge[<span class="number">5</span>][<span class="number">6</span>] = edge[<span class="number">5</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">    edge[<span class="number">6</span>][<span class="number">1</span>] = edge[<span class="number">6</span>][<span class="number">5</span>] = edge[<span class="number">6</span>][<span class="number">7</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    father[<span class="built_in">find</span>(x)] = father[<span class="built_in">find</span>(y)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">        father[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge[i][j] &amp;&amp; use[i] &amp;&amp; use[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> fa1 = <span class="built_in">find</span>(i);</span><br><span class="line">                <span class="type">int</span> fa2 = <span class="built_in">find</span>(j);</span><br><span class="line">                <span class="keyword">if</span> (fa1 != fa2)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">connect</span>(fa1, fa2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (use[i] &amp;&amp; father[i] == i)</span><br><span class="line">            count++;</span><br><span class="line">    &#125;<span class="comment">//将所有的亮灯都连起来，看看是不是相连</span></span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>)</span><br><span class="line">        ans++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">judge</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    use[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>);</span><br><span class="line">    use[n] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(n + <span class="number">1</span>); <span class="comment">//回溯！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">input</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回文数日期"><a href="#回文数日期" class="headerlink" title="回文数日期"></a>回文数日期</h3><p>呃，用了内置的函数，在c语言网上是ac的，但是蓝桥杯的官网直接编译错误，可能是蓝桥杯编译器版本问题，仅供参考</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.dotcpp.com/oj/problem2571.html</span></span><br><span class="line"><span class="comment">// 用到了C++自带的转换函数，在C语言网的oj能过，但是蓝桥杯的oj跑不了，嘛，当拓展思维了</span></span><br><span class="line"><span class="type">int</span> ji[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="type">int</span> run[<span class="number">13</span>] = &#123;<span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(string tar)</span> <span class="comment">//判断一个日期是否合法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string y = tar.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    string m = tar.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">    string d = tar.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> year, month, day;</span><br><span class="line">    <span class="keyword">if</span> (!y.<span class="built_in">empty</span>())</span><br><span class="line">        year = <span class="built_in">stoi</span>(y);</span><br><span class="line">    <span class="keyword">if</span> (!m.<span class="built_in">empty</span>())</span><br><span class="line">        month = <span class="built_in">stoi</span>(m);</span><br><span class="line">    <span class="keyword">if</span> (!d.<span class="built_in">empty</span>())</span><br><span class="line">        day = <span class="built_in">stoi</span>(d);</span><br><span class="line">    <span class="keyword">if</span> ((year % <span class="number">100</span> != <span class="number">0</span> &amp;&amp; year % <span class="number">4</span> == <span class="number">0</span>) || year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (month &lt;= <span class="number">12</span> &amp;&amp; month &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (day &lt;= run[month] &amp;&amp; day &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (month &lt;= <span class="number">12</span> &amp;&amp; month &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (day &lt;= ji[month] &amp;&amp; day &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    string now;</span><br><span class="line">    cin &gt;&gt; now;</span><br><span class="line">    <span class="type">int</span> start2 = <span class="built_in">stoi</span>(now.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="type">int</span> start1 = <span class="built_in">stoi</span>(now.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start1; i &lt;= <span class="number">9999</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        string front = <span class="built_in">to_string</span>(i);</span><br><span class="line">        string after = front;</span><br><span class="line">        <span class="built_in">reverse</span>(after.<span class="built_in">begin</span>(), after.<span class="built_in">end</span>());</span><br><span class="line">        string a = front + after;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= now)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(a))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start2; i &lt;= <span class="number">99</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string front = <span class="built_in">to_string</span>(i);</span><br><span class="line">        string after = front;</span><br><span class="line">        <span class="built_in">reverse</span>(after.<span class="built_in">begin</span>(), after.<span class="built_in">end</span>());</span><br><span class="line">        string a = front + front;</span><br><span class="line">        a += after;</span><br><span class="line">        a += after;</span><br><span class="line">        <span class="keyword">if</span> (a &lt;= now)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(a))</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;judge(now);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="成绩分析"><a href="#成绩分析" class="headerlink" title="成绩分析"></a>成绩分析</h3><p>按步模拟即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.dotcpp.com/oj/problem2591.html</span></span><br><span class="line"><span class="comment">// 注意四舍五入的写法</span></span><br><span class="line"><span class="comment">// ans1 = lower_bound(a + 1, a + 1 + n, 85) - a-1;</span></span><br><span class="line"><span class="comment">// 后面要多减去1，因为数组从1开始存数</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">int</span> ans1 = <span class="built_in">lower_bound</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + n, <span class="number">85</span>) - a<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> ans2 = <span class="built_in">lower_bound</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, <span class="number">60</span>) - a<span class="number">-1</span>;</span><br><span class="line">    <span class="type">double</span> a1=n-ans1;</span><br><span class="line">    <span class="type">double</span> a2=n-ans2;</span><br><span class="line">    a1=a1/n*<span class="number">100</span>;</span><br><span class="line">    a2=a2/n*<span class="number">100</span>;</span><br><span class="line">    a2=<span class="built_in">int</span>(a2+<span class="number">0.5</span>);</span><br><span class="line">    a1=<span class="built_in">int</span>(a1+<span class="number">0.5</span>);</span><br><span class="line">    cout&lt;&lt;a2&lt;&lt;<span class="string">&quot;%&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;a1&lt;&lt;<span class="string">&quot;%&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平面分析"><a href="#平面分析" class="headerlink" title="平面分析"></a>平面分析</h3><p>一道数学题，直接搬公式即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十一届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第十一届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第十一届蓝桥杯题解&quot;&gt;&lt;/a&gt;第十一届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第十二届蓝桥杯题解  2022/2/19</title>
    <link href="http://example.com/2022/04/15/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/04/15/%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%B1%8A%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A3/</id>
    <published>2022-04-15T02:26:59.523Z</published>
    <updated>2022-04-16T02:39:09.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第十二届蓝桥杯题解"><a href="#第十二届蓝桥杯题解" class="headerlink" title="第十二届蓝桥杯题解"></a>第十二届蓝桥杯题解</h1><p><em>注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址是该代码蒟蒻当时参考其他大佬的题解文章所在的网址，鸣谢大佬，如有错误，欢迎各位大佬指正<br>有部分网址是提交答案的oj传送门</em></p><h3 id="A-卡片"><a href="#A-卡片" class="headerlink" title="A 卡片"></a>A 卡片</h3><p>暴力枚举即可，注意小错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.lanqiao.cn/courses/2786/learning/?id=280825</span></span><br><span class="line"><span class="comment">// 3181</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp = n % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[remp] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        a[remp]--;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="number">2021</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">judge</span>(num+<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-直线"><a href="#B-直线" class="headerlink" title="B 直线"></a>B 直线</h3><p>这道题想了很久，没有想到特别好的办法，只能暴力枚举。<br>注意当斜率不存在时要单独讨论，最后加上，否则会出bug</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">&#125; point[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">map&lt;pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;, <span class="type">bool</span>&gt; visit;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge</span><span class="params">(node p1, node p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x1 = p1.x, x2 = p2.x;</span><br><span class="line">    <span class="type">double</span> y1 = p1.y, y2 = p2.y;</span><br><span class="line">    <span class="keyword">if</span> (x1 == x2)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">double</span> k = (y2 - y1) / (x2 - x1);</span><br><span class="line">    <span class="type">double</span> b = (x2 * y1 - y2 * x1) / (x2 - x1);</span><br><span class="line">    <span class="keyword">if</span> (!visit[&#123;k, b&#125;])</span><br><span class="line">    &#123;</span><br><span class="line">        visit[&#123;k, b&#125;] = <span class="number">1</span>;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">21</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            point[++num].x = i;</span><br><span class="line">            point[num].y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">judge</span>(point[i], point[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans + <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二刷后的代码，更精简了一些</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt;, <span class="type">bool</span>&gt; line;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x1 = <span class="number">0</span>; x1 &lt; <span class="number">20</span>; x1++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> y1 = <span class="number">0</span>; y1 &lt; <span class="number">21</span>; y1++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> x2 = <span class="number">0</span>; x2 &lt; <span class="number">20</span>; x2++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">double</span> y2 = <span class="number">0</span>; y2 &lt; <span class="number">21</span>; y2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x1 == x2)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="type">double</span> k = (y1 - y2) / (x1 - x2);</span><br><span class="line"><span class="type">double</span> b = (y2 * x1 - y1 * x2) / (x2 - x1);</span><br><span class="line"><span class="keyword">if</span> (!line[&#123;k, b&#125;])</span><br><span class="line">ans++;</span><br><span class="line">line[&#123;k, b&#125;] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-货物摆放"><a href="#C-货物摆放" class="headerlink" title="C 货物摆放"></a>C 货物摆放</h3><p>可以考虑将所有的因数直接枚举，然后三重循环判断即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tar = <span class="number">2021041820210418</span>;</span><br><span class="line">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> remp = tar;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(remp); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (remp % i == <span class="number">0</span>)</span><br><span class="line">        &#123; </span><br><span class="line">            a.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i * i != remp)</span><br><span class="line">                a.<span class="built_in">push_back</span>(remp / i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; k++)</span><br><span class="line">                <span class="keyword">if</span> (a[i] * a[j] * a[k] == tar)</span><br><span class="line">                    ans++;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-路径"><a href="#D-路径" class="headerlink" title="D 路径"></a>D 路径</h3><p>额，这道题就是最短路问题，弗洛伊德会超时，但是问题不大(反正可以等答案出来之后再交一个答案上去)。迪杰斯特拉似乎不会超时，两种解法都粘在下面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// floyed算法(会超时大概一分钟之后得到答案/捂脸）)</span></span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 答案：10266837</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">2030</span>][<span class="number">2030</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">gcd</span>(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt; <span class="number">21</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> cost = <span class="built_in">lcm</span>(i, j);</span><br><span class="line">            edge[i][j] = cost;</span><br><span class="line">            edge[j][i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2021</span>; k++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[i][j] = <span class="built_in">min</span>(edge[i][k] + edge[k][j], edge[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">    cout&lt;&lt;edge[<span class="number">1</span>][<span class="number">2021</span>];</span><br><span class="line">    <span class="comment">// cout&lt;&lt;lcm(3,5);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 迪杰斯特拉算法(首次使用紫书模板)</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="type">int</span> edge[<span class="number">2030</span>][<span class="number">2030</span>];</span><br><span class="line"><span class="type">int</span> path[<span class="number">2030</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">2030</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="built_in">gcd</span>(x, y) * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(edge, INF, <span class="built_in">sizeof</span>(edge));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j - i &gt; <span class="number">21</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> cost = <span class="built_in">lcm</span>(i, j);</span><br><span class="line">            edge[i][j] = cost;</span><br><span class="line">            edge[j][i] = cost;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 算法开始</span></span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">    <span class="built_in">memset</span>(path, INF, <span class="built_in">sizeof</span>(path));</span><br><span class="line">    path[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2021</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> start, min1 = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[j] &amp;&amp; path[j] &lt;= min1)</span><br><span class="line">            &#123;</span><br><span class="line">                min1 = path[j];</span><br><span class="line">                start = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[start] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">2021</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            path[j] = <span class="built_in">min</span>(path[j], path[start] + edge[start][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; path[<span class="number">2021</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-回路数"><a href="#E-回路数" class="headerlink" title="E 回路数"></a>E 回路数</h3><p>这道题是状态压缩数组，具体注释看代码，更直观</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/qq_36306833/article/details/121872050</span></span><br><span class="line"><span class="comment">// 题解：https://blog.csdn.net/weixin_50533561/article/details/122753240?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164440729916780264043462%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164440729916780264043462&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-122753240.first_rank_v2_pc_rank_v29&amp;utm_term=%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%9B%9E%E8%B7%AF%E8%AE%A1%E6%95%B0&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 状压dp</span></span><br><span class="line"><span class="type">bool</span> edge[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">22</span>, M = <span class="number">1</span> &lt;&lt; <span class="number">21</span>; <span class="comment">// 即M为二进制10000...000(21个0), M-1 = 21个1</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[M][<span class="number">30</span>];           <span class="comment">// dp[i][j]代表状态为i时,走到第j个点时此时的方案数</span></span><br><span class="line"><span class="comment">// 数组要long long，否则溢出(别问我怎么知道的T_T)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gcd</span>(x, y) == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">21</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">21</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">judge</span>(i, j))</span><br><span class="line">                edge[i][j] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 状压dp</span></span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;                                                          <span class="comment">//从1号点出发，此时状态为00000...0001</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= M - <span class="number">1</span>; i++)                                       <span class="comment">// M-1后为111....11111(21个1)，枚举所有状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">21</span>; j++)                                      <span class="comment">//枚举1-21点</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; (j - <span class="number">1</span>) &amp; <span class="number">1</span>)                                          <span class="comment">//从左边数第j个，此时若为真，则代表该状态中从左数第j个已走过</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">21</span>; k++)                              <span class="comment">//若状态中含有该点，则枚举j联通的点，寻找以k为中转到达j点</span></span><br><span class="line">                    <span class="keyword">if</span> (edge[k][j] &amp;&amp; (i - (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))) &gt;&gt; (k - <span class="number">1</span>) &amp; <span class="number">1</span>) <span class="comment">//在未走j之前，状态为 i-(1&lt;&lt;j) 判断是否走过k点</span></span><br><span class="line">                    <span class="comment">//(i - (1 &lt;&lt; (j - 1))) &gt;&gt; k &amp; 1)判断i状态时没走j是否走了k</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        dp[i][j] += dp[(i - (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>)))][k]; <span class="comment">//若走过k，说明到达j的状态i可以由挖去j但是含有k的状态完成</span></span><br><span class="line">                    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">21</span>; i++) <span class="comment">// dp[1111111..1111][i]代表最终走完并且终点为i点的情况</span></span><br><span class="line">    <span class="comment">//要从i=2开始！因为终点不可能是起点！</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans += dp[M - <span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-砝码称重"><a href="#F-砝码称重" class="headerlink" title="F 砝码称重"></a>F 砝码称重</h3><p>类背包，暴力枚举即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://blog.csdn.net/m0_46260869/article/details/115838370?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164441437816780366563231%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164441437816780366563231&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-115838370.first_rank_v2_pc_rank_v29&amp;utm_term=%E7%A0%9D%E7%A0%81%E7%A7%B0%E9%87%8D&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 类背包问题+dp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 200000</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> cost[<span class="number">110</span>];</span><br><span class="line"><span class="type">bool</span> dp[<span class="number">110</span>][maxn]; <span class="comment">// dp[i][j]代表重量j能否由前i个砝码称出</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; cost[i], sum += cost[i];</span><br><span class="line">    <span class="comment">// sum为上界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)       <span class="comment">//枚举1-n个物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= sum; j++) <span class="comment">//枚举所有可能重量</span></span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j]; <span class="comment">//之前能称的，现在仍然可以称</span></span><br><span class="line">            <span class="keyword">if</span> (dp[i<span class="number">-1</span>][j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (cost[i] == j)</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j + cost[i]])</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][<span class="built_in">abs</span>(j - cost[i])])</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sum; i++)</span><br><span class="line">        <span class="keyword">if</span> (dp[n][i])</span><br><span class="line">            ans++;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-左儿子右兄弟"><a href="#F-左儿子右兄弟" class="headerlink" title="F 左儿子右兄弟"></a>F 左儿子右兄弟</h3><p>树形dp<br>关键是：对于任意一个子节点，它的最大深度是子节点的子树最大深度+儿子数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 题解：https://blog.csdn.net/qq_52652816/article/details/122333311?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%B7%A6%E5%AD%A9%E5%AD%90%E5%8F%B3%E5%85%84%E5%BC%9F&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-122333311.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 如果我们把&gt;2的兄弟节点标号排序的话，那么标号在最后一个节点它的深度是最大的，整棵任意节点的高度就等于高度加深度，所以如果我们想要获得更大的高度，只需要把高度最大的那个节点找出来，将它放到最后一个即可。</span></span><br><span class="line"><span class="comment">// 这样的话，递归关系就出来了，找到高度最大的孩子节点，加上它距离原来的父节点的深度</span></span><br><span class="line"><span class="comment">// 知识点：树形dp</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">1000090</span>]; <span class="comment">// dp[i]代表第i个结点当根节点时，此时以它为结点的子树的深度最大为多少</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span>  <span class="comment">// x为当前节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=edge[x].<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> max1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)<span class="comment">//寻找子树高度最大的子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> son=edge[x][i];</span><br><span class="line">        <span class="built_in">dfs</span>(son);</span><br><span class="line">        max1=<span class="built_in">max</span>(max1,dp[son]);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[x]=max1+len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        edge[remp].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; dp[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第十二届蓝桥杯题解&quot;&gt;&lt;a href=&quot;#第十二届蓝桥杯题解&quot; class=&quot;headerlink&quot; title=&quot;第十二届蓝桥杯题解&quot;&gt;&lt;/a&gt;第十二届蓝桥杯题解&lt;/h1&gt;&lt;p&gt;&lt;em&gt;注释：这段时间正好在写蓝桥杯的题，将部分的题目的解法和大家分享，代码中的网址</summary>
      
    
    
    
    <category term="蓝桥杯" scheme="http://example.com/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World！2022/4/14</title>
    <link href="http://example.com/2022/04/13/hello-world/"/>
    <id>http://example.com/2022/04/13/hello-world/</id>
    <published>2022-04-13T13:18:55.440Z</published>
    <updated>2022-04-16T02:42:01.281Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2022-4-14"><a href="#2022-4-14" class="headerlink" title="2022/4/14"></a>2022/4/14</h3><p>欢迎！</p><p>我的一小步 <del>人类的一大步</del>(误)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;2022-4-14&quot;&gt;&lt;a href=&quot;#2022-4-14&quot; class=&quot;headerlink&quot; title=&quot;2022/4/14&quot;&gt;&lt;/a&gt;2022/4/14&lt;/h3&gt;&lt;p&gt;欢迎！&lt;/p&gt;
&lt;p&gt;我的一小步 &lt;del&gt;人类的一大步&lt;/del&gt;(误)&lt;/p&gt;
</summary>
      
    
    
    
    <category term="随笔杂谈" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="回忆" scheme="http://example.com/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
</feed>
