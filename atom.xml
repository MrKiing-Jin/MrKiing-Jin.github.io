<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蜡笔小金QAQ的个人主页</title>
  
  <subtitle>Re0:从零开始的IT码农生活</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-12T10:08:59.888Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蜡笔小金QAQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>暑假集训week4</title>
    <link href="http://example.com/2022/08/12/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-week4/"/>
    <id>http://example.com/2022/08/12/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-week4/</id>
    <published>2022-08-12T09:35:46.594Z</published>
    <updated>2022-08-12T10:08:59.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暑假集训-week4题解-暑假结构进阶"><a href="#暑假集训-week4题解-暑假结构进阶" class="headerlink" title="暑假集训-week4题解-暑假结构进阶"></a>暑假集训-week4题解-暑假结构进阶</h1><h3 id="A-ST-表"><a href="#A-ST-表" class="headerlink" title="A - ST 表"></a>A - ST 表</h3><p><img src="https://img-blog.csdnimg.cn/55afdc8740db459da5cdbc688563f3ff.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/a4216fbcab104331a87d54ea78bac850.png" alt="在这里插入图片描述"><br>ST</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3865</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[maxn], f[maxn][<span class="number">100</span>]; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ST_prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        f[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; t; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j - <span class="number">1</span>], f[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ST_query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f[l][k], f[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">ST_prework</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        l = <span class="built_in">read</span>(), r = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>,<span class="built_in">ST_query</span>(l,r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-并查集"><a href="#B-并查集" class="headerlink" title="B - 并查集"></a>B - 并查集</h3><p><img src="https://img-blog.csdnimg.cn/e2e108f037ec441f974b906fe6243b06.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3367</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)] = fa[<span class="built_in">find</span>(y)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> flag, x, y;</span><br><span class="line">        cin &gt;&gt; flag &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">connect</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y))</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Y&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;N&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-字符串哈希"><a href="#C-字符串哈希" class="headerlink" title="C - 字符串哈希"></a>C - 字符串哈希</h3><p><img src="https://img-blog.csdnimg.cn/94bc954d32f34cd5ae38b86251f3a828.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3370</span></span><br><span class="line">map&lt;string, <span class="type">bool</span>&gt; visit;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        string remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">if</span> (!visit[remp])</span><br><span class="line">            visit[remp] = <span class="literal">true</span>, num++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; num;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-统计难题"><a href="#D-统计难题" class="headerlink" title="D - 统计难题"></a>D - 统计难题</h3><p><img src="https://img-blog.csdnimg.cn/78199c0cde634be386c20ea2059f8c06.png" alt="在这里插入图片描述"></p><p>trie模板题，trie挺有用的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://vjudge.csgrandeur.cn/contest/509181#problem/D</span></span><br><span class="line"><span class="comment">// Trie字典树</span></span><br><span class="line"><span class="type">int</span> trie[<span class="number">1000100</span>][<span class="number">26</span>], cnt[<span class="number">1000100</span>], tot;</span><br><span class="line">string remp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = tar.<span class="built_in">length</span>(), node = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ch = tar[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (trie[node][ch] == <span class="number">0</span>)</span><br><span class="line">            trie[node][ch] = ++tot;</span><br><span class="line">        node = trie[node][ch];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[node]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(string tar)</span> <span class="comment">//查询以此字串开头的串有多少个</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> node = <span class="number">0</span>, ans = <span class="number">0</span>, len = tar.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ch = tar[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        node = trie[node][ch];</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        ans += cnt[node];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; remp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">insert</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; remp)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">query</span>(remp) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-树状数组-1"><a href="#E-树状数组-1" class="headerlink" title="E - 树状数组 1"></a>E - 树状数组 1</h3><p><img src="https://img-blog.csdnimg.cn/6bef81b252b44bfd9102701affdd8134.png" alt="在这里插入图片描述"><br>树状数组模板题<br>单点修改区间询问<br>假如要单点询问的话用树状数组再维护一个差分数组就行了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3374</span></span><br><span class="line"><span class="comment">// 树状数组</span></span><br><span class="line"><span class="comment">// 单点修改，区间询问</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">int</span> tree_array[maxn];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; x &lt;= n; x += x &amp; -x)</span><br><span class="line">        tree_array[x] += y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> r)</span> <span class="comment">//求1到r之间的前缀和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; r; r -= r &amp; -r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += tree_array[r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ask</span>(r) - <span class="built_in">ask</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="built_in">add</span>(i, remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp, x, y;</span><br><span class="line">        cin &gt;&gt; remp &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (remp == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">add</span>(x, y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(x, y) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-线段树-1"><a href="#F-线段树-1" class="headerlink" title="F - 线段树 1"></a>F - 线段树 1</h3><p><img src="https://img-blog.csdnimg.cn/e794fac9c5e742659caaf450e30d8982.png" alt="在这里插入图片描述"><br>模板题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 线段树</span></span><br><span class="line"><span class="comment">// 区间询问，区间修改(RMQ)</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3372</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tree[<span class="number">4</span> * maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> lazy[<span class="number">4</span> * maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lazy[x] == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    lazy[x &lt;&lt; <span class="number">1</span>] += lazy[x], tree[x &lt;&lt; <span class="number">1</span>] += lazy[x] * (mid - left + <span class="number">1</span>);</span><br><span class="line">    lazy[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[x], tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += lazy[x] * (right - mid);</span><br><span class="line">    lazy[x] = <span class="number">0</span>; <span class="comment">//该节点已结算</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right)</span> <span class="comment">// x为堆数组编号，left与right代表其维护的区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] = a[left];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, left, mid);</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right);</span><br><span class="line">    tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> tar_left, <span class="type">int</span> tar_right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == tar_left &amp;&amp; right == tar_right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(x, left, right);</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> leftans = <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, mid);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> rightans = <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, mid + <span class="number">1</span>, tar_right);</span><br><span class="line">        <span class="keyword">return</span> leftans + rightans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, left, mid, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &gt; mid &amp;&amp; tar_right &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, right, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> tar_left, <span class="type">int</span> tar_right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == tar_left &amp;&amp; right == tar_right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] += (right - left + <span class="number">1</span>) * y;</span><br><span class="line">        lazy[x] += y; <span class="comment">//懒数组标记！</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(x, left, right);</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, y, left, mid, tar_left, mid);</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, y, mid + <span class="number">1</span>, right, mid + <span class="number">1</span>, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &lt;= mid &amp;&amp; tar_right &lt;= mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, y, left, mid, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tar_left &gt; mid &amp;&amp; tar_right &gt; mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, y, mid + <span class="number">1</span>, right, tar_left, tar_right);</span><br><span class="line">    &#125;</span><br><span class="line">    tree[x] = tree[x &lt;&lt; <span class="number">1</span>] + tree[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="keyword">if</span> (remp == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x, y, k;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, k, <span class="number">1</span>, n, x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (remp == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x, y;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-Palindrome"><a href="#G-Palindrome" class="headerlink" title="G - Palindrome"></a>G - Palindrome</h3><p><img src="https://img-blog.csdnimg.cn/20804883b4384f14bda7bd82d0d35afb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dd68e6c15b6b480fa08f5e80c7b003cf.png" alt="在这里插入图片描述"><br>hash加二分搜索答案，思路挺巧妙的<br>注意下反向hash是怎么存的 (知识增加)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://vjudge.csgrandeur.cn/contest/509181#problem/G</span></span><br><span class="line"><span class="comment">// 字符串哈希《蓝书》P67</span></span><br><span class="line"><span class="comment">// 题解：https://www.acwing.com/solution/content/125631/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2000010</span>, P = <span class="number">131</span>;</span><br><span class="line"><span class="type">char</span> s[maxn];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> h1[maxn], h2[maxn], p[maxn];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">get</span><span class="params">(<span class="type">long</span> <span class="type">long</span> h[], <span class="type">long</span> <span class="type">long</span> l, <span class="type">long</span> <span class="type">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>) &amp;&amp; <span class="built_in">strcmp</span>(s + <span class="number">1</span>, <span class="string">&quot;END&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i; i -= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s[i] = s[i / <span class="number">2</span>];</span><br><span class="line">            s[i - <span class="number">1</span>] = <span class="string">&#x27;z&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = n; i &lt;= n; i++, j--)</span><br><span class="line">        &#123;</span><br><span class="line">            h1[i] = h1[i - <span class="number">1</span>] * P + s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">            h2[i] = h2[i - <span class="number">1</span>] * P + s[j] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>; <span class="comment">//倒着存进去了</span></span><br><span class="line">            p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> x = <span class="number">-1</span>, l = <span class="number">0</span>, r = <span class="built_in">min</span>(i - <span class="number">1</span>, n - i);</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">get</span>(h1, i - mid, i - <span class="number">1</span>) != <span class="built_in">get</span>(h2, n - (i + mid) + <span class="number">1</span>, n - i))</span><br><span class="line">                &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    x = mid;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s[i - x] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, x + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>, ++cnt, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-The-XOR-Largest-Pair"><a href="#H-The-XOR-Largest-Pair" class="headerlink" title="H - The XOR Largest Pair"></a>H - The XOR Largest Pair</h3><p><img src="https://img-blog.csdnimg.cn/fa3b7173bd7a43feac4b4c6247636104.png" alt="在这里插入图片描述"><br>trie的题<br>思路是将输入的数字想象成一个01的字符串，我们考虑贪心策略，组数字的时候尽可能让这个数字的二进制对应位置都不一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// tire树(01 trie树)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="type">int</span> n, a[maxn], tot;</span><br><span class="line"><span class="type">int</span> trie[<span class="number">1000000</span>][<span class="number">2</span>]; <span class="comment">//每一位要么是0要么是1</span></span><br><span class="line"><span class="comment">// trie[x][y]的值是下一个节点的编号，x是当前编号，y是当前位置的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;                    <span class="comment">// root节点,用于移动的指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) <span class="comment">//二进制从第0位开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp = x &gt;&gt; i &amp; <span class="number">1</span>; <span class="comment">//取出第i位 (从高位开始传)</span></span><br><span class="line">        <span class="keyword">if</span> (trie[p][remp] == <span class="number">0</span>)</span><br><span class="line">            trie[p][remp] = ++tot; <span class="comment">//指针只想这里</span></span><br><span class="line">        p = trie[p][remp];         <span class="comment">//将当前指针对准这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;        <span class="comment">//用于移动的指针</span></span><br><span class="line">    <span class="type">int</span> temp_ans = <span class="number">0</span>; <span class="comment">//本次搜索到最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 取贪心策略，我们尽量走相反位置</span></span><br><span class="line">        <span class="type">int</span> remp = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (trie[p][remp ^ <span class="number">1</span>]) <span class="comment">//如果相反节点存在，直接跳过去</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = trie[p][remp ^ <span class="number">1</span>];</span><br><span class="line">            temp_ans += (<span class="number">1</span> &lt;&lt; i); <span class="comment">//此位置确定是1，可以上去了！</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = trie[p][remp]; <span class="comment">//没有的话就原节点继续</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp_ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="built_in">insert</span>(x);</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">search</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I-食物链"><a href="#I-食物链" class="headerlink" title="I - 食物链"></a>I - 食物链</h3><p><img src="https://img-blog.csdnimg.cn/25c4c55334f5406d9cf4351ef2161c3b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a136ceff6969486996eaca1d86fe9fe5.png" alt="在这里插入图片描述"><br>并查集的拓展域做法，很巧妙的解法！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">3e6</span>;</span><br><span class="line"><span class="type">int</span> N, K, fa[<span class="number">200000</span>];</span><br><span class="line"><span class="comment">// 拓展域做法</span></span><br><span class="line"><span class="comment">// fa[x]代表本类，fa[x+N]代表捕食类，fa[x+2n]代表天敌</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] != x)</span><br><span class="line">        <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)] = fa[<span class="built_in">find</span>(y)];</span><br><span class="line">    <span class="comment">// fa[find(x)] = find(y);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N * <span class="number">3</span>; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> opt, x, y;</span><br><span class="line">        cin &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; N || y &gt; N)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(x + N) == <span class="built_in">find</span>(y) || <span class="built_in">find</span>(y + N) == <span class="built_in">find</span>(x)) <span class="comment">// x吃y，或者y吃x</span></span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">connect</span>(x, y);</span><br><span class="line">                <span class="built_in">connect</span>(x + N, y + N);</span><br><span class="line">                <span class="built_in">connect</span>(x + N + N, y + N + N);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opt == <span class="number">2</span>) <span class="comment">// X 吃 Y</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(y + N) == <span class="built_in">find</span>(x) || <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y)) <span class="comment">//如果y的捕食域有x，或者同类</span></span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">connect</span>(x + N, y);         <span class="comment">// x的捕食域放入y</span></span><br><span class="line">                <span class="built_in">connect</span>(y + N + N, x);     <span class="comment">// y的天敌域放入x</span></span><br><span class="line">                <span class="built_in">connect</span>(y + N, x + N + N); <span class="comment">// y的捕食是x天敌</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;暑假集训-week4题解-暑假结构进阶&quot;&gt;&lt;a href=&quot;#暑假集训-week4题解-暑假结构进阶&quot; class=&quot;headerlink&quot; title=&quot;暑假集训-week4题解-暑假结构进阶&quot;&gt;&lt;/a&gt;暑假集训-week4题解-暑假结构进阶&lt;/h1&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="集训" scheme="http://example.com/categories/%E9%9B%86%E8%AE%AD/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-MLP提高泛化</title>
    <link href="http://example.com/2022/08/12/MLP/"/>
    <id>http://example.com/2022/08/12/MLP/</id>
    <published>2022-08-12T03:51:55.801Z</published>
    <updated>2022-08-12T03:55:18.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MLP提高泛化的方法"><a href="#MLP提高泛化的方法" class="headerlink" title="MLP提高泛化的方法"></a>MLP提高泛化的方法</h1><p><img src="https://img-blog.csdnimg.cn/668a4be6d97745cdb1ca8b13c4411686.png" alt="在这里插入图片描述"></p><h3 id="权重衰减-pytorch框架实现"><a href="#权重衰减-pytorch框架实现" class="headerlink" title="权重衰减-pytorch框架实现"></a>权重衰减-pytorch框架实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br></pre></td></tr></table></figure><p>造数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n_train, n_test, num_inputs, batch_size = <span class="number">20</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">5</span></span><br><span class="line"><span class="comment"># 训练数，测试数，输入数，步长</span></span><br><span class="line">true_w, true_b = torch.ones((num_inputs, <span class="number">1</span>)) * <span class="number">0.01</span>, <span class="number">0.05</span></span><br><span class="line">train_data = d2l.synthetic_data(true_w, true_b, n_train)  <span class="comment"># 生成训练集</span></span><br><span class="line">train_iter = d2l.load_array(train_data, batch_size)</span><br><span class="line">test_data = d2l.synthetic_data(true_w, true_b, n_test)  <span class="comment"># 生成验证集</span></span><br><span class="line">test_iter = d2l.load_array(test_data, batch_size, is_train=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>开整！</p><p>由于权重衰减在神经网络优化中很常用， 深度学习框架为了便于我们使用权重衰减， 将权重衰减集成到优化算法中，以便与任何损失函数结合使用。 此外，这种集成还有计算上的好处， 允许在不增加任何额外的计算开销的情况下向算法中添加权重衰减。 由于更新的权重衰减部分仅依赖于每个参数的当前值， 因此优化器必须至少接触每个参数一次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_concise</span>(<span class="params">wd</span>):  <span class="comment"># 手动输入L2范数惩罚的参数</span></span><br><span class="line">    net = nn.Sequential(nn.Linear(num_inputs, <span class="number">1</span>))  <span class="comment"># 网络中的参数</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> net.parameters():</span><br><span class="line">        param.data.normal_()</span><br><span class="line">    loss = nn.MSELoss(reduction=<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 损失函数</span></span><br><span class="line">    num_epochs, lr = <span class="number">100</span>, <span class="number">0.003</span>  <span class="comment"># 训练100个</span></span><br><span class="line">    trainer = torch.optim.SGD([</span><br><span class="line">        &#123;<span class="string">&quot;params&quot;</span>: net[<span class="number">0</span>].weight, <span class="string">&#x27;weight_decay&#x27;</span>:wd&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;params&quot;</span>: net[<span class="number">0</span>].bias&#125;], lr=lr)  <span class="comment"># 定义训练器</span></span><br><span class="line">    animator = d2l.Animator(xlabel=<span class="string">&#x27;epochs&#x27;</span>, ylabel=<span class="string">&#x27;loss&#x27;</span>, yscale=<span class="string">&#x27;log&#x27;</span>,</span><br><span class="line">                            xlim=[<span class="number">5</span>, num_epochs], legend=[<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;test&#x27;</span>])  <span class="comment"># 定义动画生成器</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">            trainer.zero_grad()</span><br><span class="line">            l = loss(net(X), y)</span><br><span class="line">            l.mean().backward()</span><br><span class="line">            trainer.step()</span><br><span class="line">        <span class="keyword">if</span>(epoch+<span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">            animator.add(epoch + <span class="number">1</span>,</span><br><span class="line">                         (d2l.evaluate_loss(net, train_iter, loss),</span><br><span class="line">                          d2l.evaluate_loss(net, test_iter, loss)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;w的L2范数：&#x27;</span>, net[<span class="number">0</span>].weight.norm().item())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当系数为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_concise(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><pre><code>w的L2范数： 12.364677429199219</code></pre><p><img src="https://s2.loli.net/2022/08/12/3rMiB6lzENy1JKF.png" alt="svg"></p><p>很显然，上图过拟合了</p><p>我们看看加入L2范数权重衰减会怎么样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_concise(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>w的L2范数： 0.3969815671443939</code></pre><p><img src="https://s2.loli.net/2022/08/12/ApR2HOxaPL8M3bI.png" alt="svg"></p><h3 id="暂退法-Dropout-pytorch实现"><a href="#暂退法-Dropout-pytorch实现" class="headerlink" title="暂退法(Dropout)-pytorch实现"></a>暂退法(Dropout)-pytorch实现</h3><p>这个比较常用</p><p><img src="https://img-blog.csdnimg.cn/02ca6085fbb948efa5031c453e34a24d.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">d2l.use_svg_display()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_fashion_mnist</span>(<span class="params">batch_size, resize=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中&quot;&quot;&quot;</span></span><br><span class="line">    trans = [transforms.ToTensor()]</span><br><span class="line">    <span class="keyword">if</span> resize:</span><br><span class="line">        trans.insert(<span class="number">0</span>, transforms.Resize(resize))</span><br><span class="line">    trans = transforms.Compose(trans)</span><br><span class="line">    mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">True</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">False</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">                            num_workers=<span class="number">4</span>),</span><br><span class="line">            data.DataLoader(mnist_test, batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                            num_workers=<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dropout1 = <span class="number">0.2</span></span><br><span class="line">dropout2 = <span class="number">0.5</span></span><br><span class="line"><span class="comment"># w矩阵赋值为0的比例(概率)</span></span><br><span class="line">net = nn.Sequential(nn.Flatten(),</span><br><span class="line">                    nn.Linear(<span class="number">784</span>, <span class="number">256</span>),</span><br><span class="line">                    nn.ReLU(),  <span class="comment"># 第一个全连接层</span></span><br><span class="line">                    <span class="comment"># 在这个地方设置一个dropout层</span></span><br><span class="line">                    nn.Dropout(dropout1),</span><br><span class="line">                    nn.Linear(<span class="number">256</span>, <span class="number">256</span>),</span><br><span class="line">                    nn.ReLU(),   <span class="comment"># 第二个全连接层</span></span><br><span class="line">                    <span class="comment"># 再设置一个dropout层</span></span><br><span class="line">                    nn.Dropout(dropout2),</span><br><span class="line">                    nn.Linear(<span class="number">256</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.normal_(m.weight, std=<span class="number">0.01</span>)  <span class="comment"># 给矩阵赋初值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.apply(init_weights)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Sequential(  (0): Flatten(start_dim=1, end_dim=-1)  (1): Linear(in_features=784, out_features=256, bias=True)  (2): ReLU()  (3): Dropout(p=0.2, inplace=False)  (4): Linear(in_features=256, out_features=256, bias=True)  (5): ReLU()  (6): Dropout(p=0.5, inplace=False)  (7): Linear(in_features=256, out_features=10, bias=True))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_epochs, lr, batch_size = <span class="number">10</span>, <span class="number">0.5</span>, <span class="number">256</span></span><br><span class="line">loss = nn.CrossEntropyLoss(reduction=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">train_iter, test_iter = load_data_fashion_mnist(batch_size)</span><br><span class="line">trainer = torch.optim.SGD(net.parameters(), lr=lr)</span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/12/RNnf8OZDvScLE6x.png" alt="svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MLP提高泛化的方法&quot;&gt;&lt;a href=&quot;#MLP提高泛化的方法&quot; class=&quot;headerlink&quot; title=&quot;MLP提高泛化的方法&quot;&gt;&lt;/a&gt;MLP提高泛化的方法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-多层感知机(MLP)</title>
    <link href="http://example.com/2022/08/10/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
    <id>http://example.com/2022/08/10/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA/</id>
    <published>2022-08-10T13:59:08.295Z</published>
    <updated>2022-08-11T02:42:24.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多层感知机MLP"><a href="#多层感知机MLP" class="headerlink" title="多层感知机MLP"></a>多层感知机MLP</h1><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>之前的回归模型已经能解决一些线性模型，但是对于非线性问题，用之前的去模拟是不合适的，我们需要在神经网络中加入隐藏层，形成非线性模型，实现对模型预测的普适性</p><h3 id="从零开始实现MLP"><a href="#从零开始实现MLP" class="headerlink" title="从零开始实现MLP"></a>从零开始实现MLP</h3><p>一些准备工作：引入包，加载数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">d2l.use_svg_display()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_fashion_mnist</span>(<span class="params">batch_size, resize=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中&quot;&quot;&quot;</span></span><br><span class="line">    trans = [transforms.ToTensor()]</span><br><span class="line">    <span class="keyword">if</span> resize:</span><br><span class="line">        trans.insert(<span class="number">0</span>, transforms.Resize(resize))</span><br><span class="line">    trans = transforms.Compose(trans)</span><br><span class="line">    mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">True</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">False</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()),</span><br><span class="line">            data.DataLoader(mnist_test, batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()))</span><br><span class="line"><span class="comment"># 重写下载数据集</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dataloader_workers</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_iter, test_iter = load_data_fashion_mnist(batch_size)</span><br><span class="line"><span class="comment"># 创建训练集和测试集</span></span><br></pre></td></tr></table></figure><p>将每个图像视为具有784个输入特征 和10个类的简单分类数据集。 首先，我们将实现一个具有单隐藏层的多层感知机， 它包含256个隐藏单元</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">num_inputs, num_outputs, num_hiddens = <span class="number">784</span>, <span class="number">10</span>, <span class="number">256</span></span><br><span class="line"><span class="comment"># y= X*W+b</span></span><br><span class="line"><span class="comment"># X是 1*784</span></span><br><span class="line"><span class="comment"># 创建第一层 第一层  W:784 * 256  b: 1*256</span></span><br><span class="line">W1 = nn.Parameter(torch.randn(</span><br><span class="line">    num_inputs, num_hiddens, requires_grad=<span class="literal">True</span>)*<span class="number">0.01</span>)</span><br><span class="line">b1 = nn.Parameter(torch.zeros(num_hiddens, requires_grad=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 创建第二层 第二层  W：256 * 10  b:1*10</span></span><br><span class="line">W2 = nn.Parameter(torch.randn(</span><br><span class="line">    num_hiddens, num_outputs, requires_grad=<span class="literal">True</span>)*<span class="number">0.01</span>)</span><br><span class="line">b2 = nn.Parameter(torch.zeros(num_outputs, requires_grad=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">params = [W1, b1, W2, b2]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加非线性，隐藏层使用激活函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ReLU函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">X</span>):</span><br><span class="line">    a=torch.zeros_like(X)</span><br><span class="line">    <span class="keyword">return</span> torch.<span class="built_in">max</span>(X,a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">net</span>(<span class="params">X</span>):</span><br><span class="line">    X = X.reshape((-<span class="number">1</span>, num_inputs))</span><br><span class="line">    H = relu(X@W1+b1)  <span class="comment"># 从输入层到隐藏层</span></span><br><span class="line">    <span class="keyword">return</span> (H@W2+b2)  <span class="comment"># 从隐藏层到输出层</span></span><br><span class="line"><span class="comment"># @代表矩阵乘法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.CrossEntropyLoss(reduction=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用封装好的交叉熵函数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_epochs, lr = <span class="number">10</span>, <span class="number">0.1</span></span><br><span class="line"><span class="comment"># 训练的样本个数是 10</span></span><br><span class="line"><span class="comment"># 学习率是0.1</span></span><br><span class="line">updater = torch.optim.SGD(params, lr=lr)</span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, updater)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/11/4P8X5FRdpu2fQba.png" alt="svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d2l.predict_ch3(net,test_iter,n=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/11/RI8BPbDmnruaENd.png" alt="svg"></p><h3 id="pytorch框架实现MLP"><a href="#pytorch框架实现MLP" class="headerlink" title="pytorch框架实现MLP"></a>pytorch框架实现MLP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure><p>我们添加了2个全连接层，第一层是隐藏层，它包含256个隐藏单元，并使用了ReLU激活函数。 第二层是输出层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">net = nn.Sequential(nn.Flatten(),  <span class="comment"># 降成一维</span></span><br><span class="line">                    nn.Linear(<span class="number">784</span>, <span class="number">256</span>),</span><br><span class="line">                    nn.ReLU(),</span><br><span class="line">                    nn.Linear(<span class="number">256</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.normal_(m.weight, std=<span class="number">0.01</span>)  <span class="comment"># 初始化权重</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.apply(init_weights)  <span class="comment"># 初始化权重</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Sequential(  (0): Flatten(start_dim=1, end_dim=-1)  (1): Linear(in_features=784, out_features=256, bias=True)  (2): ReLU()  (3): Linear(in_features=256, out_features=10, bias=True))</code></pre><p>训练！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">lr = <span class="number">0.1</span></span><br><span class="line">num_epochs = <span class="number">10</span></span><br><span class="line">loss = nn.CrossEntropyLoss(reduction=<span class="string">&#x27;none&#x27;</span>)  <span class="comment"># 损失函数</span></span><br><span class="line">trainer = torch.optim.SGD(net.parameters(), lr=lr)  <span class="comment"># 优化器</span></span><br><span class="line"></span><br><span class="line">train_iter, test_iter = load_data_fashion_mnist(batch_size)</span><br><span class="line"><span class="comment"># 创建训练集和测试集</span></span><br><span class="line">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/11/7fjN93BQcYPwCWl.png" alt="svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d2l.predict_ch3(net, test_iter)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/11/BC8EWGJDyM6hoOf.png" alt="svg"></p><p>学了MLP感觉思路清晰了很多，之前看封装好的代码框架如同看天书，现在总算找到一点规律了，总算有点进展了<del>热泪盈眶</del></p><p>今晚得以安眠</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多层感知机MLP&quot;&gt;&lt;a href=&quot;#多层感知机MLP&quot; class=&quot;headerlink&quot; title=&quot;多层感知机MLP&quot;&gt;&lt;/a&gt;多层感知机MLP&lt;/h1&gt;&lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-图片集与Softmax回归</title>
    <link href="http://example.com/2022/08/10/Softmax%E5%9B%9E%E5%BD%92/"/>
    <id>http://example.com/2022/08/10/Softmax%E5%9B%9E%E5%BD%92/</id>
    <published>2022-08-10T12:06:57.332Z</published>
    <updated>2022-08-11T02:44:55.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Softmax回归"><a href="#Softmax回归" class="headerlink" title="Softmax回归"></a>Softmax回归</h1><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>回归可以用于预测多少的问题。 比如预测房屋被售出价格，或者棒球队可能获得的胜场数，又或者患者住院的天数。</p><p>事实上，我们也对分类问题感兴趣：不是问“多少”，而是问“哪一个”！<br><img src="https://img-blog.csdnimg.cn/4fcda33fe0274418b2862f91e997d2c8.png" alt="在这里插入图片描述"></p><h3 id="图像分类数据集"><a href="#图像分类数据集" class="headerlink" title="图像分类数据集"></a>图像分类数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">d2l.use_svg_display()</span><br></pre></td></tr></table></figure><h5 id="下载并读取数据集"><a href="#下载并读取数据集" class="headerlink" title="下载并读取数据集"></a>下载并读取数据集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载数据集</span></span><br><span class="line">trans = transforms.ToTensor()</span><br><span class="line">mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">True</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class="line">    root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">False</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">len</span>(mnist_train), <span class="built_in">len</span>(mnist_test)</span><br></pre></td></tr></table></figure><pre><code>(60000, 10000)</code></pre><h5 id="制定标签"><a href="#制定标签" class="headerlink" title="制定标签"></a>制定标签</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_fashion_mnist_labels</span>(<span class="params">labels</span>):</span><br><span class="line">    <span class="comment"># 返回get_fashion_mnist_labels数据集标签</span></span><br><span class="line">    text_labels = [<span class="string">&#x27;t-shirt&#x27;</span>, <span class="string">&#x27;trouser&#x27;</span>, <span class="string">&#x27;pullover&#x27;</span>, <span class="string">&#x27;dress&#x27;</span>, <span class="string">&#x27;coat&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;sandal&#x27;</span>, <span class="string">&#x27;shirt&#x27;</span>, <span class="string">&#x27;sneaker&#x27;</span>, <span class="string">&#x27;bag&#x27;</span>, <span class="string">&#x27;ankle boot&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> [text_labels[<span class="built_in">int</span>(i)] <span class="keyword">for</span> i <span class="keyword">in</span> labels]</span><br></pre></td></tr></table></figure><p>可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_images</span>(<span class="params">imgs, num_rows, num_cols, titles=<span class="literal">None</span>, scale=<span class="number">1.5</span></span>):  <span class="comment">#@save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;绘制图像列表&quot;&quot;&quot;</span></span><br><span class="line">    figsize = (num_cols * scale, num_rows * scale)</span><br><span class="line">    _, axes = d2l.plt.subplots(num_rows, num_cols, figsize=figsize)</span><br><span class="line">    axes = axes.flatten()</span><br><span class="line">    <span class="keyword">for</span> i, (ax, img) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(axes, imgs)):</span><br><span class="line">        <span class="keyword">if</span> torch.is_tensor(img):</span><br><span class="line">            <span class="comment"># 图片张量</span></span><br><span class="line">            ax.imshow(img.numpy())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># PIL图片</span></span><br><span class="line">            ax.imshow(img)</span><br><span class="line">        ax.axes.get_xaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">        ax.axes.get_yaxis().set_visible(<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> titles:</span><br><span class="line">            ax.set_title(titles[i])</span><br><span class="line">    <span class="keyword">return</span> axes</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X, y = <span class="built_in">next</span>(<span class="built_in">iter</span>(data.DataLoader(mnist_train, batch_size=<span class="number">18</span>)))</span><br><span class="line">show_images(X.reshape(<span class="number">18</span>, <span class="number">28</span>, <span class="number">28</span>), <span class="number">2</span>, <span class="number">9</span>, titles=get_fashion_mnist_labels(y))</span><br></pre></td></tr></table></figure><pre><code>array([&lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;ankle boot&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;t-shirt&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;t-shirt&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;dress&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;t-shirt&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;pullover&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;sneaker&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;pullover&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;sandal&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;sandal&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;t-shirt&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;ankle boot&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;sandal&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;sandal&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;sneaker&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;ankle boot&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;trouser&#39;&#125;&gt;,       &lt;AxesSubplot:title=&#123;&#39;center&#39;:&#39;t-shirt&#39;&#125;&gt;], dtype=object)</code></pre><p><img src="https://s2.loli.net/2022/08/11/Yxf6egOPKHhGECj.png" alt="svg"></p><h5 id="小批量读取"><a href="#小批量读取" class="headerlink" title="小批量读取"></a>小批量读取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dataloader_workers</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">train_iter = data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">                             num_workers=get_dataloader_workers())</span><br></pre></td></tr></table></figure><h5 id="读取所需要的时间"><a href="#读取所需要的时间" class="headerlink" title="读取所需要的时间"></a>读取所需要的时间</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">timer = d2l.Timer()</span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;timer.stop():<span class="number">.2</span>f&#125;</span> sec&#x27;</span></span><br></pre></td></tr></table></figure><pre><code>&#39;3.66 sec&#39;</code></pre><h5 id="整合组件"><a href="#整合组件" class="headerlink" title="整合组件"></a>整合组件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_data_fashion_mnist</span>(<span class="params">batch_size, resize=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中&quot;&quot;&quot;</span></span><br><span class="line">    trans = [transforms.ToTensor()]</span><br><span class="line">    <span class="keyword">if</span> resize:</span><br><span class="line">        trans.insert(<span class="number">0</span>, transforms.Resize(resize))</span><br><span class="line">    trans = transforms.Compose(trans)</span><br><span class="line">    mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">True</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class="line">        root=<span class="string">&quot;./data&quot;</span>, train=<span class="literal">False</span>, transform=trans, download=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()),</span><br><span class="line">            data.DataLoader(mnist_test, batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">                            num_workers=get_dataloader_workers()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="调整图像大小"><a href="#调整图像大小" class="headerlink" title="调整图像大小"></a>调整图像大小</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_iter, test_iter = load_data_fashion_mnist(<span class="number">32</span>, resize=<span class="number">64</span>)</span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">    <span class="built_in">print</span>(X.shape, X.dtype, y.shape, y.dtype)</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><pre><code>torch.Size([32, 1, 64, 64]) torch.float32 torch.Size([32]) torch.int64</code></pre><h3 id="softmax——从零开始实现"><a href="#softmax——从零开始实现" class="headerlink" title="softmax——从零开始实现"></a>softmax——从零开始实现</h3><p><a href="https://www.zhihu.com/question/23765351/answer/2144591565">softmax及其回归机制，讲的很好</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">batch_size =<span class="number">256</span></span><br><span class="line">train_iter,test_iter=load_data_fashion_mnist(batch_size)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">num_inputs = <span class="number">784</span></span><br><span class="line">num_outputs = <span class="number">10</span></span><br><span class="line"><span class="comment"># 原图片是28*28的图片，通道数为1</span></span><br><span class="line"><span class="comment"># 将图片拉长，拉成28*28=784长度的向量</span></span><br><span class="line"></span><br><span class="line">W = torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, size=(num_inputs, num_outputs), requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.zeros(num_outputs, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">softmax</span>(<span class="params">X</span>):</span><br><span class="line">    X_exp = torch.exp(X)</span><br><span class="line">    partition = X_exp.<span class="built_in">sum</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> X_exp/partition   <span class="comment"># softmax的实现</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/BlairGrowing/p/15062915.html#:~:text=softmax%20%E5%9B%9E%E5%BD%92%E5%90%8C%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%80%E6%A0%B7%EF%BC%8C%E4%B9%9F%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8D%95%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E3%80%82%20%E7%94%B1%E4%BA%8E%E6%AF%8F%E4%B8%AA%E8%BE%93%E5%87%BA%20o%201%2C%20o%202%2C%20o,1%2C%20x%202%2C%20x%203%2C%20x%204%2C%20softmax%E5%9B%9E%E5%BD%92%E7%9A%84%E8%BE%93%E5%87%BA%E5%B1%82%E4%B9%9F%E6%98%AF%E4%B8%80%E4%B8%AA%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82%E3%80%82">softmax回归理解</a><br><img src="https://img-blog.csdnimg.cn/36a875034aeb48a589fc9edb12c9e9cd.png" alt="在这里插入图片描述"></p><p><a href="https://blog.csdn.net/qq_41565359/article/details/112977221">多元分类器交叉熵公式</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">net</span>(<span class="params">X</span>):</span><br><span class="line">    <span class="keyword">return</span> softmax(torch.matmul(X.reshape((-<span class="number">1</span>, W.shape[<span class="number">0</span>])), W)+b)</span><br></pre></td></tr></table></figure><p>测试我们的softmax：</p><p>对于任何随机输入，我们将每个元素变成一个非负数。 此外，依据概率原理，每行总和为1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">X_prob = softmax(X)</span><br><span class="line">X_prob, X_prob.<span class="built_in">sum</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>(tensor([[0.2772, 0.0864, 0.1937, 0.0683, 0.3745],         [0.0335, 0.2456, 0.1310, 0.2208, 0.3691]]), tensor([1.0000, 1.0000]))</code></pre><p><img src="https://img-blog.csdnimg.cn/6a82767ab87d45d58f1b96323ef9345e.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = torch.tensor([<span class="number">0</span>, <span class="number">2</span>])</span><br><span class="line">y_hat = torch.tensor([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.6</span>], [<span class="number">0.3</span>, <span class="number">0.2</span>, <span class="number">0.5</span>]])</span><br><span class="line">y_hat[[<span class="number">0</span>, <span class="number">1</span>], y]</span><br></pre></td></tr></table></figure><pre><code>tensor([0.1000, 0.5000])</code></pre><p>损失函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross_entropy</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> - torch.log(y_hat[<span class="built_in">range</span>(<span class="built_in">len</span>(y_hat)), y])</span><br><span class="line"></span><br><span class="line">cross_entropy(y_hat, y)</span><br></pre></td></tr></table></figure><pre><code>tensor([2.3026, 0.6931])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还是在检测上面的数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(y_hat.shape) &gt; <span class="number">1</span> <span class="keyword">and</span> y_hat.shape[<span class="number">1</span>] &gt; <span class="number">1</span>:<span class="comment"># 如果是一个二维矩阵</span></span><br><span class="line">        y_hat = y_hat.argmax(axis=<span class="number">1</span>) <span class="comment">#找出横向最大值的那个下标，作为预测结果</span></span><br><span class="line">    cmp = y_hat.<span class="built_in">type</span>(y.dtype) == y</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">float</span>(cmp.<span class="built_in">type</span>(y.dtype).<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line">accuracy(y_hat,y)/<span class="built_in">len</span>(y)</span><br></pre></td></tr></table></figure><pre><code>0.5</code></pre><p>评估任意模型net的准确率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_accuracy</span>(<span class="params">net, data_iter</span>):  <span class="comment"># @save</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(net, torch.nn.Module):</span><br><span class="line">        net.<span class="built_in">eval</span>()  <span class="comment"># 将模型设置为评估模式</span></span><br><span class="line">    metric = Accumulator(<span class="number">2</span>)  <span class="comment"># 正确预测数、预测总数</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter:</span><br><span class="line">            metric.add(accuracy(net(X), y), y.numel()) <span class="comment"># 将正确的预测次数进行累加</span></span><br><span class="line">    <span class="keyword">return</span> metric[<span class="number">0</span>] / metric[<span class="number">1</span>] <span class="comment"># 预测正确/总数</span></span><br></pre></td></tr></table></figure><p>后面的实现不会了。。。<del>前方的区域以后再来探索吧</del></p><h3 id="softmax——pytorch框架实现"><a href="#softmax——pytorch框架实现" class="headerlink" title="softmax——pytorch框架实现"></a>softmax——pytorch框架实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">256</span></span><br><span class="line">train_iter, test_iter = load_data_fashion_mnist(batch_size) <span class="comment"># 批量大小是256</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以前知识的回顾</span></span><br><span class="line">X = torch.tensor([[<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>], [<span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>]]) </span><br><span class="line">X.<span class="built_in">sum</span>(<span class="number">0</span>, keepdim=<span class="literal">True</span>), X.<span class="built_in">sum</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 0是竖着求和，1是横着求和</span></span><br></pre></td></tr></table></figure><pre><code>(tensor([[5., 7., 9.]]), tensor([[ 6.],         [15.]]))</code></pre><p><img src="https://img-blog.csdnimg.cn/e5aa7d1c285446039ba7189c568a2c70.png" alt="在这里插入图片描述"></p><p><a href="https://blog.csdn.net/lz_peter/article/details/84574716">softmax</a></p><p><a href="https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html?highlight=sequential#torch.nn.Sequential">Sequential</a></p><p><a href="https://pytorch.org/docs/stable/nn.init.html?highlight=normal_#torch.nn.init.normal_">normal_</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">net = nn.Sequential(nn.Flatten(), nn.Linear(<span class="number">784</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 输入大小是28*28=784，因为我们的数据集有10个类别，所以网络输出维度为10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_weight</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        nn.init.normal_(m.weight, std=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按每一层跑一遍</span></span><br><span class="line">net.apply(init_weight)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Sequential(  (0): Flatten(start_dim=1, end_dim=-1)  (1): Linear(in_features=784, out_features=10, bias=True))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = nn.CrossEntropyLoss(reduction=<span class="string">&#x27;none&#x27;</span>) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trainer =torch.optim.SGD(net.parameters(),lr=<span class="number">0.1</span>) <span class="comment"># 学习率为0.1小批量随机梯度下降的优化算法</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_epochs=<span class="number">10</span></span><br><span class="line">d2l.train_ch3(net,train_iter,test_iter,loss,num_epochs,trainer)</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/08/11/fVqQ9CahdtRpHj8.png" alt="svg"></p><p><strong>参考李沐老师的《动手学深度学习》</strong></p><p><del>softmax好难，学了好久才大概懂一点点，我是菜鸟</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Softmax回归&quot;&gt;&lt;a href=&quot;#Softmax回归&quot; class=&quot;headerlink&quot; title=&quot;Softmax回归&quot;&gt;&lt;/a&gt;Softmax回归&lt;/h1&gt;&lt;h3 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-自动求导与线性回归</title>
    <link href="http://example.com/2022/08/08/%E6%B1%82%E5%AF%BC%E4%B8%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://example.com/2022/08/08/%E6%B1%82%E5%AF%BC%E4%B8%8E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</id>
    <published>2022-08-08T04:07:18.536Z</published>
    <updated>2022-08-08T07:19:46.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自动求导尝试"><a href="#自动求导尝试" class="headerlink" title="自动求导尝试"></a>自动求导尝试</h3><p>torch.Tensor 是这个包的核心类。如果设置它的属性 .requires_grad 为 True，那么它将会追踪对于该张量的所有操作。当完成计算后可以通过调用 .backward()，来自动计算所有的梯度。这个张量的所有梯度将会自动累加到.grad属性.</p><p>​ 要阻止一个张量被跟踪历史，可以调用 .detach() 方法将其与计算历史分离，并阻止它未来的计算记录被跟踪。</p><p>​ 为了防止跟踪历史记录(和使用内存），可以将代码块包装在 with torch.no_grad(): 中。在评估模型时特别有用，因为模型可能具有 requires_grad = True 的可训练的参数，但是我们不需要在此过程中对他们进行梯度计算。</p><p>​ 还有一个类对于autograd的实现非常重要：Function。</p><p>Tensor 和 Function 互相连接生成了一个无圈图(acyclic graph)，它编码了完整的计算历史。每个张量都有一个 .grad_fn 属性，该属性引用了创建 Tensor 自身的Function(除非这个张量是用户手动创建的，即这个张量的 grad_fn 是 None )。</p><p>​<strong>如果需要计算导数，可以在 Tensor 上调用 .backward()。如果 Tensor 是一个标量(即它包含一个元素的数据），则不需要为 backward() 指定任何参数，但是如果它有更多的元素，则需要指定一个 gradient 参数，该参数是形状匹配的张量。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = torch.ones(<span class="number">3</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">y = x+<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[1., 1.],        [1., 1.],        [1., 1.]], requires_grad=True)tensor([[3., 3.],        [3., 3.],        [3., 3.]], grad_fn=&lt;AddBackward0&gt;)</code></pre><p><img src="https://img-blog.csdnimg.cn/5199c3f14c384bde80002df88702b5c7.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn((<span class="number">2</span>, <span class="number">3</span>), requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">y = x+<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x.grad.zero_()</span></span><br><span class="line">y = y.<span class="built_in">sum</span>()  <span class="comment"># 必须将y最终结果化为标量才能进行求导操作</span></span><br><span class="line">y.backward()</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">    y = y*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[-1.5443, -0.0354, -0.8403],        [ 1.5566,  0.7182,  1.5884]], requires_grad=True)tensor([[0.4557, 1.9646, 1.1597],        [3.5566, 2.7182, 3.5884]], grad_fn=&lt;AddBackward0&gt;)tensor([[1., 1., 1.],        [1., 1., 1.]])tensor(1720.7292, grad_fn=&lt;MulBackward0&gt;)</code></pre><h3 id="线性回归理解"><a href="#线性回归理解" class="headerlink" title="线性回归理解"></a>线性回归理解</h3><p>给定一个数据集，我们的目标是寻找模型的权重和偏置， 使得根据模型做出的预测大体符合数据里的真实价格。 输出的预测值由输入特征通过线性模型的仿射变换决定，仿射变换由所选权重和偏置确定。</p><p><img src="https://img-blog.csdnimg.cn/500d56e0602c4faa83e78a05c5dd2000.png" alt="在这里插入图片描述"></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p><img src="https://img-blog.csdnimg.cn/a48ba0d06cdb4cf2bd111c534e5f21a0.png" alt="在这里插入图片描述"></p><h3 id="线性回归的从零开始实现"><a href="#线性回归的从零开始实现" class="headerlink" title="线性回归的从零开始实现"></a>线性回归的从零开始实现</h3><p>其中d2l包需要自己导入离线安装，附上链接：<a href="https://blog.csdn.net/NEUQ_snowy/article/details/126118438?spm=1001.2014.3001.5502">感谢SWY大神</a></p><p>顺便补一个d2l_zh的包：<a href="https://blog.csdn.net/NEUQ_snowy/article/details/123969408?spm=1001.2014.3001.5502">再次感谢SWY大神</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l  <span class="comment"># 李沐大神自己写的包，需要自己导入</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">%matplotlib</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>Using matplotlib backend: QtAgg</code></pre><p><img src="https://img-blog.csdnimg.cn/2e130b7b77094757bd3096c4bf6ab54b.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">synthetic_data</span>(<span class="params">w, b, num_examples</span>):</span><br><span class="line">    <span class="comment"># &quot;生成 y=Xw+b+e&quot; e是噪音</span></span><br><span class="line">    <span class="comment"># 均值为0，标准差为1的随机数，行数等于样本数，列数等于w的长度的随机数</span></span><br><span class="line">    X = torch.normal(<span class="number">0</span>, <span class="number">1</span>, (num_examples, <span class="built_in">len</span>(w)))</span><br><span class="line">    <span class="comment"># y=Xw+b</span></span><br><span class="line">    y = torch.matmul(X, w)+b</span><br><span class="line">    y += torch.normal(<span class="number">0</span>, <span class="number">0.01</span>, y.shape)  <span class="comment"># 加了点噪音</span></span><br><span class="line">    <span class="keyword">return</span> X, y.reshape((-<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 转化成只有一列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">features, labels = synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;features&#x27;</span>, features[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;labels&#x27;</span>, labels[<span class="number">0</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>features tensor([-0.3295, -0.7524])labels tensor([6.0904])</code></pre><p>读取小批量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_iter</span>(<span class="params">batch_size, features, labels</span>):  <span class="comment"># batch_size 批量大小</span></span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    <span class="comment"># 随机读取样本</span></span><br><span class="line">    random.shuffle(indices)  <span class="comment"># 随机打乱样本</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):  <span class="comment"># 从0开始，到样本总数数量结束,每次跳batch_size大小</span></span><br><span class="line">        batch_indices = torch.tensor(</span><br><span class="line">            indices[i:<span class="built_in">min</span>(i+batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们直观感受一下小批量运算：读取第一个小批量数据样本并打印。 每个批量的特征维度显示批量大小和输入特征数。 同样的，批量的标签形状与batch_size相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">    <span class="built_in">print</span>(X, <span class="string">&#x27;\n&#x27;</span>, y)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.7996,  0.4114],        [ 0.0760,  1.0155],        [ 0.6860,  0.2270],        [-2.0028,  0.9113],        [ 0.4199, -0.6192],        [-0.0252,  2.0244],        [ 1.7162, -0.4195],        [ 0.6579, -0.3955],        [-1.5817, -0.1407],        [-1.0975,  0.1836]])  tensor([[ 4.4066],        [ 0.8990],        [ 4.8128],        [-2.8907],        [ 7.1436],        [-2.7258],        [ 9.0706],        [ 6.8511],        [ 1.5068],        [ 1.3921]])</code></pre><p>初始化模型参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w=torch.normal(<span class="number">0</span>,<span class="number">0.01</span>,size=(<span class="number">2</span>,<span class="number">1</span>),requires_grad=<span class="literal">True</span>)</span><br><span class="line">b=torch.zeros(<span class="number">1</span>,requires_grad=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>定义模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):</span><br><span class="line">    <span class="keyword">return</span> torch.matmul(X, w)+b</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义损失函数<br><img src="https://img-blog.csdnimg.cn/e11ed845eec041faad31b003213b6b08.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">squared_loss</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="comment"># 均方损失</span></span><br><span class="line">    <span class="keyword">return</span> (y_hat-y.reshape(y_hat.shape))**<span class="number">2</span>/<span class="number">2</span></span><br></pre></td></tr></table></figure><p>定义优化算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):</span><br><span class="line">    <span class="comment"># 小批量的随机梯度下降</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad(): <span class="comment"># para参数列表，lr是学习率，batch_size</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">            param -= lr * param.grad/batch_size</span><br><span class="line">            param.grad.zero_()</span><br></pre></td></tr></table></figure><p>开始训练</p><p>另外附上python特有的print(f’’)用法：<a href="https://blog.csdn.net/Joey9898/article/details/121940891?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165992664916781432975725%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165992664916781432975725&biz_id=0&spm=1018.2226.3001.4187">传送门</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lr = <span class="number">0.03</span>  <span class="comment"># 学习率是0.03(太小效率太低，太大容易超出范围，造成摆动)</span></span><br><span class="line">num_epochs = <span class="number">3</span>  <span class="comment"># 训练次数是3次</span></span><br><span class="line">net = linreg</span><br><span class="line">loss = squared_loss</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">        l = loss(net(X, w, b), y)  <span class="comment"># x和y的小批量损失</span></span><br><span class="line">        l.<span class="built_in">sum</span>().backward()</span><br><span class="line">        sgd([w, b], lr, batch_size)  <span class="comment"># 使用参数的梯度进行更新</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        train_l = loss(net(features, w, b), labels)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>epoch 1, loss 0.038161epoch 2, loss 0.000139epoch 3, loss 0.000048</code></pre><p>输出通过学习修正过的参数值，评估训练成功程度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w的估计误差: <span class="subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b的估计误差: <span class="subst">&#123;true_b - b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><pre><code>w的估计误差: tensor([ 0.0002, -0.0004])b的估计误差: tensor([-0.0006])tensor([[ 1.9998, -3.3996]])tensor([4.2006])</code></pre><h3 id="线性回归深度学习框架的简洁实现"><a href="#线性回归深度学习框架的简洁实现" class="headerlink" title="线性回归深度学习框架的简洁实现"></a>线性回归深度学习框架的简洁实现</h3><p>使用pytorch的nn来实现加载数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br></pre></td></tr></table></figure><p>创建初始w，b。<br>并且生成标签数据集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">true_w =torch.tensor([<span class="number">2</span>,-<span class="number">3.4</span>])</span><br><span class="line">true_b =<span class="number">4.2</span></span><br><span class="line">features,labels=d2l.synthetic_data(true_w,true_b,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>构造pytorch迭代器</p><p><a href="https://blog.csdn.net/qq_40211493/article/details/107529148?ops_request_misc=&request_id=&biz_id=102&spm=1018.2226.3001.4187">TensorDataset</a></p><p><a href="https://pytorch.org/docs/stable/data.html?highlight=dataloader#torch.utils.data.DataLoader">DataLoader</a></p><p><a href="https://pytorch.org/docs/stable/fx.html?highlight=next#torch.fx.Node.next">next</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_array</span>(<span class="params">data_arrrays, batch_size, is_train=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="comment"># 构建迭代器</span></span><br><span class="line">    dataset = data.TensorDataset(*data_arrrays)</span><br><span class="line">    <span class="keyword">return</span> data.DataLoader(dataset, batch_size, shuffle=is_train)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line">data_iter = load_array((features, labels), batch_size)</span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>(<span class="built_in">iter</span>(data_iter))</span><br><span class="line"><span class="comment"># 这里我们使用iter构造Python迭代器，并使用next从迭代器中获取第一项。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>[tensor([[ 0.1652,  0.8560],         [ 0.0147,  1.5673],         [ 0.9652, -0.2222],         [ 0.4242,  0.1483],         [ 0.8722, -1.3510],         [ 0.0506,  0.8717],         [-1.2767, -0.0087],         [-0.4736,  0.8434],         [-0.1852, -0.9320],         [-1.6329,  0.1184]]), tensor([[ 1.6253],         [-1.0980],         [ 6.8757],         [ 4.5338],         [10.5444],         [ 1.3342],         [ 1.6711],         [ 0.3882],         [ 7.0090],         [ 0.5239]])]</code></pre><p>使用深度学习框架定好的层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nn是神经网络的缩写</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">2</span>, <span class="number">1</span>)) <span class="comment"># 2是输入维度，1是输出维度</span></span><br></pre></td></tr></table></figure><p>初始化模型参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net[<span class="number">0</span>].weight.data.normal_(<span class="number">0</span>,<span class="number">0.01</span>) <span class="comment">#使用正太分布替换它的值，均值0，方差0.01</span></span><br><span class="line">net[<span class="number">0</span>].bias.data.fill_(<span class="number">0</span>) <span class="comment">#偏差</span></span><br></pre></td></tr></table></figure><p>计算均方误差(平方范数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss=nn.MSELoss()</span><br></pre></td></tr></table></figure><p>实例化SGD实例(优化算法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trainer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.03</span>)</span><br><span class="line"><span class="comment">#第一个参数将w，b传入</span></span><br><span class="line"><span class="comment">#第二个参数设置的学习率</span></span><br></pre></td></tr></table></figure><p>开始训练</p><p>回顾一下：在每个迭代周期里，我们将完整遍历一次数据集（train_data）， 不停地从中获取一个小批量的输入和相应的标签。 对于每一个小批量，我们会进行以下步骤:</p><ul><li><p>通过调用net(X)生成预测并计算损失l（前向传播）。</p></li><li><p>通过进行反向传播来计算梯度。</p></li><li><p>通过调用优化器来更新模型参数。</p></li></ul><p>为了更好的衡量训练效果，我们计算每个迭代周期后的损失，并打印它来监控训练过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_epochs = <span class="number">3</span>  <span class="comment"># 训练三次</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter:</span><br><span class="line">        l = loss(net(X), y)</span><br><span class="line">        trainer.zero_grad()</span><br><span class="line">        l.backward() <span class="comment">#已经做过了sum</span></span><br><span class="line">        trainer.step() <span class="comment">#模型更新</span></span><br><span class="line">    l = loss(net(features), labels)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;l:f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><pre><code>epoch 1, loss 0.000246epoch 2, loss 0.000098epoch 3, loss 0.000098</code></pre><p>输出并评估训练结果</p><p>下面我们比较生成数据集的真实参数和通过有限数据训练获得的模型参数。 要访问参数，我们首先从net访问所需的层，然后读取该层的权重和偏置。 正如在从零开始实现中一样，我们估计得到的参数与生成数据的真实参数非常接近</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w = net[<span class="number">0</span>].weight.data</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w的估计误差：&#x27;</span>, true_w - w.reshape(true_w.shape))</span><br><span class="line">b = net[<span class="number">0</span>].bias.data</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b的估计误差：&#x27;</span>, true_b - b)</span><br><span class="line"><span class="built_in">print</span>(w)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><pre><code>w的估计误差： tensor([ 0.0002, -0.0004])b的估计误差： tensor([-0.0006])tensor([[ 1.9998, -3.3996]])tensor([4.2006])</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;自动求导尝试&quot;&gt;&lt;a href=&quot;#自动求导尝试&quot; class=&quot;headerlink&quot; title=&quot;自动求导尝试&quot;&gt;&lt;/a&gt;自动求导尝试&lt;/h3&gt;&lt;p&gt;torch.Tensor 是这个包的核心类。如果设置它的属性 .requires_grad 为 True，那</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习-pytorch-张量tensor语法</title>
    <link href="http://example.com/2022/08/05/pytorch%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/08/05/pytorch%E8%AF%AD%E6%B3%95/</id>
    <published>2022-08-05T12:34:46.544Z</published>
    <updated>2022-08-05T12:44:21.292Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> d2lzh_pytorch</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=torch.arange(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x.shape</span><br><span class="line">x.numel <span class="comment">#元素数量</span></span><br><span class="line">x.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">y=torch.zeros(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><pre><code>tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x = torch.tensor([<span class="number">2.0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x = torch.arange(<span class="number">12</span>, dtype=torch.float32).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">y = torch.tensor([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]])</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line">torch.cat((x, y), dim=<span class="number">0</span>), torch.cat((x, y), dim=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># dim=0按行合并  dim=1按列合并</span></span><br><span class="line">x==y</span><br><span class="line"><span class="comment"># 返回一个矩阵，对应位置返回bool</span></span><br><span class="line">x.<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><pre><code>tensor([[1, 2, 3],        [3, 4, 5],        [4, 3, 2]])tensor([2., 2., 2., 2.])tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  5.,  6.,  7.],        [ 8.,  9., 10., 11.]])tensor([[2., 1., 5., 3.],        [3., 2., 2., 3.],        [3., 2., 3., 3.]])tensor(66.)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 广播(很容易错)</span></span><br><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">a, b</span><br><span class="line">a+b</span><br></pre></td></tr></table></figure><pre><code>tensor([[0, 1],        [1, 2],        [2, 3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x[-<span class="number">1</span>], x[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment"># x可以选择最后一个元素</span></span><br><span class="line"><span class="comment"># 可以[1:3]选择第二个和第三个元素[2,3)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  5.,  6.,  7.],        [ 8.,  9., 10., 11.]])(tensor([ 8.,  9., 10., 11.]), tensor([[ 4.,  5.,  6.,  7.],         [ 8.,  9., 10., 11.]]))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x=torch.zeros(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">x[<span class="number">1</span>,<span class="number">2</span>]=<span class="number">9</span></span><br><span class="line"><span class="built_in">print</span>(x) </span><br><span class="line">x[<span class="number">0</span>:<span class="number">2</span>,:]=<span class="number">12</span> <span class="comment">#列的全部</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">before = <span class="built_in">id</span>(y)</span><br><span class="line">y+=x</span><br><span class="line"><span class="built_in">id</span>(y)==before</span><br></pre></td></tr></table></figure><pre><code>tensor([[0., 0., 0., 0.],        [0., 0., 0., 0.],        [0., 0., 0., 0.]])tensor([[0., 0., 0., 0.],        [0., 0., 9., 0.],        [0., 0., 0., 0.]])tensor([[12., 12., 12., 12.],        [12., 12., 12., 12.],        [ 0.,  0.,  0.,  0.]])True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before=<span class="built_in">id</span>(x)</span><br><span class="line">x+=y</span><br><span class="line"><span class="built_in">id</span>(x)==before</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(os.path.join(<span class="string">&#x27;./&#x27;</span>, <span class="string">&quot;data&quot;</span>), exist_ok=<span class="literal">True</span>)</span><br><span class="line">data_file = os.path.join(<span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(data_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;NumRoom,Alley,Price\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;Na,Pave,127500\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;2,Na,199999\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;5,Jager,199999\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">&#x27;3,Bruse,199999\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(data_file)</span><br><span class="line">data</span><br></pre></td></tr></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th &#123;    vertical-align: top;&#125;.dataframe thead th &#123;    text-align: right;&#125;</code></pre><p></style></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>NumRoom</th>      <th>Alley</th>      <th>Price</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>Na</td>      <td>Pave</td>      <td>127500</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>Na</td>      <td>199999</td>    </tr>    <tr>      <th>2</th>      <td>5</td>      <td>Jager</td>      <td>199999</td>    </tr>    <tr>      <th>3</th>      <td>3</td>      <td>Bruse</td>      <td>199999</td>    </tr>  </tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">12</span>)</span><br><span class="line">b = a.reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">b[:] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 尽量不要乱改</span></span><br></pre></td></tr></table></figure><pre><code>tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])tensor([[2, 2, 2, 2],        [2, 2, 2, 2],        [2, 2, 2, 2]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">3.0</span>])</span><br><span class="line">y = torch.tensor([<span class="number">3.9</span>])</span><br><span class="line">x+y</span><br><span class="line"></span><br><span class="line">x = torch.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">20</span>).reshape(<span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.T)  <span class="comment"># 转置</span></span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">20</span>, dtype=torch.float32).reshape(<span class="number">5</span>, <span class="number">4</span>)  <span class="comment"># 重要</span></span><br><span class="line">b = a.clone()</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a*b)</span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>4torch.Size([4])tensor([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11],        [12, 13, 14, 15],        [16, 17, 18, 19]])tensor([[ 0,  4,  8, 12, 16],        [ 1,  5,  9, 13, 17],        [ 2,  6, 10, 14, 18],        [ 3,  7, 11, 15, 19]])tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  5.,  6.,  7.],        [ 8.,  9., 10., 11.],        [12., 13., 14., 15.],        [16., 17., 18., 19.]])tensor([[  0.,   1.,   4.,   9.],        [ 16.,  25.,  36.,  49.],        [ 64.,  81., 100., 121.],        [144., 169., 196., 225.],        [256., 289., 324., 361.]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">sum_1 = a.<span class="built_in">sum</span>(axis=<span class="number">0</span>)  <span class="comment"># 竖着求和</span></span><br><span class="line"><span class="built_in">print</span>(sum_1)</span><br><span class="line">sum_2 = a.<span class="built_in">sum</span>(axis=<span class="number">1</span>)  <span class="comment"># 横着求和</span></span><br><span class="line"><span class="built_in">print</span>(sum_2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11]])tensor([12, 15, 18, 21])tensor([ 6, 22, 38])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">12</span>, dtype=<span class="built_in">float</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a.mean())  <span class="comment"># 求平均值</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>()/a.numel())  <span class="comment"># 求平均值</span></span><br></pre></td></tr></table></figure><pre><code>tensor(5.5000, dtype=torch.float64)tensor(5.5000, dtype=torch.float64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保持维度求和</span></span><br><span class="line">a = torch.arange(<span class="number">12</span>, dtype=<span class="built_in">float</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">sum_a = a.<span class="built_in">sum</span>(axis=<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(sum_a)</span><br><span class="line">sum1=a.cumsum(axis=<span class="number">0</span>) <span class="comment">#累加，结果显示于最后一行</span></span><br><span class="line"><span class="built_in">print</span>(sum1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[ 6.],        [22.],        [38.]], dtype=torch.float64)tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  6.,  8., 10.],        [12., 15., 18., 21.]], dtype=torch.float64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">12</span>, dtype=<span class="built_in">float</span>)</span><br><span class="line">b = torch.ones(<span class="number">12</span>, dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.dot(a, b))</span><br><span class="line"></span><br><span class="line">a = torch.arange(<span class="number">12</span>, dtype=<span class="built_in">float</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">b = torch.ones((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">torch.<span class="built_in">sum</span>(a*b)  <span class="comment"># 点乘</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor(66., dtype=torch.float64)tensor(66., dtype=torch.float64)</code></pre><p><img src="https://img-blog.csdnimg.cn/c4a21b9dea474320bf13b7373126bf90.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = torch.tensor([<span class="number">3.0</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">torch.norm(u)</span><br></pre></td></tr></table></figure><pre><code>tensor(7.0711)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = torch.ones((<span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>(axis=<span class="number">1</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>(axis=<span class="number">0</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">sum</span>(axis=[<span class="number">0</span>, <span class="number">2</span>]).shape)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>tensor([[[1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.]],        [[1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.],         [1., 1., 1., 1.]]])torch.Size([2, 4])torch.Size([5, 4])torch.Size([5])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">4</span>, dtype=<span class="built_in">float</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a.grad)</span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>*torch.dot(a, a)</span><br><span class="line">b.backward()</span><br><span class="line"><span class="built_in">print</span>(a.grad)</span><br><span class="line"></span><br><span class="line">a.grad.zero_() <span class="comment">#下划线 重写内容</span></span><br><span class="line">y=a.<span class="built_in">sum</span>()</span><br><span class="line">y.backward()</span><br><span class="line"><span class="built_in">print</span>(a.grad)</span><br><span class="line"></span><br><span class="line">a.grad.zero_()</span><br><span class="line">y=a*a</span><br><span class="line">y.<span class="built_in">sum</span>().backward()</span><br><span class="line">a.grad</span><br><span class="line"></span><br><span class="line">a.grad.zero_()</span><br><span class="line">y=a*a</span><br><span class="line">u=y.detach()</span><br><span class="line">z=u*a</span><br><span class="line">z.<span class="built_in">sum</span>().backward()</span><br><span class="line">a.grad==u</span><br></pre></td></tr></table></figure><pre><code>Nonetensor([ 0.,  4.,  8., 12.], dtype=torch.float64)tensor([1., 1., 1., 1.], dtype=torch.float64)tensor([True, True, True, True])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">4</span>, dtype=<span class="built_in">float</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = torch.arange(<span class="number">4</span>, dtype=<span class="built_in">float</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">result = torch.empty(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">torch.add(a, b, out=result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">a.add_(b)  <span class="comment"># 一定要有下划线！！！下划线等于c++的&quot;+=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><pre><code>tensor([[0., 2.],        [0., 0.]])tensor([[0., 2.],        [4., 6.]])tensor([[0., 1.],        [2., 3.]], dtype=torch.float64)tensor([[0., 1.],        [2., 3.]], dtype=torch.float64)tensor([[0., 2.],        [4., 6.]], dtype=torch.float64)</code></pre><p><img src="https://img-blog.csdnimg.cn/1a0d8c70da294523b0a3426a2747971c.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = torch.arange(<span class="number">12</span>, dtype=<span class="built_in">float</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x[:, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>:<span class="number">3</span>, :])  <span class="comment"># 左闭右开</span></span><br></pre></td></tr></table></figure><pre><code>tensor([[ 0.,  1.,  2.,  3.],        [ 4.,  5.,  6.,  7.],        [ 8.,  9., 10., 11.]], dtype=torch.float64)tensor([ 2.,  6., 10.], dtype=torch.float64)tensor([[ 4.,  5.,  6.,  7.],        [ 8.,  9., 10., 11.]], dtype=torch.float64)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="机器学习" scheme="http://example.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>2018-HBCPC题解</title>
    <link href="http://example.com/2022/08/05/2018HBCPC/"/>
    <id>http://example.com/2022/08/05/2018HBCPC/</id>
    <published>2022-08-05T09:59:30.371Z</published>
    <updated>2022-08-05T10:05:17.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018HBCPC部分题解"><a href="#2018HBCPC部分题解" class="headerlink" title="2018HBCPC部分题解"></a>2018HBCPC部分题解</h1><h3 id="Mex-Query"><a href="#Mex-Query" class="headerlink" title="Mex Query"></a>Mex Query</h3><p><img src="https://img-blog.csdnimg.cn/78b1e15fab854d69829b1673d32b1880.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：http://newoj.acmclub.cn/problems/2011</span></span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> remp;</span><br><span class="line">            cin &gt;&gt; remp;</span><br><span class="line">            s.<span class="built_in">insert</span>(remp);</span><br><span class="line">        &#125;</span><br><span class="line">        set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">        <span class="type">int</span> cont = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it != cont)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; cont &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cont++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="icebound的商店"><a href="#icebound的商店" class="headerlink" title="icebound的商店"></a>icebound的商店</h3><p><img src="https://img-blog.csdnimg.cn/7b56213d43d54c969311edff868073fb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/78e710f6d20e4351a1c343a2f8cf6bde.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://newoj.acmclub.cn/problems/2012</span></span><br><span class="line"><span class="comment">// 完全背包</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000009</span></span><br><span class="line"><span class="type">int</span> bag[<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">3010</span>];</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    bag[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    bag[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">        bag[i] = bag[i - <span class="number">1</span>] + bag[i - <span class="number">2</span>];</span><br><span class="line">    ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = bag[i]; j &lt;= <span class="number">3010</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[j] += ans[j - bag[i]];</span><br><span class="line">            ans[j] %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tar;</span><br><span class="line">        cin &gt;&gt; tar;</span><br><span class="line">        cout &lt;&lt; ans[tar] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nim-Game"><a href="#Nim-Game" class="headerlink" title="Nim Game"></a>Nim Game</h3><p><img src="https://img-blog.csdnimg.cn/b401dfad9760498aa908a1fa20d70529.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7deb10becb0544e5ad5d09ed4541855f.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/8bc6b80757c94db599f51d739f034a42.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 博弈论：Nim</span></span><br><span class="line"><span class="comment">// http://newoj.acmclub.cn/problems/2013</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000100</span>];</span><br><span class="line"><span class="type">int</span> sum[<span class="number">1000100</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">1000100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="built_in">sizeof</span>(sum));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] ^ a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="type">int</span> result = sum[r] ^ sum[l - <span class="number">1</span>]; <span class="comment">//第i次结果</span></span><br><span class="line">            <span class="keyword">if</span> (result)</span><br><span class="line">                f[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                f[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = ans &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            ans += f[i];</span><br><span class="line">            ans = ans % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="神殿"><a href="#神殿" class="headerlink" title="神殿"></a>神殿</h3><p><img src="https://img-blog.csdnimg.cn/b7f12475c56944aba0e0cd157b61787f.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20e3f8f258204d43b9a02a4f611c4222.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://newoj.acmclub.cn/problems/2016</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> l, r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((l | l + <span class="number">1</span>) &gt; r) <span class="comment">//(l | l + 1)为的是将l的最低一位0尝试改成1</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        l = (l | l + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跑图"><a href="#跑图" class="headerlink" title="跑图"></a>跑图</h3><p><img src="https://img-blog.csdnimg.cn/fd6e64fb237e4100bac2f894c80f2302.png" alt="在这里插入图片描述"><br>TLE解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// TLE解法。。。</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> graph[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; point[<span class="number">250010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; graph[i][j];</span><br><span class="line">            <span class="keyword">if</span> (graph[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                point[cnt].x = i;</span><br><span class="line">                point[cnt].y = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= cnt; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (graph[i][j])</span><br><span class="line">                    ans[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i][j], <span class="built_in">abs</span>(point[k].x - i) + <span class="built_in">abs</span>(point[k].y - j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; ans[i][j];</span><br><span class="line">            <span class="keyword">if</span> (j != m)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// http://newoj.acmclub.cn/problems/2018</span></span><br><span class="line"><span class="comment">// 正解：BFS</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> graph[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line"><span class="type">int</span> dirx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; graph[i][j];</span><br><span class="line">            <span class="keyword">if</span> (graph[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                node remp;</span><br><span class="line">                remp.x = i, remp.y = j;</span><br><span class="line">                visit[i][j] = <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(remp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        node remp = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="type">int</span> rempx = remp.x, rempy = remp.y;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> nextx = rempx + dirx[i];</span><br><span class="line">            <span class="type">int</span> nexty = rempy + diry[i];</span><br><span class="line">            <span class="keyword">if</span> (visit[nextx][nexty] == <span class="literal">false</span> &amp;&amp; (nextx &lt;= n &amp;&amp; nextx &gt;= <span class="number">1</span> &amp;&amp; nexty &lt;= m &amp;&amp; nexty &gt;= <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                ans[nextx][nexty] = ans[rempx][rempy] + <span class="number">1</span>;</span><br><span class="line">                visit[nextx][nexty] = <span class="literal">true</span>; <span class="comment">//易错点！！一定要第一次更新完就马上标记！因为此时不标记，后面可能被二次标记，这时候就不是最近的了</span></span><br><span class="line">                node next;</span><br><span class="line">                next.x = nextx, next.y = nexty;</span><br><span class="line">                q.<span class="built_in">push</span>(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; ans[i][j];</span><br><span class="line">            <span class="keyword">if</span> (j != m)</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="520"><a href="#520" class="headerlink" title="520"></a>520</h3><p><img src="https://img-blog.csdnimg.cn/72619b70c994481eb4e4285fe0e87309.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 快速幂</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 20180520</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    a = a % c;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">fast_power</span>(<span class="number">2</span>, n, MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="icebound的账单"><a href="#icebound的账单" class="headerlink" title="icebound的账单"></a>icebound的账单</h3><p><img src="https://img-blog.csdnimg.cn/fb0b3a0683f04b37918bd724c7fed67f.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2018HBCPC部分题解&quot;&gt;&lt;a href=&quot;#2018HBCPC部分题解&quot; class=&quot;headerlink&quot; title=&quot;2018HBCPC部分题解&quot;&gt;&lt;/a&gt;2018HBCPC部分题解&lt;/h1&gt;&lt;h3 id=&quot;Mex-Query&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="HBCPC" scheme="http://example.com/categories/HBCPC/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>暑假集训week3</title>
    <link href="http://example.com/2022/08/05/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%ADweek3/"/>
    <id>http://example.com/2022/08/05/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%ADweek3/</id>
    <published>2022-08-05T07:42:19.627Z</published>
    <updated>2022-08-05T07:56:28.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暑假集训-week3-动态规划"><a href="#暑假集训-week3-动态规划" class="headerlink" title="暑假集训-week3-动态规划"></a>暑假集训-week3-动态规划</h1><h3 id="A-最大子段和"><a href="#A-最大子段和" class="headerlink" title="A - 最大子段和"></a>A - 最大子段和</h3><p><img src="https://img-blog.csdnimg.cn/238efd51413848d7a72c7baff0d327be.png" alt="在这里插入图片描述"><br>经典的最大子段和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 最大子段和(dp模板题)</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1115</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-9999999</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>] + a[i], a[i]);</span><br><span class="line">        ans = <span class="built_in">max</span>(dp[i], ans);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Max-Sum-Plus-Plus"><a href="#B-Max-Sum-Plus-Plus" class="headerlink" title="B - Max Sum Plus Plus"></a>B - Max Sum Plus Plus</h3><p><img src="https://img-blog.csdnimg.cn/8adfbd38bf444e779fa45f4e2d7220e9.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.csgrandeur.cn/contest/507882#problem/B</span></span><br><span class="line"><span class="comment">// 参考题解：https://blog.csdn.net/weixin_44035017/article/details/103318078?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165934103416782388023006%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=165934103416782388023006&amp;biz_id=0&amp;spm=1018.2226.3001.4187</span></span><br><span class="line"><span class="comment">// 二维dp+滚动数组优化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">9</span>;</span><br><span class="line"><span class="type">int</span> n, m, a[maxn], dp[maxn], lastmax[maxn];</span><br><span class="line"><span class="type">int</span> remp_sum, sum;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(lastmax, <span class="number">0</span>, <span class="built_in">sizeof</span>(lastmax));</span><br><span class="line">        remp_sum = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = <span class="number">-0x3f3f3f3f</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j - <span class="number">1</span>] + a[j], lastmax[j - <span class="number">1</span>] + a[j]);</span><br><span class="line">                lastmax[j - <span class="number">1</span>] = sum;</span><br><span class="line">                sum = <span class="built_in">max</span>(sum, dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-Longest-Ordered-Subsequence"><a href="#C-Longest-Ordered-Subsequence" class="headerlink" title="C - Longest Ordered Subsequence"></a>C - Longest Ordered Subsequence</h3><p><img src="https://img-blog.csdnimg.cn/a3ca8fddece64e1b96a7d34b3e4e1612.png" alt="在这里插入图片描述"><br>最大上升子序列模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 模板：最大上升子序列</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100010</span>, INF = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line"><span class="type">int</span> a[maxn], dp[maxn]; <span class="comment">// dp[i]代表以a[i]结尾的子序列最大长度</span></span><br><span class="line"><span class="type">int</span> n, ans = -INF;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[i])</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-采药"><a href="#D-采药" class="headerlink" title="D - 采药"></a>D - 采药</h3><p><img src="https://img-blog.csdnimg.cn/9a5693f4094949d88547866bc7cb25ea.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 01背包模板题</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> t, m;</span><br><span class="line"><span class="type">int</span> cost[maxn], value[maxn], bag[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; t &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; cost[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = t; j &gt;= cost[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            bag[j] = <span class="built_in">max</span>(bag[j - cost[i]] + value[i], bag[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; bag[t];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-Piggy-Bank"><a href="#E-Piggy-Bank" class="headerlink" title="E - Piggy-Bank"></a>E - Piggy-Bank</h3><p><img src="https://img-blog.csdnimg.cn/15f3afc44c1c49d3a3d3b71718d8fa33.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/11008687b1524b1ea0d8eff1aa6775ce.png" alt="在这里插入图片描述"><br>完全背包分别求最大和求最小<br>求最小时先全统一赋值为无穷大，然后再将初始赋值为0<br>顺便快读的板子也在这里了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://vjudge.csgrandeur.cn/contest/507882#problem/E</span></span><br><span class="line"><span class="comment">// 完全背包</span></span><br><span class="line"><span class="comment">// 快读不能和清缓存一起用！</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="type">int</span> t, e, f, n, m; <span class="comment">// n为个数，m为背包大小</span></span><br><span class="line"><span class="type">int</span> cost[maxn], value[maxn], bag[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(bag, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(bag));</span><br><span class="line">        e = <span class="built_in">read</span>(), f = <span class="built_in">read</span>(), n = <span class="built_in">read</span>();</span><br><span class="line">        m = f - e;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            value[i] = <span class="built_in">read</span>();</span><br><span class="line">            cost[i] = <span class="built_in">read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        bag[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> p = value[i];</span><br><span class="line">            <span class="type">int</span> w = cost[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = w; j &lt;= m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                bag[j] = <span class="built_in">min</span>(p + bag[j - w], bag[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bag[m] == <span class="number">0x3f3f3f3f</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;This is impossible.&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;The minimum amount of money in the piggy-bank is %d.\n&quot;</span>, bag[m]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-Dividing"><a href="#F-Dividing" class="headerlink" title="F - Dividing"></a>F - Dividing</h3><p><img src="https://img-blog.csdnimg.cn/47edf6090bff4b6cb67807105307c942.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d01b8e4fbed343a68155f790f1febfca.png" alt="在这里插入图片描述"><br>多重背包的二进制优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.csgrandeur.cn/contest/507882#problem/F</span></span><br><span class="line"><span class="comment">// 多重背包优化</span></span><br><span class="line"><span class="comment">// 二进制优化</span></span><br><span class="line"><span class="type">int</span> cnt[<span class="number">601000</span>];</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="type">int</span> value[<span class="number">601000</span>]; <span class="comment">//此题不需要空间</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">601000</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">        cin &gt;&gt; cnt[i], sum += cnt[i] * i;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">read</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">memset</span>(value, <span class="number">0</span>, <span class="built_in">sizeof</span>(value));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Collection #%d:\n&quot;</span>, ++flag);</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t be divided.\n\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> remp = cnt[i];</span><br><span class="line">            <span class="type">int</span> k = <span class="number">1</span>; <span class="comment">//二进制个数</span></span><br><span class="line">            <span class="keyword">while</span> (k &lt;= remp)</span><br><span class="line">            &#123;</span><br><span class="line">                num++;</span><br><span class="line">                value[num] = i * k;</span><br><span class="line">                remp -= k;</span><br><span class="line">                k *= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (remp &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num++;</span><br><span class="line">                value[num] = i * remp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = sum; j &gt;= value[i]; j--)</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j - value[i]] + value[i]); <span class="comment">//注意传进max内的两个参数</span></span><br><span class="line">        <span class="keyword">if</span> (dp[sum] == sum)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Can be divided.\n\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Can&#x27;t be divided.\n\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-石子合并"><a href="#G-石子合并" class="headerlink" title="G - 石子合并"></a>G - 石子合并</h3><p><img src="https://img-blog.csdnimg.cn/eb65a0b6516547d7826e15d3ee4b54e4.png" alt="在这里插入图片描述"><br>一个环形的链！！！<br>处理方法很有意思，直接将原链扩充二倍，在长度2*n的直链取一个长度n的链得到最大贡献值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 区间dp:https://www.luogu.com.cn/problem/P1880</span></span><br><span class="line"><span class="comment">// 因为是一个环形区间，我们可以通过将数组扩充两倍来实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">330</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[maxn], sum[maxn], dp_min[maxn][maxn], dp_max[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">d</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[j] - sum[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(dp_min, <span class="number">0x3f3f3f3f</span>, <span class="built_in">sizeof</span>(dp_min));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i + n] = a[i];</span><br><span class="line">        sum[i] = a[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">        dp_min[i][i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">1</span>; len &lt; n; len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = l + len; (r &lt;= n + n) &amp;&amp; (l &lt;= n + n); l++, r = l + len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt; r; k++) <span class="comment">//这个地方是小于号！！！加了等于的话就超出边界了！</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp_max[l][r] = <span class="built_in">max</span>(dp_max[l][r], dp_max[l][k] + dp_max[k + <span class="number">1</span>][r] + <span class="built_in">d</span>(l, r));</span><br><span class="line">                dp_min[l][r] = <span class="built_in">min</span>(dp_min[l][r], dp_min[l][k] + dp_min[k + <span class="number">1</span>][r] + <span class="built_in">d</span>(l, r));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max1 = <span class="number">-0x3f3f3f3f</span>, min1 = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        max1 = <span class="built_in">max</span>(max1, dp_max[i][i + n - <span class="number">1</span>]);</span><br><span class="line">        min1 = <span class="built_in">min</span>(min1, dp_min[i][i + n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; min1 &lt;&lt; endl</span><br><span class="line">         &lt;&lt; max1 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-能量项链"><a href="#H-能量项链" class="headerlink" title="H - 能量项链"></a>H - 能量项链</h3><p><img src="https://img-blog.csdnimg.cn/35fe627ab7c84e918b942a6b0425e413.png" alt="在这里插入图片描述"><br>首尾的处理很有意思<br><img src="https://img-blog.csdnimg.cn/915e026c66f44058b3c79407822ee74c.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 区间dp</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1063</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">3</span> * <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> head[maxn], tail[maxn];</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; head[i];</span><br><span class="line">        head[i + n] = head[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tail[i] = head[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tail[<span class="number">2</span> * n] = head[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>, r = l + len - <span class="number">1</span>; (l &lt;= <span class="number">2</span> * n) &amp;&amp; (r &lt;= <span class="number">2</span> * n); l++, r = l + len - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt; r; k++)</span><br><span class="line">                dp[l][r] = <span class="built_in">max</span>(dp[l][r], dp[l][k] + dp[k + <span class="number">1</span>][r] + head[l] * tail[k] * tail[r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[i][i + n <span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I-没有上司的舞会"><a href="#I-没有上司的舞会" class="headerlink" title="I - 没有上司的舞会"></a>I - 没有上司的舞会</h3><p><img src="https://img-blog.csdnimg.cn/35d5b2a0aabb4416b26f2da99e85f70d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/171aafbea33246aab596b1cbe1c4f0be.png" alt="在这里插入图片描述"><br>树形dp模板题，看注释<br>感觉树形dp的思路还是很清晰的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> happy[<span class="number">6010</span>], dp[<span class="number">6010</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">// dp[x][1]:代表x节点参选，此时以x为根的子树贡献最大和</span></span><br><span class="line"><span class="comment">// dp[x][0]:代表x节点不参选，此时以x为根的子树贡献最大和</span></span><br><span class="line"><span class="comment">// 传送门：https://www.luogu.com.cn/problem/P1352</span></span><br><span class="line"><span class="type">bool</span> visit[<span class="number">6010</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; son[<span class="number">6010</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//搜索</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fa = x;</span><br><span class="line">    dp[x][<span class="number">1</span>] = happy[x], dp[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; son[x].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s = son[x][i];</span><br><span class="line">        <span class="built_in">search</span>(s);</span><br><span class="line">        dp[x][<span class="number">1</span>] += dp[s][<span class="number">0</span>];</span><br><span class="line">        dp[x][<span class="number">0</span>] += <span class="built_in">max</span>(dp[s][<span class="number">0</span>], dp[s][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; happy[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, k;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; k;</span><br><span class="line">        visit[l] = <span class="literal">true</span>; <span class="comment">//他有父亲节点</span></span><br><span class="line">        son[k].<span class="built_in">push_back</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> root; <span class="comment">//找到根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (visit[i] == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">search</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(dp[root][<span class="number">1</span>], dp[root][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J-战略游戏"><a href="#J-战略游戏" class="headerlink" title="J - 战略游戏"></a>J - 战略游戏</h3><p><img src="https://img-blog.csdnimg.cn/9165b884c1a848928565871d0c72c49e.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P2016</span></span><br><span class="line"><span class="comment">// 树形dp</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">200000</span>;</span><br><span class="line"><span class="type">int</span> n, dp[maxn][<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; son[maxn];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">bool</span> visit[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[x][<span class="number">1</span>] = <span class="number">1</span>, dp[x][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> f = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; son[f].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s = son[f][i];</span><br><span class="line">        <span class="built_in">search</span>(s);</span><br><span class="line">        <span class="comment">//若该点无士兵，则子节点必须全部都有士兵占据</span></span><br><span class="line">        dp[f][<span class="number">0</span>] += dp[s][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 若该点没有士兵，子节点有无士兵都可，只要最小就行</span></span><br><span class="line">        dp[f][<span class="number">1</span>] += <span class="built_in">min</span>(dp[s][<span class="number">1</span>], dp[s][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k, tar;</span><br><span class="line">        cin &gt;&gt; tar &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> remp;</span><br><span class="line">            cin &gt;&gt; remp;</span><br><span class="line">            visit[remp] = <span class="literal">true</span>;</span><br><span class="line">            son[tar].<span class="built_in">push_back</span>(remp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (visit[i] == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">search</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(dp[root][<span class="number">0</span>], dp[root][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;暑假集训-week3-动态规划&quot;&gt;&lt;a href=&quot;#暑假集训-week3-动态规划&quot; class=&quot;headerlink&quot; title=&quot;暑假集训-week3-动态规划&quot;&gt;&lt;/a&gt;暑假集训-week3-动态规划&lt;/h1&gt;&lt;h3 id=&quot;A-最大子段和&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="集训" scheme="http://example.com/categories/%E9%9B%86%E8%AE%AD/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>暑假集训week2</title>
    <link href="http://example.com/2022/07/31/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%ADweek2/"/>
    <id>http://example.com/2022/07/31/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%ADweek2/</id>
    <published>2022-07-31T13:56:07.157Z</published>
    <updated>2022-07-31T13:58:41.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="暑假集训-week2图论"><a href="#暑假集训-week2图论" class="headerlink" title="暑假集训-week2图论"></a>暑假集训-week2图论</h1><h3 id="A-Desert-King"><a href="#A-Desert-King" class="headerlink" title="A - Desert King"></a>A - Desert King<img src="https://img-blog.csdnimg.cn/a08e10d55ad945b683189bb63fbdd573.png" alt="在这里插入图片描述"></h3><p>最优比例生成树+01规划<br>怎么说，，，，，<br>现学的，有点超出能力范围了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/506494#problem/A</span></span><br><span class="line"><span class="comment">// 最优比例生成树+01分数规划+prim算法+实数二分</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">    <span class="type">double</span> h;</span><br><span class="line">&#125; point[<span class="number">10010</span>];</span><br><span class="line"><span class="type">double</span> graph[<span class="number">10010</span>][<span class="number">10010</span>]; <span class="comment">//原图，表示各点之间距离</span></span><br><span class="line"><span class="type">double</span> cost[<span class="number">10010</span>][<span class="number">10010</span>];  <span class="comment">//表示代价，即高度</span></span><br><span class="line"><span class="type">bool</span> visit[<span class="number">10010</span>];</span><br><span class="line"><span class="type">double</span> dis[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">prim</span><span class="params">(<span class="type">double</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//外循环必须是n！因为ans要把所有的距离都加上！</span></span><br><span class="line">        dis[i] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visit[j] &amp;&amp; (x == <span class="number">-1</span> || dis[j] &lt; dis[x]))</span><br><span class="line">                x = j;</span><br><span class="line">        &#125;</span><br><span class="line">        visit[x] = <span class="number">1</span>;</span><br><span class="line">        ans += dis[x]; <span class="comment">//总距离更新</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span> (x != j)</span><br><span class="line">                dis[j] = <span class="built_in">min</span>(dis[j], cost[x][j] - tar * graph[x][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; point[i].x &gt;&gt; point[i].y &gt;&gt; point[i].h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                graph[i][j] = graph[j][i] = <span class="built_in">sqrt</span>((point[i].x - point[j].x) * (point[i].x - point[j].x) + (point[i].y - point[j].y) * (point[i].y - point[j].y)); <span class="comment">//距离差</span></span><br><span class="line">                cost[i][j] = cost[j][i] = <span class="built_in">fabs</span>(point[i].h - point[j].h);                                                                                         <span class="comment">//高度差</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="type">double</span> l = <span class="number">0</span>, r = <span class="number">1e5</span>;</span><br><span class="line">        <span class="keyword">while</span> (r - l &gt; <span class="number">1e-5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">prim</span>(mid) &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P-最小生成树"><a href="#P-最小生成树" class="headerlink" title="P - 最小生成树"></a>P - 最小生成树<img src="https://img-blog.csdnimg.cn/fe37615130d84b14ac47a9044fe40bea.png" alt="在这里插入图片描述"></h3><p>克鲁斯卡尔算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="type">int</span> cost;</span><br><span class="line">&#125; path[<span class="number">200020</span>];</span><br><span class="line"><span class="type">int</span> fa[<span class="number">5010</span>];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[x] != x)</span><br><span class="line">        <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[<span class="built_in">find</span>(x)] = fa[<span class="built_in">find</span>(y)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; path[i].s &gt;&gt; path[i].e &gt;&gt; path[i].cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(path + <span class="number">1</span>, path + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s = path[i].s;</span><br><span class="line">        <span class="type">int</span> e = path[i].e;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(s) != <span class="built_in">find</span>(e))</span><br><span class="line">        &#123;</span><br><span class="line">            ans += path[i].cost;</span><br><span class="line">            <span class="built_in">connect</span>(s, e);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;orz&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-单源最短路径（标准版）"><a href="#Q-单源最短路径（标准版）" class="headerlink" title="Q - 单源最短路径（标准版）"></a>Q - 单源最短路径（标准版）</h3><p><img src="https://img-blog.csdnimg.cn/de50ba27c4f7410aa11e697aed247862.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3300a1e15889483490b6b10834f16348.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 迪杰斯特拉(堆优化)</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P4779#submit</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">100010</span>, maxn2 = <span class="number">500010</span>;</span><br><span class="line"><span class="type">int</span> head[maxn], dis[maxn], cnt;</span><br><span class="line"><span class="type">bool</span> visit[maxn];</span><br><span class="line"><span class="type">int</span> n, m, s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, dis, next;</span><br><span class="line">&#125; e[maxn2];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    e[cnt].dis = d;</span><br><span class="line">    e[cnt].to = v;</span><br><span class="line">    e[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dis;</span><br><span class="line">    <span class="type">int</span> pos;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x.dis &lt; dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        dis[i] = <span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">register</span> <span class="type">int</span> u, v, d;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;d);</span><br><span class="line">        <span class="built_in">add</span>(u, v, d);</span><br><span class="line">    &#125;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.<span class="built_in">push</span>((node)&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        node tmp = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> x = tmp.pos, d = tmp.dis;</span><br><span class="line">        <span class="keyword">if</span> (visit[x])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        visit[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = e[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (dis[y] &gt; dis[x] + e[i].dis)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[y] = dis[x] + e[i].dis;</span><br><span class="line">                <span class="keyword">if</span> (!visit[y])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>((node)&#123;dis[y], y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dis[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="R-最近公共祖先（LCA）"><a href="#R-最近公共祖先（LCA）" class="headerlink" title="R - 最近公共祖先（LCA）"></a>R - 最近公共祖先（LCA）</h3><p><img src="https://img-blog.csdnimg.cn/762439eaabc74282821a35ae03107eeb.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1000010</span></span><br><span class="line"><span class="comment">// LCA问题</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3379</span></span><br><span class="line"><span class="type">int</span> cnt, n, m, s;</span><br><span class="line"><span class="type">int</span> to[maxn], Next[maxn], head[maxn];</span><br><span class="line"><span class="type">int</span> d[maxn], f[maxn][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> e)</span> <span class="comment">//加边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++cnt] = e, Next[cnt] = head[s], head[s] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(s);</span><br><span class="line">    d[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> tar = to[i];</span><br><span class="line">            <span class="keyword">if</span> (d[tar])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            d[tar] = d[x] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            f[tar][<span class="number">0</span>] = x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= t; j++)</span><br><span class="line">                f[tar][j] = f[f[tar][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            q.<span class="built_in">push</span>(tar);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d[x] &gt; d[y])</span><br><span class="line">        <span class="built_in">swap</span>(x, y); <span class="comment">//默认x小于y</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (d[f[y][i]] &gt;= d[x])</span><br><span class="line">            y = f[y][i];</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = t; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (f[x][i] != f[y][i])</span><br><span class="line">            x = f[x][i], y = f[y][i];</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">    t = (<span class="type">int</span>)(<span class="built_in">log</span>(n) / <span class="built_in">log</span>(<span class="number">2</span>)) + <span class="number">1</span>; <span class="comment">//层数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s, e;</span><br><span class="line">        cin &gt;&gt; s &gt;&gt; e;</span><br><span class="line">        <span class="built_in">add</span>(s, e);</span><br><span class="line">        <span class="built_in">add</span>(e, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">lca</span>(a, b)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="S-负环"><a href="#S-负环" class="headerlink" title="S - 负环"></a>S - 负环</h3><p><img src="https://img-blog.csdnimg.cn/5bdfe065754e46058d1105a01ac3216d.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 判断负环https://www.luogu.com.cn/problem/P3385</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 1000000</span></span><br><span class="line"><span class="type">int</span> T, n, m;</span><br><span class="line"><span class="type">int</span> to[maxn], edge[maxn], head[maxn], Next[maxn], cnt;</span><br><span class="line"><span class="type">int</span> dist[maxn];</span><br><span class="line"><span class="type">bool</span> visit[maxn];</span><br><span class="line"><span class="type">int</span> num[maxn]; <span class="comment">//判断负环</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++cnt] = y, edge[cnt] = z, Next[cnt] = head[x], head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dist));</span><br><span class="line">        <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="built_in">sizeof</span>(num));</span><br><span class="line">        <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in">sizeof</span>(head));</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u, v, w;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">            <span class="keyword">if</span> (w &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">add</span>(u, v, w);</span><br><span class="line">                <span class="built_in">add</span>(v, u, w);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">add</span>(u, v, w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>, visit[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            visit[x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> y = to[i], z = edge[i];</span><br><span class="line">                <span class="keyword">if</span> (dist[y] &gt; dist[x] + z)</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[y] = dist[x] + z;</span><br><span class="line">                    num[y] = num[x] + <span class="number">1</span>; <span class="comment">//这一行和下面的num判断去掉就是SPFA了</span></span><br><span class="line">                    <span class="keyword">if</span> (num[y] &gt;= n)</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!visit[y])</span><br><span class="line">                        q.<span class="built_in">push</span>(y), visit[y] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="T-二分图最大匹配"><a href="#T-二分图最大匹配" class="headerlink" title="T - 二分图最大匹配"></a>T - 二分图最大匹配</h3><p><img src="https://img-blog.csdnimg.cn/5a3f835af6b746099485b02f3e4ef13d.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门;https://www.luogu.com.cn/problem/P3386</span></span><br><span class="line"><span class="comment">// 匈牙利算法</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 10000100</span></span><br><span class="line"><span class="type">int</span> n, m, e, ans;</span><br><span class="line"><span class="type">bool</span> f[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> to[maxn], Next[maxn], head[maxn], cnt;</span><br><span class="line"><span class="type">int</span> match[maxn];</span><br><span class="line"><span class="type">bool</span> visit[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    to[++cnt] = y, Next[cnt] = head[x], head[x] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = to[i];</span><br><span class="line">        <span class="keyword">if</span> (visit[y] == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            visit[y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!match[y] || <span class="built_in">dfs</span>(match[y]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[y] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; e;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= e; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="keyword">if</span> (u &lt;= n &amp;&amp; v &lt;= m)</span><br><span class="line">            <span class="built_in">add</span>(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dfs</span>(i))</span><br><span class="line">            ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;暑假集训-week2图论&quot;&gt;&lt;a href=&quot;#暑假集训-week2图论&quot; class=&quot;headerlink&quot; title=&quot;暑假集训-week2图论&quot;&gt;&lt;/a&gt;暑假集训-week2图论&lt;/h1&gt;&lt;h3 id=&quot;A-Desert-King&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="集训" scheme="http://example.com/categories/%E9%9B%86%E8%AE%AD/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>暑假集训week1</title>
    <link href="http://example.com/2022/07/21/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <id>http://example.com/2022/07/21/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E7%AC%AC%E4%B8%80%E5%91%A8/</id>
    <published>2022-07-21T12:21:16.267Z</published>
    <updated>2022-07-22T11:47:39.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Week1-题解"><a href="#Week1-题解" class="headerlink" title="Week1 题解"></a>Week1 题解</h1><h3 id="A-Raising-Modulo-Numbers"><a href="#A-Raising-Modulo-Numbers" class="headerlink" title="A - Raising Modulo Numbers"></a>A - Raising Modulo Numbers</h3><p><img src="https://img-blog.csdnimg.cn/5aa614539a794bd3a845ee2c84e9baa1.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bad17b38f9024574955c4673ecc918c0.png" alt="在这里插入图片描述"></p><p>快速幂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/A  </span></span><br><span class="line"><span class="type">int</span> z;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    a %= c;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ans * a) % c;</span><br><span class="line">        &#125;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = (a * a) % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; z;</span><br><span class="line">    <span class="keyword">while</span> (z--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> M, H;</span><br><span class="line">        cin &gt;&gt; M &gt;&gt; H;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= H; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> a, b;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            ans += <span class="built_in">fast_power</span>(a, b, M);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans % M &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-起床困难综合症"><a href="#B-起床困难综合症" class="headerlink" title="B - 起床困难综合症"></a>B - 起床困难综合症</h3><p><img src="https://img-blog.csdnimg.cn/ff5da60b27a64b75b8f5c5d9fa1722ad.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/99791e10a8844efa8bb54b4f03375369.png" alt="在这里插入图片描述"></p><p>位运算，因为将数据转化为二进制表示后，AND，OR，XOR运算每一位计算互相独立，我们考虑贪心，直接每一位讨论，让每一位最后结果尽可能大</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/B</span></span><br><span class="line"><span class="comment">// 位运算（每一位分别考虑）</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    string op;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">&#125; door[<span class="number">110000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> tar, <span class="type">int</span> bit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tar2 = door[i].t &gt;&gt; bit &amp; <span class="number">1</span>; <span class="comment">//取从右往左第bit位（从0开始）</span></span><br><span class="line">        <span class="keyword">if</span> (door[i].op == <span class="string">&quot;AND&quot;</span>)</span><br><span class="line">            tar = tar2 &amp; tar;</span><br><span class="line">        <span class="keyword">if</span> (door[i].op == <span class="string">&quot;XOR&quot;</span>)</span><br><span class="line">            tar = tar2 ^ tar;</span><br><span class="line">        <span class="keyword">if</span> (door[i].op == <span class="string">&quot;OR&quot;</span>)</span><br><span class="line">            tar = tar2 | tar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; door[i].op &gt;&gt; door[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// int limit = 0;</span></span><br><span class="line">    <span class="comment">// while (m)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     m = m &gt;&gt; 1;</span></span><br><span class="line">    <span class="comment">//     limit++;</span></span><br><span class="line">    <span class="comment">// &#125; //求m的最高位数</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tarm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> bit = <span class="number">30</span>; bit &gt;= <span class="number">0</span>; bit--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res0 = <span class="built_in">cal</span>(<span class="number">0</span>, bit); <span class="comment">//若bit位填0</span></span><br><span class="line">        <span class="type">int</span> res1 = <span class="built_in">cal</span>(<span class="number">1</span>, bit); <span class="comment">//若bit位填1</span></span><br><span class="line">        <span class="type">int</span> m0 = tarm;</span><br><span class="line">        <span class="type">int</span> m1 = tarm + (<span class="number">1</span> &lt;&lt; bit);</span><br><span class="line">        <span class="keyword">if</span> (m1 &lt;= m &amp;&amp; res1 &gt; res0)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += res1 &lt;&lt; bit;</span><br><span class="line">            tarm = m1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res0 &gt;= res1)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += res0 &lt;&lt; bit;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-激光炸弹"><a href="#C-激光炸弹" class="headerlink" title="C - 激光炸弹"></a>C - 激光炸弹</h3><p><img src="https://img-blog.csdnimg.cn/6dd53114d1964d7c82bc715edf73b32f.png" alt="在这里插入图片描述"></p><p>二维前缀和模板题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, r;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5011</span>][<span class="number">5011</span>];<span class="comment">//数组不能开5001，否则会tle（离谱）</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P2280</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y, temp;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; temp;</span><br><span class="line">        x++, y++; <span class="comment">//本题坐标从0开始</span></span><br><span class="line">        a[x][y] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5001</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5001</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j] += a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt;= <span class="number">5001</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = r; j &lt;= <span class="number">5001</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, a[i][j] - a[i - r][j] - a[i][j - r] + a[i - r][j - r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="D-Tallest-Cow"><a href="#D-Tallest-Cow" class="headerlink" title="D - Tallest Cow"></a>D - Tallest Cow</h3><p><img src="https://img-blog.csdnimg.cn/e57afd3f7259484cb47b79dfbbf8ac5e.png" alt="在这里插入图片描述"><br>差分模板题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/D</span></span><br><span class="line"><span class="type">int</span> N, I, H, R;</span><br><span class="line"><span class="type">int</span> cf[<span class="number">10010</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">10010</span>];</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; visit[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; I &gt;&gt; H &gt;&gt; R;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= R; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b; <span class="comment">// a与b可以互相看见，说明下标a+1到下标b-1都要减去1</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">            <span class="built_in">swap</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span> (visit[a][b])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        cf[a + <span class="number">1</span>]--;</span><br><span class="line">        cf[b]++;</span><br><span class="line">        visit[a][b] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + cf[i];</span><br><span class="line">        cout &lt;&lt; a[i] + H &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E-Best-Cow-Fences"><a href="#E-Best-Cow-Fences" class="headerlink" title="E - Best Cow Fences"></a>E - Best Cow Fences</h3><p><img src="https://img-blog.csdnimg.cn/531e88a702f14a34be16100b66166e4d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ed2ad5027de74e08a767509142f5c0b3.png" alt="在这里插入图片描述"><br>实数范围二分<br>蓝书有模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/E</span></span><br><span class="line"><span class="type">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"><span class="type">int</span> n, f;</span><br><span class="line"><span class="type">double</span> a[<span class="number">100100</span>];</span><br><span class="line"><span class="type">double</span> sum[<span class="number">100100</span>];</span><br><span class="line"><span class="type">double</span> b[<span class="number">100100</span>], pre[<span class="number">100100</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[i] = a[i] - ans + sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> min1 = <span class="number">1e5</span>;</span><br><span class="line">    <span class="type">double</span> judge = <span class="number">-1e5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = f; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min1 = <span class="built_in">min</span>(sum[i - f], min1);</span><br><span class="line">        judge = <span class="built_in">max</span>(sum[i] - min1, judge);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (judge &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%ld %ld&quot;</span>, &amp;n, &amp;f);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> l = <span class="number">-1e5</span>, r = <span class="number">1e5</span>;</span><br><span class="line">    <span class="keyword">while</span> (l + eps &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">int</span>(r * <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F-借教室"><a href="#F-借教室" class="headerlink" title="F - 借教室"></a>F - 借教室</h3><p><img src="https://img-blog.csdnimg.cn/63c54fe2479847e8bf8553b951c4d3d2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/396d835aaa9d4202bfa8aeda36af1b0a.png" alt="在这里插入图片描述"><br>二分查找模板题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//https://vjudge.net/contest/505193#problem/F</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000000</span>];</span><br><span class="line"><span class="type">int</span> cf[<span class="number">10000000</span>];</span><br><span class="line"><span class="type">int</span> temp[<span class="number">10000000</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">&#125; ask[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in">sizeof</span>(temp));</span><br><span class="line">    <span class="built_in">memset</span>(cf, <span class="number">0</span>, <span class="built_in">sizeof</span>(cf));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ans; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s = ask[i].s;</span><br><span class="line">        <span class="type">int</span> e = ask[i].e;</span><br><span class="line">        <span class="type">int</span> n = ask[i].num;</span><br><span class="line">        cf[s] += n;</span><br><span class="line">        cf[e + <span class="number">1</span>] -= n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[i] = temp[i - <span class="number">1</span>] + cf[i];</span><br><span class="line">        <span class="keyword">if</span> (temp[i] &gt; a[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; ask[i].num &gt;&gt; ask[i].s &gt;&gt; ask[i].e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = m;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">check</span>(m))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-Cinema"><a href="#G-Cinema" class="headerlink" title="G - Cinema"></a>G - Cinema</h3><p><img src="https://img-blog.csdnimg.cn/669af679b76d403fa6afc549dd58a853.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ed7ab42323624d6f9ff6299fb70d98bf.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2d9bf7540cba40699025ba902d95d185.png" alt="在这里插入图片描述"><br>离散化，思路有点难懂，模板在蓝书上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//https://vjudge.net/contest/505193#problem/G</span></span><br><span class="line"><span class="type">int</span> n, m, a[<span class="number">200010</span>], audio[<span class="number">200010</span>], subtitute[<span class="number">200010</span>];</span><br><span class="line"><span class="type">int</span> lan[<span class="number">200010</span> * <span class="number">3</span>], tot;</span><br><span class="line"><span class="type">int</span> uni[<span class="number">200010</span> * <span class="number">3</span>], num;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">200010</span> * <span class="number">3</span>]; <span class="comment">//记录离散化后科学家会的语言的出现次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> yuan)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(uni + <span class="number">1</span>, uni + <span class="number">1</span> + num, yuan) - uni; <span class="comment">//返回该数的离散化结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;a[i]);</span><br><span class="line">        lan[++tot] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;audio[i]);</span><br><span class="line">        lan[++tot] = audio[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%ld&quot;</span>, &amp;subtitute[i]);</span><br><span class="line">        lan[++tot] = subtitute[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(lan + <span class="number">1</span>, lan + tot + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span> || lan[i] != lan[i - <span class="number">1</span>])</span><br><span class="line">            uni[++num] = lan[i];</span><br><span class="line">    &#125; <span class="comment">//离散化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[<span class="built_in">find</span>(a[i])]++; <span class="comment">//统计所有科学家会的语言出现有多少</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans0 = <span class="number">0</span>;           <span class="comment">// 存当前答案</span></span><br><span class="line">    <span class="type">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>; <span class="comment">//存当前答案的各个参数，字幕和音频满足情况</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> anx = ans[<span class="built_in">find</span>(audio[i])];</span><br><span class="line">        <span class="type">int</span> any = ans[<span class="built_in">find</span>(subtitute[i])];</span><br><span class="line">        <span class="keyword">if</span> (anx &gt; ans1 || (anx == ans1 &amp; any &gt; ans2))</span><br><span class="line">        &#123;</span><br><span class="line">            ans0 = i; <span class="comment">//该电影入选</span></span><br><span class="line">            ans1 = anx;</span><br><span class="line">            ans2 = any;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans0 == <span class="number">0</span>) <span class="comment">//所有电影的字幕和音频都对不上，随便选好了</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-Balanced-Lineup"><a href="#H-Balanced-Lineup" class="headerlink" title="H - Balanced Lineup"></a>H - Balanced Lineup</h3><p><img src="https://img-blog.csdnimg.cn/17205bfceca745458c7cc455dba699a5.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/49ebaa2a7888400dac063a41010d49ab.png" alt="在这里插入图片描述"><br>ST表。可以当模板直接用<br>蓝书上也有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/H</span></span><br><span class="line"><span class="comment">// ST 表</span></span><br><span class="line"><span class="type">int</span> N, Q;</span><br><span class="line"><span class="type">int</span> cow[<span class="number">50010</span>];</span><br><span class="line"><span class="type">int</span> f1[<span class="number">500010</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> f2[<span class="number">500010</span>][<span class="number">100</span>];</span><br><span class="line"><span class="comment">// f[i][j]代表从[i,i+2^j-1]这段区间的极值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        f1[i][<span class="number">0</span>] = cow[i], f2[i][<span class="number">0</span>] = cow[i];</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">log</span>(N) / <span class="built_in">log</span>(<span class="number">2</span>) + <span class="number">1</span>; <span class="comment">//子区间数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; t; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f1[i][j] = <span class="built_in">max</span>(f1[i][j - <span class="number">1</span>], f1[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">            f2[i][j] = <span class="built_in">min</span>(f2[i][j - <span class="number">1</span>], f2[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ST_query1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f1[l][k], f1[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ST_query2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log</span>(r - l + <span class="number">1</span>) / <span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(f2[l][k], f2[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;Q);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; cow[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pre_work</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Q; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">ST_query1</span>(l, r) - <span class="built_in">ST_query2</span>(l, r) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I-Best-Cow-Line"><a href="#I-Best-Cow-Line" class="headerlink" title="I - Best Cow Line"></a>I - Best Cow Line</h3><p><img src="https://img-blog.csdnimg.cn/d8164c77adab4650afee973356f331a8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b3d6faac66454e07b875710ee00fe24c.png" alt="在这里插入图片描述"></p><p>emmm怎么说，应该算贪心+双向队列，每次只能前后找，我们选择找最小的<br>关键是，假如遇到前后相同应该怎么选择<br>比如：ABBCA<br>此时前后都是A，但是我们想让字典序最小，应该先取第一个A，因为取完那个A我们就可以用后面的B<br>所以思路有了，定俩个指针，一个前一个后，遇到相同的就往中间扫，直到遇到不一样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/I</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; a;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        cin &gt;&gt; ch;</span><br><span class="line">        a.<span class="built_in">push_back</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (a.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">char</span>&gt;::iterator it1 = a.<span class="built_in">begin</span>();</span><br><span class="line">        vector&lt;<span class="type">char</span>&gt;::iterator it2 = a.<span class="built_in">end</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (*it1 == *it2 &amp;&amp; it1 &lt;= it2)</span><br><span class="line">        &#123;</span><br><span class="line">            it1++;</span><br><span class="line">            it2--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; &quot;!&quot; &lt;&lt; *it1 &lt;&lt; &quot;! &quot; &lt;&lt; *it2 &lt;&lt; &quot; !&quot;;</span></span><br><span class="line">        <span class="keyword">if</span> (it1 &lt; it2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (*it1 &lt; *it2)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(a.<span class="built_in">front</span>());</span><br><span class="line">                a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>());</span><br><span class="line">                <span class="comment">// cout &lt;&lt; &quot;called &quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (*it1 &gt; *it2)</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(a.<span class="built_in">back</span>());</span><br><span class="line">                a.<span class="built_in">pop_back</span>();</span><br><span class="line">                <span class="comment">// cout &lt;&lt; &quot;here &quot;;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(a.<span class="built_in">front</span>());</span><br><span class="line">            a.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; a.size(); i++)</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; a[i];</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = ans.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">80</span> == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l % <span class="number">80</span>)</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J-Fence-Repair"><a href="#J-Fence-Repair" class="headerlink" title="J - Fence Repair"></a>J - Fence Repair</h3><p><img src="https://img-blog.csdnimg.cn/a8a502c6aaab456991c3c004a655e223.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/494497dee1964a50b0b303294980aee6.png" alt="在这里插入图片描述"><br>Huffman树<br>用小根堆来构造<br>建议当板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/J</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1090</span></span><br><span class="line"><span class="comment">// Huffman树(此一类问题)蓝书P86</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">int</span> heap[<span class="number">20010</span>], heap_size = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    heap[++heap_size] = tar;</span><br><span class="line">    <span class="type">int</span> son = heap_size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (heap[fa] &lt;= heap[son])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(heap[fa], heap[son]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_min</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> heap[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span> <span class="comment">//清除堆顶</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    heap[<span class="number">1</span>] = heap[heap_size--];</span><br><span class="line">    <span class="type">int</span> fa = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (fa * <span class="number">2</span> &lt;= heap_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> son = fa * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (son &lt; heap_size &amp;&amp; heap[son + <span class="number">1</span>] &lt; heap[son]) <span class="comment">//找最小的上来</span></span><br><span class="line">            son++;</span><br><span class="line">        <span class="keyword">if</span> (heap[fa] &lt;= heap[son])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(heap[son], heap[fa]);</span><br><span class="line">        fa = son;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="built_in">add</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp1, remp2;</span><br><span class="line">        remp1 = <span class="built_in">get_min</span>();</span><br><span class="line">        <span class="built_in">extract</span>();</span><br><span class="line">        remp2 = <span class="built_in">get_min</span>();</span><br><span class="line">        <span class="built_in">extract</span>();</span><br><span class="line">        ans += (remp1 + remp2);</span><br><span class="line">        <span class="built_in">add</span>(remp1 + remp2);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="K-Radar-Installation"><a href="#K-Radar-Installation" class="headerlink" title="K - Radar Installation"></a>K - Radar Installation</h3><p><img src="https://img-blog.csdnimg.cn/75ba41abba2748ad835ed2dc7456a644.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/89c821d55d4c47b1a79b5b06c513e7be.png" alt="在这里插入图片描述"><br>一个贪心问题，我们以每个岛屿以d维半径画圆，与x轴的交点即必须有雷达站的区域<br>我们要保证可能少的点让每个线段都能兼顾<br>我们采用贪心思想<br>如果从左往右找，尽可能让雷达站靠右建立<br><img src="https://img-blog.csdnimg.cn/5eb3e755029241a6b75d0b4391625b9e.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 参考题解：https://www.luogu.com.cn/problem/solution/UVA1193</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/UVA1193</span></span><br><span class="line"><span class="comment">// 贪心</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> l;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line">&#125; r[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; d)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> &amp;&amp; d == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> x, y;</span><br><span class="line">            cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            <span class="type">double</span> temp = d * d - y * y;</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">double</span> limit = <span class="built_in">sqrt</span>(temp);</span><br><span class="line">            r[i].l = x - limit;</span><br><span class="line">            r[i].r = x + limit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">false</span> || d &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case %d: -1\n&quot;</span>, ++num);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(r + <span class="number">1</span>, r + <span class="number">1</span> + n, cmp);</span><br><span class="line">        <span class="type">double</span> rlimit = <span class="number">-0x7fffffff</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> templ = r[i].l;</span><br><span class="line">            <span class="type">double</span> tempr = r[i].r;</span><br><span class="line">            <span class="keyword">if</span> (rlimit &lt; templ)</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                rlimit = tempr;</span><br><span class="line">            &#125;</span><br><span class="line">            rlimit = <span class="built_in">min</span>(rlimit, tempr); <span class="comment">//因为我们排序的时候只考虑了左端点，所以必须取最小的，保证这些能兼顾</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>, ++num, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L-Corral-the-Cows"><a href="#L-Corral-the-Cows" class="headerlink" title="L - Corral the Cows"></a>L - Corral the Cows</h3><p><img src="https://img-blog.csdnimg.cn/b777b6f27f1b48b7a384b70fc953ea67.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d012c160ed1c41c29acc38983ae3b9cc.png" alt="在这里插入图片描述"><br>题目要我们找最适合的边长，第一反应就是二分查找，check验证，但是如何去写这个check函数呢<br>坐标最大可以到10000，直接找肯定会爆，我们考虑离散化， 利用离散化点为端点去维护一个区域的包含的点，所以我们又能想到二维前缀和</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://vjudge.net/contest/505193#problem/L</span></span><br><span class="line"><span class="comment">// 洛谷：  https://www.luogu.com.cn/problem/P2862</span></span><br><span class="line"><span class="comment">// 二分+前缀和+离散化</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; clover[<span class="number">510</span>];</span><br><span class="line"><span class="type">int</span> num[<span class="number">1000000</span>], cnt;</span><br><span class="line"><span class="type">int</span> N, C;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">5000</span>][<span class="number">5000</span>]; <span class="comment">//离散化后的前缀和数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_pos</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(num + <span class="number">1</span>, num + <span class="number">1</span> + cnt, x) - num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x1, x2; <span class="comment">//横坐标的离散化</span></span><br><span class="line">    <span class="type">int</span> y1, y2; <span class="comment">//纵坐标的离散化</span></span><br><span class="line">    <span class="keyword">for</span> (x1 = <span class="number">1</span>, x2 = <span class="number">1</span>; x2 &lt;= cnt; x2++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (num[x2] - num[x1] + <span class="number">1</span> &gt; ans) <span class="comment">//一定要加1！！！因为(x1,y1)是算在里面的！</span></span><br><span class="line">            x1++;</span><br><span class="line">        <span class="keyword">for</span> (y1 = <span class="number">1</span>, y2 = <span class="number">1</span>; y2 &lt;= cnt; y2++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (num[y2] - num[y1] + <span class="number">1</span> &gt; ans)</span><br><span class="line">                y1++;</span><br><span class="line">            <span class="keyword">if</span> (sum[x2][y2] - sum[x1 - <span class="number">1</span>][y2] - sum[x2][y1 - <span class="number">1</span>] + sum[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>] &gt;= C)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; C &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; clover[i].x &gt;&gt; clover[i].y;</span><br><span class="line">        num[++cnt] = clover[i].x;</span><br><span class="line">        num[++cnt] = clover[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始构造离散化</span></span><br><span class="line">    <span class="built_in">sort</span>(num + <span class="number">1</span>, num + <span class="number">1</span> + cnt);</span><br><span class="line">    cnt = <span class="built_in">unique</span>(num + <span class="number">1</span>, num + <span class="number">1</span> + cnt) - num - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//初始化前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = clover[i].x;</span><br><span class="line">        <span class="type">int</span> y = clover[i].y;</span><br><span class="line">        sum[<span class="built_in">get_pos</span>(x)][<span class="built_in">get_pos</span>(y)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt; j++)</span><br><span class="line">            sum[i][j] += sum[i - <span class="number">1</span>][j] + sum[i][j - <span class="number">1</span>] - sum[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//前缀和初始化结束</span></span><br><span class="line">    <span class="type">int</span> r = <span class="number">10000</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="M-超级钢琴"><a href="#M-超级钢琴" class="headerlink" title="M - 超级钢琴"></a>M - 超级钢琴</h3><p><img src="https://img-blog.csdnimg.cn/0d8dbc5de9444e48897fcca0074b394e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b2472c6cfb094e9483376388ae24a218.png" alt="在这里插入图片描述"></p><h3 id="N-糖果传递"><a href="#N-糖果传递" class="headerlink" title="N - 糖果传递"></a>N - 糖果传递</h3><p><img src="https://img-blog.csdnimg.cn/8f8aaddf879544e296d03e9e7e599a59.png" alt="在这里插入图片描述"><br>一个很有意思的题，建议先看线性的模型：<a href="https://www.luogu.com.cn/problem/P1031">拆分纸牌</a><br>我们的策略就是：将所有的数字和平均值比较，从一端开始（设为a[i]）如果该值和平均值不相同，我们通过和a[i+1]进行交换，从而使a[i]和平均值相同，依次更新<br><img src="https://img-blog.csdnimg.cn/8e0f8f7f3ee94eb0bb1ea011889e42bc.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1031</span></span><br><span class="line"><span class="type">int</span> n, a[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> aver = sum / n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] -= aver;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i + <span class="number">1</span>] += a[i];</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再回来看这个题<br>原理一样，推导如下：（搬运洛谷题解）<br><img src="https://img-blog.csdnimg.cn/6ee863af2c374437a6629434b7251a0e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/77d56394e4e94d72ad325f920247f297.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f6dca9ea9c864b3d8546a0f3757002c0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d18bea266e5c4681ab0133f358719343.png" alt="在这里插入图片描述"></p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 传送门：https://www.luogu.com.cn/problem/P2512</span></span><br><span class="line"><span class="comment">// 题解：https://www.luogu.com.cn/problem/solution/P2512</span></span><br><span class="line"><span class="comment">// 中位数！</span></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">1000010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> aver = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        aver += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    aver /= m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] = c[i - <span class="number">1</span>] + aver - a[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(c + <span class="number">1</span>, c + <span class="number">1</span> + m);</span><br><span class="line">    <span class="type">int</span> mid = c[(<span class="number">1</span> + m) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans += <span class="built_in">abs</span>(mid - c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O-Too-Rich"><a href="#O-Too-Rich" class="headerlink" title="O - Too Rich"></a>O - Too Rich</h3><p><img src="https://img-blog.csdnimg.cn/dc6953c605744a13b04632eba3fbd9fb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a026a4e14694e87b6090c3fbe8084b4.png" alt="在这里插入图片描述"><br>这个题挺麻烦的，思路肯定是贪心解决，但是不能无脑贪心，因为有些数据是没有办法靠小面额凑出来的。<br>为什么会出现这种现象呢？是因为有50，500这样的数据，比如有 10 20 20 50 50，现在要凑110，110 - 10 - 20 - 20 = 60，50不能整除60，则就需要两个50的，因为只用一个50的话，剩下的凑不出60。<br>那我们怎么解决这个问题呢？因为50和500这样的特殊数据，分凑偶数张和凑奇数张两种情况，必能有一种能把目标凑出来 (如果存在解的话)，所以，我们考虑深搜，从大面额往回搜，把每张面额按奇数张or偶数张分别进行讨论搜索，必能找到可行解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://vjudge.net/contest/505193#problem/O</span></span><br><span class="line"><span class="type">int</span> T, tar;</span><br><span class="line"><span class="type">int</span> coin[<span class="number">11</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> value[<span class="number">11</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">500</span>, <span class="number">1000</span>, <span class="number">2000</span>&#125;;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">long</span> <span class="type">long</span> rest, <span class="type">int</span> cnt, <span class="type">int</span> value_id)</span> <span class="comment">// rest是进行到第value_id个面额时所剩下的目标钱数，cnt是目前已经凑过的钱币数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (value_id == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="number">0</span>)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> current = <span class="built_in">max</span>(rest - sum[value_id - <span class="number">1</span>], (<span class="type">long</span> <span class="type">long</span>)(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> cur_num = current / value[value_id];</span><br><span class="line">    <span class="keyword">if</span> (current % value[value_id])</span><br><span class="line">        cur_num++;</span><br><span class="line">    <span class="keyword">if</span> (cur_num &lt;= coin[value_id])</span><br><span class="line">        <span class="built_in">dfs</span>(rest - value[value_id] * cur_num, cnt + cur_num, value_id - <span class="number">1</span>);</span><br><span class="line">    cur_num++;</span><br><span class="line">    <span class="keyword">if</span> (cur_num &lt;= coin[value_id])</span><br><span class="line">        <span class="built_in">dfs</span>(rest - value[value_id] * cur_num, cnt + cur_num, value_id - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; tar;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; coin[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + (<span class="type">long</span> <span class="type">long</span>)(coin[i] * value[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(tar, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Week1-题解&quot;&gt;&lt;a href=&quot;#Week1-题解&quot; class=&quot;headerlink&quot; title=&quot;Week1 题解&quot;&gt;&lt;/a&gt;Week1 题解&lt;/h1&gt;&lt;h3 id=&quot;A-Raising-Modulo-Numbers&quot;&gt;&lt;a href=&quot;#A-Rai</summary>
      
    
    
    
    <category term="集训" scheme="http://example.com/categories/%E9%9B%86%E8%AE%AD/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题单-高精度</title>
    <link href="http://example.com/2022/07/14/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%8D%95-%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    <id>http://example.com/2022/07/14/%E6%B4%9B%E8%B0%B7%E9%A2%98%E5%8D%95-%E9%AB%98%E7%B2%BE%E5%BA%A6/</id>
    <published>2022-07-14T01:54:22.891Z</published>
    <updated>2022-07-14T02:02:11.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洛谷题单-高精度"><a href="#洛谷题单-高精度" class="headerlink" title="洛谷题单-高精度"></a>洛谷题单-高精度</h1><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p><img src="https://img-blog.csdnimg.cn/96f8a0b754fd425186cdcbe2a1e9dd08.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1601">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1601</span></span><br><span class="line"><span class="type">char</span> n1[<span class="number">10000</span>], n2[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">10000</span>], num2[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line">    cin &gt;&gt; n2;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(n2);</span><br><span class="line">    <span class="built_in">memset</span>(num1, <span class="number">0</span>, <span class="built_in">sizeof</span>(num1));</span><br><span class="line">    <span class="built_in">memset</span>(num2, <span class="number">0</span>, <span class="built_in">sizeof</span>(num2));</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in">sizeof</span>(ans));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[len1 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; num1[i];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num2[i] = n2[len2 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; num2[i];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="type">int</span> lenc = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mod1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lenc &lt;= len1 || lenc &lt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[lenc] = num1[lenc] + num2[lenc] + mod1;</span><br><span class="line">        mod1 = ans[lenc] / <span class="number">10</span>;</span><br><span class="line">        ans[lenc] %= <span class="number">10</span>;</span><br><span class="line">        lenc++;</span><br><span class="line">    &#125;</span><br><span class="line">    ans[lenc] = mod1;</span><br><span class="line">    <span class="keyword">if</span> (ans[lenc] == <span class="number">0</span>)</span><br><span class="line">        lenc--; <span class="comment">//防止上一位0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p><img src="https://img-blog.csdnimg.cn/a561b69937f249d7bc39336087fc8516.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P2142">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P2142</span></span><br><span class="line"><span class="type">char</span> n1[<span class="number">1000000</span>], n2[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">char</span> remp[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">1000000</span>], num2[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1 &gt;&gt; n2;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(n1) &lt; <span class="built_in">strlen</span>(n2) || (<span class="built_in">strlen</span>(n1) == <span class="built_in">strlen</span>(n2) &amp;&amp; <span class="built_in">strcmp</span>(n1, n2) &lt; <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当被减数小于减数时，两者交换，且加上“-”</span></span><br><span class="line">        <span class="built_in">strcpy</span>(remp, n1);</span><br><span class="line">        <span class="built_in">strcpy</span>(n1, n2);</span><br><span class="line">        <span class="built_in">strcpy</span>(n2, remp);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(n2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[len1 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num2[i] = n2[len2 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lenc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lenc &lt;= len1 || lenc &lt;= len2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num1[lenc] &lt; num2[lenc])</span><br><span class="line">        &#123;</span><br><span class="line">            num1[lenc] += <span class="number">10</span>;</span><br><span class="line">            num1[lenc + <span class="number">1</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[lenc] = num1[lenc] - num2[lenc];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; num1[lenc] &lt;&lt; &quot; &quot; &lt;&lt; num2[lenc] &lt;&lt; &quot; &quot; &lt;&lt; ans[lenc] &lt;&lt; &quot; &quot; &lt;&lt; lenc &lt;&lt; endl;</span></span><br><span class="line">        lenc++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ans[lenc] == <span class="number">0</span> &amp;&amp; lenc &gt; <span class="number">1</span>) <span class="comment">// lenc大于1不是大于等于！</span></span><br><span class="line">    &#123;</span><br><span class="line">        lenc--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p><img src="https://img-blog.csdnimg.cn/ee49fb78746842e69576df8e70efca78.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1303">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> n1[<span class="number">1000000</span>], n2[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">1000000</span>], num2[<span class="number">1000000</span>], ans[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line">    cin &gt;&gt; n2;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="type">int</span> len2 = <span class="built_in">strlen</span>(n2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[len1 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num2[i] = n2[len2 - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mod1 = <span class="number">0</span>; <span class="comment">//用来进位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i + j - <span class="number">1</span>] += num1[i] * num2[j] + mod1;</span><br><span class="line">            mod1 = ans[i + j - <span class="number">1</span>] / <span class="number">10</span>;</span><br><span class="line">            ans[i + j - <span class="number">1</span>] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i + len2] = mod1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lenc = len1 + len2;</span><br><span class="line">    <span class="keyword">while</span> (lenc &gt; <span class="number">1</span> &amp;&amp; ans[lenc] == <span class="number">0</span>)</span><br><span class="line">        lenc--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p><img src="https://img-blog.csdnimg.cn/1ddcd9fe9a1344478e0100891be328f7.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1480">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> n1[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> num1[<span class="number">1000000</span>], ans[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n1;</span><br><span class="line">    cin &gt;&gt; num2;</span><br><span class="line">    <span class="type">int</span> len1 = <span class="built_in">strlen</span>(n1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num1[i] = n1[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> mod1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i] = (mod1 * <span class="number">10</span> + num1[i]) / num2;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;ans[i]&lt;&lt;endl;</span></span><br><span class="line">        mod1 = (mod1 * <span class="number">10</span> + num1[i]) % num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lenc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lenc &lt; len1 &amp;&amp; ans[lenc] == <span class="number">0</span>)</span><br><span class="line">        lenc++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = lenc; i &lt;= len1; i++)</span><br><span class="line">        cout &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;洛谷题单-高精度&quot;&gt;&lt;a href=&quot;#洛谷题单-高精度&quot; class=&quot;headerlink&quot; title=&quot;洛谷题单-高精度&quot;&gt;&lt;/a&gt;洛谷题单-高精度&lt;/h1&gt;&lt;h3 id=&quot;加法&quot;&gt;&lt;a href=&quot;#加法&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="洛谷" scheme="http://example.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题单-贪心</title>
    <link href="http://example.com/2022/07/12/%E6%B4%9B%E8%B0%B7%E8%B4%AA%E5%BF%83/"/>
    <id>http://example.com/2022/07/12/%E6%B4%9B%E8%B0%B7%E8%B4%AA%E5%BF%83/</id>
    <published>2022-07-12T00:57:40.613Z</published>
    <updated>2022-07-12T02:32:39.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洛谷题单-贪心"><a href="#洛谷题单-贪心" class="headerlink" title="洛谷题单-贪心"></a>洛谷题单-贪心</h1><h3 id="牛奶"><a href="#牛奶" class="headerlink" title="牛奶"></a>牛奶</h3><p><img src="https://img-blog.csdnimg.cn/439d0d1c8f3243178f9be4ff6e433f21.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/03a3a469f01f40c48202450cfd1908b5.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1208">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1208</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p; <span class="comment">//价格</span></span><br><span class="line">    <span class="type">int</span> t; <span class="comment">//拥有的数量</span></span><br><span class="line">&#125; man[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.p &lt; b.p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; man[i].p &gt;&gt; man[i].t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(man + <span class="number">1</span>, man + <span class="number">1</span> + m, cmp);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; man[++cnt].t)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += man[cnt].p * man[cnt].t;</span><br><span class="line">            n -= man[cnt].t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += man[cnt].p * n;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳跳！"><a href="#跳跳！" class="headerlink" title="跳跳！"></a>跳跳！</h3><p><img src="https://img-blog.csdnimg.cn/8bb5e20a033a400aac148e044e224f05.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 贪心(在剩下的石头里找最大和最小来回跳)</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P4995#submit</span></span><br><span class="line"><span class="type">int</span> stone[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; stone[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(stone + <span class="number">1</span>, stone + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">int</span> rnode = n;</span><br><span class="line">    <span class="type">int</span> lnode = <span class="number">0</span>; <span class="comment">// lnode 初值为1！因为一开始在地面</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lnode != rnode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += (stone[rnode] - stone[lnode]) * (stone[rnode] - stone[lnode]);</span><br><span class="line">            lnode++;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans += (stone[rnode] - stone[lnode]) * (stone[rnode] - stone[lnode]);</span><br><span class="line">            rnode--;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="纪念品分组"><a href="#纪念品分组" class="headerlink" title="纪念品分组"></a>纪念品分组</h3><p><img src="https://img-blog.csdnimg.cn/b467d16d231242078636be0d5e9cd2f9.png" alt="在这里插入图片描述"></p><p><a href="https://www.luogu.com.cn/problem/P1094">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1094</span></span><br><span class="line"><span class="type">int</span> gift[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> m, n, cnt;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; gift[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(gift + <span class="number">1</span>, gift + <span class="number">1</span> + n);</span><br><span class="line">    <span class="type">int</span> rnode = n;</span><br><span class="line">    <span class="type">int</span> lnode = <span class="number">1</span>;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lnode &lt; rnode)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (gift[lnode] + gift[rnode] &lt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            lnode++, rnode--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            rnode--;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lnode == rnode)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三国游戏"><a href="#三国游戏" class="headerlink" title="三国游戏"></a>三国游戏</h3><p><img src="https://img-blog.csdnimg.cn/801c46d9cbc34e2bae816890c413a3d9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/af32c24f09c94d45a4da06045614f5f7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/77064a078bdc445287c1e275e2b16e73.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1199">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> gen[<span class="number">10000</span>][<span class="number">10000</span>];</span><br><span class="line"><span class="comment">// 贪心+博弈论</span></span><br><span class="line"><span class="comment">// 每次选择第二大即可！</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; gen[i][j];</span><br><span class="line">            gen[j][i] = gen[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(gen[i] + <span class="number">1</span>, gen[i] + <span class="number">1</span> + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, gen[i][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="推销员"><a href="#推销员" class="headerlink" title="推销员"></a>推销员</h3><p><img src="https://img-blog.csdnimg.cn/32d69d1293bb4f11ade9082c00ca3f6a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a5c8b741d1a54e84a05120619d642889.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P2672">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P2672</span></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dis;</span><br><span class="line">    <span class="type">int</span> tire;</span><br><span class="line">&#125; a[<span class="number">100000</span>];</span><br><span class="line"><span class="type">int</span> t[<span class="number">100000</span>];    <span class="comment">// t[i]代表前i个最大疲劳值前缀和</span></span><br><span class="line"><span class="type">int</span> d[<span class="number">100000</span>];    <span class="comment">// q[i]代表前i个最大疲劳值的用户中在距离花费的疲劳值</span></span><br><span class="line"><span class="type">int</span> post[<span class="number">100000</span>]; <span class="comment">// post[i]代表挑去i个最大疲劳值用户之后，剩下之中的最大值</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.tire &gt; b.tire;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].dis;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + <span class="number">1</span> + N, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t[i] = t[i - <span class="number">1</span>] + a[i].tire;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i] = <span class="built_in">max</span>(d[i - <span class="number">1</span>], a[i].dis * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = N; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        post[i] = <span class="built_in">max</span>(post[i + <span class="number">1</span>], <span class="number">2</span> * a[i].dis + a[i].tire);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">max</span>(t[i] + d[i], t[i - <span class="number">1</span>] + post[i]) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;洛谷题单-贪心&quot;&gt;&lt;a href=&quot;#洛谷题单-贪心&quot; class=&quot;headerlink&quot; title=&quot;洛谷题单-贪心&quot;&gt;&lt;/a&gt;洛谷题单-贪心&lt;/h1&gt;&lt;h3 id=&quot;牛奶&quot;&gt;&lt;a href=&quot;#牛奶&quot; class=&quot;headerlink&quot; title=&quot;牛</summary>
      
    
    
    
    <category term="洛谷" scheme="http://example.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题单-分治</title>
    <link href="http://example.com/2022/07/07/%E6%B4%9B%E8%B0%B7%E5%88%86%E6%B2%BB/"/>
    <id>http://example.com/2022/07/07/%E6%B4%9B%E8%B0%B7%E5%88%86%E6%B2%BB/</id>
    <published>2022-07-07T14:50:51.200Z</published>
    <updated>2022-07-07T14:55:24.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="洛谷分治题单"><a href="#洛谷分治题单" class="headerlink" title="洛谷分治题单"></a>洛谷分治题单</h1><h3 id="归并排序or逆序对"><a href="#归并排序or逆序对" class="headerlink" title="归并排序or逆序对"></a>归并排序or逆序对</h3><p><img src="https://img-blog.csdnimg.cn/488baaf266124332bdce5fff01668155.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1908">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10000000</span>], c[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergesort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">mergesort</span>(a, left, mid);</span><br><span class="line"><span class="built_in">mergesort</span>(a, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = left, j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= a[j])</span><br><span class="line">c[k++] = a[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = ans + mid - i + <span class="number">1</span>; <span class="comment">//归并排序就是把这句去了</span></span><br><span class="line">c[k++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">c[k++] = a[j++];</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">c[k++] = a[i++];</span><br><span class="line"><span class="keyword">for</span> (i = left, j = <span class="number">0</span>; i &lt;= right; i++, j++)</span><br><span class="line">a[i] = c[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">mergesort</span>(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p><img src="https://img-blog.csdnimg.cn/e3d09886e34e49d2ba869c29c71aba7b.png" alt="在这里插入图片描述"><br>水题<br><a href="https://www.luogu.com.cn/problem/P1226">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1226</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fast_power</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a %= c;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans *= a;</span><br><span class="line">            ans %= c;</span><br><span class="line">        &#125;</span><br><span class="line">        b /= <span class="number">2</span>;</span><br><span class="line">        a = a * a % c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld^%lld mod %lld=%lld&quot;</span>, a, b, c, <span class="built_in">fast_power</span>(a, b, c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="幂次方"><a href="#幂次方" class="headerlink" title="幂次方"></a>幂次方<img src="https://img-blog.csdnimg.cn/4be810a82a844db9b7cbe5be8bbdffa6.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/cac4c222f29c4af78dd603925a51d5cc.png" alt="在这里插入图片描述"></h3><p><a href="https://www.luogu.com.cn/problem/P1010">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1010</span></span><br><span class="line"><span class="comment">// 分治递归</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>, tar = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (tar &lt;= n)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        tar *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> gap = n - tar / <span class="number">2</span>;</span><br><span class="line">    cnt--; <span class="comment">//出来的时候已经比n大了，应该回退一位</span></span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span> || cnt == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(%d)&quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">1</span>)</span><br><span class="line">        ; <span class="comment">//假如是1的话，不必输出2(1)</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cnt &gt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>); <span class="comment">//递归，用同样的方式表示cnt</span></span><br><span class="line">        <span class="built_in">search</span>(cnt);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="built_in">search</span>(gap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">search</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="平面最近点对（Pro）"><a href="#平面最近点对（Pro）" class="headerlink" title="平面最近点对（Pro）"></a>平面最近点对（Pro）</h3><p><img src="https://img-blog.csdnimg.cn/a8567dfc234e41eeb0c9bd6ac50140d7.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P1429">传送门</a><br>这道题的思路其实很有意思，有点像之前的归并排序的模板，它的思路很好理解，将一个点集分割，当解决1个点集时，我们将其分割为俩，将各个子集的最短距离求出，但是这样还没完！<strong>关键我们之前只分别考虑了两个点集内的最短，假如两个点集之间的点有最短咋办捏？</strong><br><strong>我们的方法是创建隔离带，我们设之前两个内点集的最短距离是minf，取点集中沿x轴方向最中间的点，以这个点为中心，左右各延拓minf的区域，讨论这段区域的点之间的最短距离！</strong><br><strong>为什么只考虑这一段呢？因为超过这个隔离带，两点的距离必然大于minf，无需考虑！</strong><br><img src="https://img-blog.csdnimg.cn/5334b319ff3947b29de155fc29a30d9a.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1429</span></span><br><span class="line"><span class="comment">// 分治算法</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">double</span> y;</span><br><span class="line">&#125; point[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">min</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.x != b.x)</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dis</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> x = (a.x - b.x) * (a.x - b.x);</span><br><span class="line">    <span class="type">double</span> y = (a.y - b.y) * (a.y - b.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> minf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span> minf;</span><br><span class="line">    <span class="keyword">if</span> (left + <span class="number">1</span> == right)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dis</span>(point[left], point[right]);</span><br><span class="line">    <span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">double</span> min1 = <span class="built_in">merge</span>(left, mid);</span><br><span class="line">    <span class="type">double</span> min2 = <span class="built_in">merge</span>(mid + <span class="number">1</span>, right);</span><br><span class="line">    minf = <span class="built_in">min</span>(min1, min2); <span class="comment">//两个子点集的最短</span></span><br><span class="line">    <span class="comment">// 关键是求跨越两个点集之间的最短可能距离</span></span><br><span class="line">    vector&lt;node&gt; gap; <span class="comment">//创建隔离带，以平行y轴的中线为界，向左右延申长度为minf的隔离带</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(point[mid].x - point[i].x) &lt; minf)</span><br><span class="line">            gap.<span class="built_in">push_back</span>(point[i]);</span><br><span class="line">    &#125; <span class="comment">//有资格进入备选范围</span></span><br><span class="line">    <span class="built_in">sort</span>(gap.<span class="built_in">begin</span>(), gap.<span class="built_in">end</span>(), cmp2);</span><br><span class="line">    <span class="type">int</span> l = gap.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> remp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; l &amp;&amp; gap[j].y - gap[i].y &lt; minf; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> remp;</span><br><span class="line">            remp = <span class="built_in">dis</span>(gap[i], gap[j]);</span><br><span class="line">            <span class="keyword">if</span> (minf &gt; remp)</span><br><span class="line">                minf = remp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int temp[100000];</span></span><br><span class="line"><span class="comment">// bool cmps(const int &amp;a, const int &amp;b) &#123; return point[a].y &lt; point[b].y; &#125;</span></span><br><span class="line"><span class="comment">// double merge(int left, int right)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     double d = 2 &lt;&lt; 20;</span></span><br><span class="line"><span class="comment">//     if (left == right)</span></span><br><span class="line"><span class="comment">//         return d;</span></span><br><span class="line"><span class="comment">//     if (left + 1 == right)</span></span><br><span class="line"><span class="comment">//         return dis(point[left], point[right]);</span></span><br><span class="line"><span class="comment">//     int mid = left + right &gt;&gt; 1;</span></span><br><span class="line"><span class="comment">//     double d1 = merge(left, mid);</span></span><br><span class="line"><span class="comment">//     double d2 = merge(mid + 1, right);</span></span><br><span class="line"><span class="comment">//     d = min(d1, d2);</span></span><br><span class="line"><span class="comment">//     int i, j, k = 0;</span></span><br><span class="line"><span class="comment">//     for (i = left; i &lt;= right; i++)</span></span><br><span class="line"><span class="comment">//         if (fabs(point[mid].x - point[i].x) &lt; d) // 这里不太一样</span></span><br><span class="line"><span class="comment">//             temp[k++] = i;</span></span><br><span class="line"><span class="comment">//     sort(temp, temp + k, cmps);</span></span><br><span class="line"><span class="comment">//     for (i = 0; i &lt; k; i++)</span></span><br><span class="line"><span class="comment">//         for (j = i + 1; j &lt; k &amp;&amp; point[temp[j]].y - point[temp[i]].y &lt; d; j++)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             double d3 = dis(point[temp[i]], point[temp[j]]);</span></span><br><span class="line"><span class="comment">//             if (d &gt; d3)</span></span><br><span class="line"><span class="comment">//                 d = d3;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     return d;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; point[i].x &gt;&gt; point[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(point + <span class="number">1</span>, point + <span class="number">1</span> + n, cmp1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>, <span class="built_in">merge</span>(<span class="number">1</span>, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="奶牛选密码"><a href="#奶牛选密码" class="headerlink" title="奶牛选密码"></a>奶牛选密码</h3><p><img src="https://img-blog.csdnimg.cn/3f9ffd4d33e8428ab8bd6eb5e4ca0fe7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6a1d66bcc6184e399dac98a36651f705.png" alt="在这里插入图片描述"><br><a href="https://www.luogu.com.cn/problem/P3612">传送门</a><br>超时代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3612</span></span><br><span class="line"><span class="comment">// 超限了T_T</span></span><br><span class="line">string str;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> N;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ans</span><span class="params">(string tar, <span class="type">long</span> <span class="type">long</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; N)</span><br><span class="line">    &#123;</span><br><span class="line">        tar += tar[l - <span class="number">1</span>];</span><br><span class="line">        tar += tar.<span class="built_in">substr</span>(<span class="number">0</span>, l - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; tar &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">ans</span>(tar, l * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tar[N - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; str &gt;&gt; N;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> l = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">ans</span>(str, l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ac代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P3612</span></span><br><span class="line"><span class="comment">// 分治 参考题解：https://www.luogu.com.cn/blog/issue-s/solution-p3612</span></span><br><span class="line">string str;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; str &gt;&gt; N;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> len = str.<span class="built_in">length</span>();</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> l;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; N) <span class="comment">//等效于递归，由当前串不断向前回退</span></span><br><span class="line">    &#123;</span><br><span class="line">        l = len;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; N)</span><br><span class="line">            l *= <span class="number">2</span>;</span><br><span class="line">        l /= <span class="number">2</span>; <span class="comment">//得到目标长度的一半长</span></span><br><span class="line">        N -= (l + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>)</span><br><span class="line">            N = l;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; str[N - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="地毯填铺"><a href="#地毯填铺" class="headerlink" title="地毯填铺"></a>地毯填铺</h3><p><img src="https://img-blog.csdnimg.cn/e3c24efaf0f246e1bef2dffdd696be12.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">3                          </span><br><span class="line">3 3   </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">输出</span><br><span class="line">5 5 1</span><br><span class="line">2 2 4</span><br><span class="line">1 1 4</span><br><span class="line">1 4 3</span><br><span class="line">4 1 2</span><br><span class="line">4 4 1</span><br><span class="line">2 7 3</span><br><span class="line">1 5 4</span><br><span class="line">1 8 3</span><br><span class="line">3 6 3</span><br><span class="line">4 8 1</span><br><span class="line">7 2 2</span><br><span class="line">5 1 4</span><br><span class="line">6 3 2</span><br><span class="line">8 1 2</span><br><span class="line">8 4 1</span><br><span class="line">7 7 1</span><br><span class="line">6 6 1</span><br><span class="line">5 8 3</span><br><span class="line">8 5 2</span><br><span class="line">8 8 1</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P1228">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1228</span></span><br><span class="line"><span class="comment">// 递归分治</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lu ans(x + l - 1, y + l - 1, x, y, l) <span class="comment">//左上</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ru ans(x + l - 1, y + l, x, y + l, l) <span class="comment">//右上</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ld ans(x + l, y + l - 1, x + l, y, l) <span class="comment">//左下</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rd ans(x + l, y + l, x + l, y + l, l) <span class="comment">//右下</span></span></span><br><span class="line"><span class="comment">// tarx,tary是(等效)公主的位置</span></span><br><span class="line"><span class="comment">// x,y是正在搜索的方格的左上顶角坐标</span></span><br><span class="line"><span class="comment">// len是正在搜索方格的边长</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ans</span><span class="params">(<span class="type">long</span> <span class="type">long</span> tarx, <span class="type">long</span> <span class="type">long</span> tary, <span class="type">long</span> <span class="type">long</span> x, <span class="type">long</span> <span class="type">long</span> y, <span class="type">long</span> <span class="type">long</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> l = len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (tarx &lt; l + x &amp;&amp; tary &lt; l + y) <span class="comment">//公主在左上</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x, y, l);</span><br><span class="line">        ru;</span><br><span class="line">        ld;</span><br><span class="line">        rd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tarx &lt; l + x &amp;&amp; tary &gt;= l + y) <span class="comment">//右上角</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x, y + l, l);</span><br><span class="line">        lu;</span><br><span class="line">        ld;</span><br><span class="line">        rd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tarx &gt;= x + l &amp;&amp; tary &lt; l + y) <span class="comment">//左下角</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x + l, y, l);</span><br><span class="line">        lu;</span><br><span class="line">        ru;</span><br><span class="line">        rd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tarx &gt;= x + l &amp;&amp; tary &gt;= l + y) <span class="comment">//右下角</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; x + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y + l - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">             &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">ans</span>(tarx, tary, x + l, y + l, l);</span><br><span class="line">        lu;</span><br><span class="line">        ru;</span><br><span class="line">        ld;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> k, tarx, tary;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; tarx &gt;&gt; tary;</span><br><span class="line">    <span class="built_in">ans</span>(tarx, tary, <span class="number">1</span>, <span class="number">1</span>, <span class="built_in">pow</span>(<span class="number">2</span>, k));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;洛谷分治题单&quot;&gt;&lt;a href=&quot;#洛谷分治题单&quot; class=&quot;headerlink&quot; title=&quot;洛谷分治题单&quot;&gt;&lt;/a&gt;洛谷分治题单&lt;/h1&gt;&lt;h3 id=&quot;归并排序or逆序对&quot;&gt;&lt;a href=&quot;#归并排序or逆序对&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="洛谷" scheme="http://example.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>洛谷题单-二分</title>
    <link href="http://example.com/2022/07/06/%E6%B4%9B%E8%B0%B7%E4%BA%8C%E5%88%86/"/>
    <id>http://example.com/2022/07/06/%E6%B4%9B%E8%B0%B7%E4%BA%8C%E5%88%86/</id>
    <published>2022-07-06T14:38:19.914Z</published>
    <updated>2022-07-06T14:44:42.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二分专题"><a href="#二分专题" class="headerlink" title="二分专题"></a>二分专题</h1><h3 id="先贴一个二分的板子"><a href="#先贴一个二分的板子" class="headerlink" title="先贴一个二分的板子"></a>先贴一个二分的板子</h3><p><a href="https://www.mrking.space/2022/04/15/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%9D%BF%E5%AD%90(check()%E5%87%BD%E6%95%B0)/">传送门</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">erfen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>, r = n, ans;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一元三次方程"><a href="#一元三次方程" class="headerlink" title="一元三次方程"></a>一元三次方程</h3><p><a href="https://www.luogu.com.cn/problem/P1024#submit">oj</a></p><h1 id="NOIP2001-提高组-一元三次方程求解"><a href="#NOIP2001-提高组-一元三次方程求解" class="headerlink" title="[NOIP2001 提高组] 一元三次方程求解"></a>[NOIP2001 提高组] 一元三次方程求解</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有形如：$a x^3 + b x^2 + c x + d = 0$  这样的一个一元三次方程。给出该方程中各项的系数（$a,b,c,d$ 均为实数），并约定该方程存在三个不同实根（根的范围在 $-100$ 至 $100$ 之间），且根与根之差的绝对值 $\ge 1$。要求由小到大依次在同一行输出这三个实根(根与根之间留有空格)，并精确到小数点后 $2$ 位。</p><p>提示：记方程 $f(x) = 0$，若存在 $2$ 个数 $x_1$ 和 $x_2$，且 $x_1 &lt; x_2$，$f(x_1) \times f(x_2) &lt; 0$，则在 $(x_1, x_2)$ 之间一定有一个根。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，$4$ 个实数 $a, b, c, d$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，$3$ 个实根，从小到大输出，并精确到小数点后 $2$ 位。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 -5 -4 20</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-2.00 2.00 5.00</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2001 提高组第一题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1024#submit</span></span><br><span class="line"><span class="comment">//带有小数的二分题</span></span><br><span class="line"><span class="type">double</span> a, b, c, d;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">test</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a * x * x * x + b * x * x + c * x + d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x1, <span class="type">double</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">test</span>(x1)) * (<span class="built_in">test</span>(mid)) &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">double</span> i = <span class="number">-100</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> x1, x2;</span><br><span class="line">        x1 = i;</span><br><span class="line">        x2 = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">test</span>(x1))</span><br><span class="line">        &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf &quot;</span>, x1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">test</span>(x1) * <span class="built_in">test</span>(x2) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> l = x1, r = x2;</span><br><span class="line">            <span class="type">double</span> ans = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (r - l &gt;= <span class="number">0.0001</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">double</span> mid = (r + l) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">check</span>(mid, r))</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = mid;</span><br><span class="line">                    l = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ans = mid;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf &quot;</span>, ans);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳石头"><a href="#跳石头" class="headerlink" title="跳石头"></a>跳石头</h3><h1 id="NOIP2015-提高组-跳石头"><a href="#NOIP2015-提高组-跳石头" class="headerlink" title="[NOIP2015 提高组] 跳石头"></a>[NOIP2015 提高组] 跳石头</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>一年一度的“跳石头”比赛又要开始了!</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>这项比赛将在一条笔直的河道中进行，河道中分布着一些巨大岩石。组委会已经选择好了两块岩石作为比赛起点和终点。在起点和终点之间，有 $N$ 块岩石（不含起点和终点的岩石）。在比赛过程中，选手们将从起点出发，每一步跳向相邻的岩石，直至到达终点。</p><p>为了提高比赛难度，组委会计划移走一些岩石，使得选手们在比赛过程中的最短跳跃距离尽可能长。由于预算限制，组委会至多从起点和终点之间移走 $M$ 块岩石（不能移走起点和终点的岩石）。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含三个整数 $L,N,M$，分别表示起点到终点的距离，起点和终点之间的岩石数，以及组委会至多移走的岩石数。保证 $L \geq 1$ 且 $N \geq M \geq 0$。</p><p>接下来 $N$ 行，每行一个整数，第 $i$ 行的整数 $D_i( 0 &lt; D_i &lt; L)$， 表示第 $i$ 块岩石与起点的距离。这些岩石按与起点距离从小到大的顺序给出，且不会有两个岩石出现在同一个位置。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，即最短跳跃距离的最大值。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">25 5 2 </span><br><span class="line">2</span><br><span class="line">11</span><br><span class="line">14</span><br><span class="line">17 </span><br><span class="line">21</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>输入输出样例 1 说明：将与起点距离为 $2$和 $14$ 的两个岩石移走后,最短的跳跃距离为 $4$(从与起点距离 $17$ 的岩石跳到距离 $21$ 的岩石,或者从距离 $21$ 的岩石跳到终点)。</p><p>另：对于 $20%$的数据,$0 ≤ M ≤ N ≤ 10$。  </p><p>对于$50%$的数据,$0 ≤ M ≤ N ≤ 100$。</p><p>对于 $100%$的数据,$0 ≤ M ≤ N ≤ 50,000,1 ≤ L ≤ 1,000,000,000$。<br><a href="https://www.luogu.com.cn/problem/P2678">oj</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P2678</span></span><br><span class="line"><span class="comment">// 模板二分，有点像22年蓝桥杯那道题</span></span><br><span class="line"><span class="type">int</span> dis[<span class="number">100000</span>]; <span class="comment">//距离起点距离</span></span><br><span class="line"><span class="type">int</span> L, M, N;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">0</span>;  <span class="comment">//模拟跳的人，他现在处于原点，距离起点自然是0</span></span><br><span class="line">    <span class="type">int</span> next = <span class="number">0</span>; <span class="comment">//下一块石头</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;  <span class="comment">//假如要保证所有的最短距离是ans，要删去多少石头</span></span><br><span class="line">    <span class="keyword">while</span> (next != N + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        next++;</span><br><span class="line">        <span class="keyword">if</span> ((dis[next] - dis[now]) &lt; ans)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            now = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt &lt;= M)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; L &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; dis[i];</span><br><span class="line">    &#125;</span><br><span class="line">    dis[N + <span class="number">1</span>] = L;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = L;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            l = mid + <span class="number">1</span>; <span class="comment">//条件符合，扩大战果</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="刺杀大使"><a href="#刺杀大使" class="headerlink" title="刺杀大使"></a>刺杀大使</h3><h1 id="刺杀大使-1"><a href="#刺杀大使-1" class="headerlink" title="刺杀大使"></a>刺杀大使</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>某组织正在策划一起对某大使的刺杀行动。他们来到了使馆，准备完成此次刺杀，要进入使馆首先必须通过使馆前的防御迷阵。</p><p>迷阵由 $n\times m$ 个相同的小房间组成，每个房间与相邻四个房间之间有门可通行。在第 $n$ 行的 $m$ 个房间里有 $m$ 个机关，这些机关必须全部打开才可以进入大使馆。而第 $1$ 行的 $m$ 个房间有 $m$ 扇向外打开的门，是迷阵的入口。除了第 $1$ 行和第 $n$ 行的房间外，每个房间都被使馆的安保人员安装了激光杀伤装置，将会对进入房间的人造成一定的伤害。第 $i$ 行第 $j$ 列 造成的伤害值为 $p_{i,j}$（第 $1$ 行和第 $n$ 行的 $p$ 值全部为 $0$）。</p><p>现在某组织打算以最小伤害代价进入迷阵，打开全部机关，显然，他们可以选 择任意多的人从任意的门进入，但必须到达第 $n$ 行的每个房间。一个士兵受到的伤害值为他到达某个机关的路径上所有房间的伤害值中的最大值，整个部队受到的伤害值为所有士兵的伤害值中的最大值。现在，这个恐怖组织掌握了迷阵的情况，他们需要提前知道怎么安排士兵的行进路线可以使得整个部队的伤害值最小。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数 $n,m$，表示迷阵的大小。</p><p>接下来 $n$ 行，每行 $m$ 个数，第 $i$ 行第 $j$ 列的数表示 $p_{i,j}$。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个数，表示最小伤害代价。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">0 0 </span><br><span class="line">3 5 </span><br><span class="line">2 4 </span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><ul><li>$50%$ 的数据，$n,m \leq 100$；</li><li>$100%$ 的数据，$n,m \leq 1000$，$p_{i,j} \leq 1000$。<br><a href="https://www.luogu.com.cn/problem/P1902">传送门</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1902</span></span><br><span class="line"><span class="comment">// dfs+二分（思路挺清晰的）</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dirx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> diry[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">bool</span> visit[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">int</span> maze[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="type">bool</span> flag;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(x &lt;= n &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= m))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (visit[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x1 = x + dirx[i];</span><br><span class="line">        <span class="type">int</span> y1 = y + diry[i];</span><br><span class="line">        <span class="keyword">if</span> (x1 == n)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maze[x1][y1] &lt;= limit)</span><br><span class="line">            <span class="built_in">dfs</span>(x1, y1, limit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="built_in">sizeof</span>(visit));</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> max1 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; maze[i][j];</span><br><span class="line">            max1 = <span class="built_in">max</span>(max1, maze[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = max1;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聪明的质检员"><a href="#聪明的质检员" class="headerlink" title="聪明的质检员"></a>聪明的质检员</h3><h1 id="NOIP2011-提高组-聪明的质监员"><a href="#NOIP2011-提高组-聪明的质监员" class="headerlink" title="[NOIP2011 提高组] 聪明的质监员"></a>[NOIP2011 提高组] 聪明的质监员</h1></li></ul><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p><code>小T</code> 是一名质量监督员，最近负责检验一批矿产的质量。这批矿产共有 $n$ 个矿石，从 $1$ 到 $n$ 逐一编号，每个矿石都有自己的重量 $w_i$ 以及价值 $v_i$ 。检验矿产的流程是：</p><p>1 、给定$ m$ 个区间 $[l_i,r_i]$；</p><p>2 、选出一个参数 $W$；</p><p>3 、对于一个区间 $[l_i,r_i]$，计算矿石在这个区间上的检验值 $y_i$：</p><p>$$y_i=\sum\limits_{j=l_i}^{r_i}[w_j \ge W] \times \sum\limits_{j=l_i}^{r_i}[w_j \ge W]v_j$$  </p><p>其中 $j$ 为矿石编号。</p><p>这批矿产的检验结果 $y$ 为各个区间的检验值之和。即：$\sum\limits_{i=1}^m y_i$  </p><p>若这批矿产的检验结果与所给标准值 $s$ 相差太多，就需要再去检验另一批矿产。<code>小T</code> 不想费时间去检验另一批矿产，所以他想通过调整参数 $W$ 的值，让检验结果尽可能的靠近标准值 $s$，即使得 $|s-y|$ 最小。请你帮忙求出这个最小值。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含三个整数 $n,m,s$，分别表示矿石的个数、区间的个数和标准值。</p><p>接下来的 $n$ 行，每行两个整数，中间用空格隔开，第 $i+1$ 行表示 $i$ 号矿石的重量 $w_i$ 和价值 $v_i$。</p><p>接下来的 $m$ 行，表示区间，每行两个整数，中间用空格隔开，第 $i+n+1$ 行表示区间 $[l_i,r_i]$ 的两个端点 $l_i$ 和 $r_i$。注意：不同区间可能重合或相互重叠。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示所求的最小值。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">5 3 15 </span><br><span class="line">1 5 </span><br><span class="line">2 5 </span><br><span class="line">3 5 </span><br><span class="line">4 5 </span><br><span class="line">5 5 </span><br><span class="line">1 5 </span><br><span class="line">2 4 </span><br><span class="line">3 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>【输入输出样例说明】</p><p>当 $W$ 选 $4$ 的时候，三个区间上检验值分别为 $20,5 ,0$ ，这批矿产的检验结果为 $25$，此时与标准值 $S$ 相差最小为 $10$。</p><p>【数据范围】</p><p>对于 $10% $ 的数据，有 $1 ≤n ,m≤10$；</p><p>对于 $30% $的数据，有 $1 ≤n ,m≤500$ ；</p><p>对于 $50% $ 的数据，有 $ 1 ≤n ,m≤5,000$；</p><p>对于 $70%$ 的数据，有 $1 ≤n ,m≤10,000$ ；</p><p>对于 $100%$ 的数据，有 $ 1 ≤n ,m≤200,000$，$0 &lt; w_i,v_i≤10^6$，$0 &lt; s≤10^{12}$，$1 ≤l_i ≤r_i ≤n$ 。<br><a href="https://www.luogu.com.cn/problem/P1314">oj</a></p><p>说实话题目都没看懂，题解先鸽了</p><h3 id="借教室"><a href="#借教室" class="headerlink" title="借教室"></a>借教室</h3><h1 id="NOIP2012-提高组-借教室"><a href="#NOIP2012-提高组-借教室" class="headerlink" title="[NOIP2012 提高组] 借教室"></a>[NOIP2012 提高组] 借教室</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>在大学期间，经常需要租借教室。大到院系举办活动，小到学习小组自习讨论，都需要向学校申请借教室。教室的大小功能不同，借教室人的身份不同，借教室的手续也不一样。</p><p>面对海量租借教室的信息，我们自然希望编程解决这个问题。</p><p>我们需要处理接下来 $n$ 天的借教室信息，其中第 $i$ 天学校有 $r_i$ 个教室可供租借。共有 $m$ 份订单，每份订单用三个正整数描述，分别为 $d_j,s_j,t_j$，表示某租借者需要从第 $s_j$ 天到第 $t_j$ 天租借教室（包括第 $s_j$ 天和第 $t_j$ 天），每天需要租借 $d_j$ 个教室。</p><p>我们假定，租借者对教室的大小、地点没有要求。即对于每份订单，我们只需要每天提供 $d_j$ 个教室，而它们具体是哪些教室，每天是否是相同的教室则不用考虑。</p><p>借教室的原则是先到先得，也就是说我们要按照订单的先后顺序依次为每份订单分配教室。如果在分配的过程中遇到一份订单无法完全满足，则需要停止教室的分配，通知当前申请人修改订单。这里的无法满足指从第 $s_j$ 天到第 $t_j$ 天中有至少一天剩余的教室数量不足 $d_j$ 个。</p><p>现在我们需要知道，是否会有订单无法完全满足。如果有，需要通知哪一个申请人修改订单。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个正整数 $n,m$，表示天数和订单的数量。</p><p>第二行包含 $n$ 个正整数，其中第 $i$ 个数为 $r_i$，表示第 $i$ 天可用于租借的教室数量。</p><p>接下来有 $m$ 行，每行包含三个正整数 $d_j,s_j,t_j$，表示租借的数量，租借开始、结束分别在第几天。</p><p>每行相邻的两个数之间均用一个空格隔开。天数与订单均用从 $1$ 开始的整数编号。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>如果所有订单均可满足，则输出只有一行，包含一个整数 $0$。否则（订单无法完全满足）</p><p>输出两行，第一行输出一个负整数 $-1$，第二行输出需要修改订单的申请人编号。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 3 </span><br><span class="line">2 5 4 3 </span><br><span class="line">2 1 3 </span><br><span class="line">3 2 4 </span><br><span class="line">4 2 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-1 </span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><p>【输入输出样例说明】</p><p>第 $1 $份订单满足后，$4 $天剩余的教室数分别为 $0,3,2,3$。第 $2$ 份订单要求第 $2 $天到第 $4$ 天每天提供$ 3 $个教室，而第 $3$ 天剩余的教室数为$ 2$，因此无法满足。分配停止，通知第$2$ 个申请人修改订单。</p><p>【数据范围】</p><p>对于10%的数据，有$1≤ n,m≤ 10$；</p><p>对于30%的数据，有$1≤ n,m≤1000$；</p><p>对于 70%的数据，有$1 ≤ n,m ≤ 10^5$；</p><p>对于 100%的数据，有$1 ≤ n,m ≤ 10^6,0 ≤ r_i,d_j≤ 10^9,1 ≤ s_j≤ t_j≤ n$。</p><p>NOIP 2012 提高组 第二天 第二题</p><p>2022.2.20 新增一组 hack 数据<br><a href="https://www.luogu.com.cn/problem/P1083">oj</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 差分+二分</span></span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P1083</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">&#125; ask[<span class="number">10000000</span>];</span><br><span class="line"><span class="type">int</span> cf[<span class="number">10000000</span>]; <span class="comment">//差分数组</span></span><br><span class="line"><span class="type">int</span> rush[<span class="number">10000000</span>];</span><br><span class="line"><span class="type">int</span> room[<span class="number">1000000</span>]; <span class="comment">//预留的房间数目</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cf, <span class="number">0</span>, <span class="built_in">sizeof</span>(cf));</span><br><span class="line">    <span class="built_in">memset</span>(rush, <span class="number">0</span>, <span class="built_in">sizeof</span>(rush));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tar; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cf[ask[i].s] += ask[i].c;</span><br><span class="line">        cf[ask[i].e + <span class="number">1</span>] -= ask[i].c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rush[i] = rush[i - <span class="number">1</span>] + cf[i];</span><br><span class="line">        <span class="keyword">if</span> (rush[i] &gt; room[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; room[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; ask[i].c &gt;&gt; ask[i].s &gt;&gt; ask[i].e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = m;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">check</span>(m))</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">check</span>(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ans ;</span><br><span class="line">    <span class="comment">// int left = 1, right = m;</span></span><br><span class="line">    <span class="comment">// while (left &lt; right)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     int mid = (left + right) / 2;</span></span><br><span class="line">    <span class="comment">//     if (check(mid))</span></span><br><span class="line">    <span class="comment">//         left = mid + 1;</span></span><br><span class="line">    <span class="comment">//     else</span></span><br><span class="line">    <span class="comment">//         right = mid;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; -1 &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; left;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS:<strong>洛谷22年2月更新了数据，第二十一个测试点要开long long才能过，我的代码的话把数组一千万改成一百万就能过了<br>什么？你问我为啥不把改过的代码传上来？那是因为我太懒了QAQ</strong></p><h3 id="自动刷题机"><a href="#自动刷题机" class="headerlink" title="自动刷题机"></a>自动刷题机</h3><h1 id="SHOI2015-自动刷题机"><a href="#SHOI2015-自动刷题机" class="headerlink" title="[SHOI2015]自动刷题机"></a>[SHOI2015]自动刷题机</h1><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>曾经发明了信号增幅仪的发明家 SHTSC 又公开了他的新发明：自动刷题机——一种可以自动 AC 题目的神秘装置。</p><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>自动刷题机刷题的方式非常简单：首先会瞬间得出题目的正确做法，然后开始写程序。每秒，自动刷题机的代码生成模块会有两种可能的结果：</p><p>1.写了 $x$ 行代码<br>2.心情不好，删掉了之前写的 $y$ 行代码。（如果 $y$ 大于当前代码长度则相当于全部删除。）</p><p>对于一个 OJ，存在某个固定的正整数长度 $n$，一旦自动刷题机在某秒结束时积累了大于等于 $n$ 行的代码，它就会自动提交并 AC 此题，然后新建一个文件（即弃置之前的所有代码）并开始写下一题。SHTSC 在某个 OJ 上跑了一天的自动刷题机，得到了很多条关于写代码的日志信息。他突然发现自己没有记录这个 OJ 的 $n$ 究竟是多少。所幸他通过自己在 OJ 上的 Rank 知道了自动刷题机一共切了 $k$ 道题，希望你计算 $n$ 可能的最小值和最大值。</p><h2 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $l , k$，表示刷题机的日志一共有 $l$ 行，一共了切了 $k$ 题。</p><p>接下来 $l$ 行，每行一个整数 $x_i$，依次表示每条日志。若 $x_i \geq 0$，则表示写了 $x_i$ 行代码，若 $x_i \lt 0$，则表示删除了 $-x_i$ 行代码。</p><h2 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行两个整数，分别表示 $n$ 可能的最小值和最大值。<br>如果这样的 $n$ 不存在，请输出一行一个整数 $-1$。</p><h2 id="样例-1-5"><a href="#样例-1-5" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-5"><a href="#样例输入-1-5" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">-3</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-5"><a href="#样例输出-1-5" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 7</span><br></pre></td></tr></table></figure><h2 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li>对于 $20%$ 的数据，保证 $l \le 10$；</li><li>对于 $40%$ 的数据，保证 $l \le 100$ ；</li><li>对于 $60%$ 的数据，保证$l \le 2 \times 10^3$；</li><li>对于 $100%$ 的数据，保证 $1 \leq l \le 10^5$，$-10^9 \le x_i \le 10^9$。<br><a href="https://www.luogu.com.cn/problem/P4343">oj</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/P4343</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> gap[<span class="number">100010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> l, k;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">check</span><span class="params">(<span class="type">long</span> <span class="type">long</span> tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now += gap[i];</span><br><span class="line">        <span class="keyword">if</span> (now &lt; <span class="number">0</span>)</span><br><span class="line">            now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (now &gt;= tar)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            now = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; gap[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>, r = <span class="number">1e18</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans1 = <span class="number">-1</span>, ans2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid) &lt;= k) <span class="comment">//符合方向</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid) == k) <span class="comment">//完全符合条件</span></span><br><span class="line">                ans1 = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>; <span class="comment">//找小的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    l = <span class="number">1</span>, r = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid) &gt;= k) <span class="comment">//符合方向?</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">check</span>(mid) == k) <span class="comment">//注意！！必须符合条件才能取等</span></span><br><span class="line">                ans2 = mid;</span><br><span class="line">            l = mid + <span class="number">1</span>; <span class="comment">//找大的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ans1 == <span class="number">-1</span> || ans2 == <span class="number">-1</span>)</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout &lt;&lt; ans1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这题挺典型的，把一个模型里求最大和求最小都囊括了，可以对比看看</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二分专题&quot;&gt;&lt;a href=&quot;#二分专题&quot; class=&quot;headerlink&quot; title=&quot;二分专题&quot;&gt;&lt;/a&gt;二分专题&lt;/h1&gt;&lt;h3 id=&quot;先贴一个二分的板子&quot;&gt;&lt;a href=&quot;#先贴一个二分的板子&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="洛谷" scheme="http://example.com/categories/%E6%B4%9B%E8%B0%B7/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于memset赋值的探讨</title>
    <link href="http://example.com/2022/07/05/%E5%85%B3%E4%BA%8Ememset%E8%B5%8B%E5%80%BC%E6%8E%A2%E8%AE%A8/"/>
    <id>http://example.com/2022/07/05/%E5%85%B3%E4%BA%8Ememset%E8%B5%8B%E5%80%BC%E6%8E%A2%E8%AE%A8/</id>
    <published>2022-07-04T17:04:14.059Z</published>
    <updated>2022-07-04T17:14:01.452Z</updated>
    
    <content type="html"><![CDATA[<p>memset赋值<br>尽量用0x3f3f3f3f赋值，这样memset赋值结果和“=”赋值号效果相同，不会出现数字对不上。<br>0x7fffffff同理（7个f）</p><p>这是运行代码<br>可以看到对于memset，这四种方法是等效的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0x3f3f</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0x3f3f3f</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0x3f3f3f3f</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="number">0x3f</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="number">0x3f3f</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="number">0x3f3f3f</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="number">0x3f3f3f3f</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1061109567</span><br><span class="line">1061109567</span><br><span class="line">1061109567</span><br><span class="line">1061109567</span><br><span class="line">63</span><br><span class="line">16191</span><br><span class="line">4144959</span><br><span class="line">1061109567</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;memset赋值&lt;br&gt;尽量用0x3f3f3f3f赋值，这样memset赋值结果和“=”赋值号效果相同，不会出现数字对不上。&lt;br&gt;0x7fffffff同理（7个f）&lt;/p&gt;
&lt;p&gt;这是运行代码&lt;br&gt;可以看到对于memset，这四种方法是等效的。&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="探讨" scheme="http://example.com/categories/%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>朝花夕拾(二)————大一下蹲家学习生活回顾</title>
    <link href="http://example.com/2022/07/04/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE(%E4%BA%8C)%E2%80%94%E2%80%94%E5%A4%A7%E4%B8%80%E4%B8%8B%E8%B9%B2%E5%AE%B6%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB%E5%9B%9E%E9%A1%BE/"/>
    <id>http://example.com/2022/07/04/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BE(%E4%BA%8C)%E2%80%94%E2%80%94%E5%A4%A7%E4%B8%80%E4%B8%8B%E8%B9%B2%E5%AE%B6%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB%E5%9B%9E%E9%A1%BE/</id>
    <published>2022-07-04T09:01:39.349Z</published>
    <updated>2022-07-04T14:11:15.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p><strong>先挖一个坟，以纪念逝去的青春</strong></p><p><img src="https://img-blog.csdnimg.cn/d0a81ffd844442d7993391fb5def33fb.png" alt="在这里插入图片描述"><br>12月30号，ACM寒假培训的最后一天，整个宿舍已经只剩下我一个了，原本有两个山东室友和自己并肩作战，结果却先润了，走前的前一天，爸妈让我把桌上的东西全部放入箱子，所有的衣服都寄回家，当初还不太理解，现在看真是明智之举、、、、、、<br><img src="https://img-blog.csdnimg.cn/f7465d82b18b4e869b2589a27cc12299.jpeg" alt="在这里插入图片描述"><br>走的前一天晚上，我到5157去串门，住在那里的是dxy大佬，七天培训经常找他debug，慢慢变熟了<br>我的是31号一早的火车，他走得比我迟，我去和他道别，寒暄之余，我清晰地记得我说了一句：<br><strong>“三个月后再见！”</strong><br><img src="https://img-blog.csdnimg.cn/8902995139684a03bdc4bab2b01d1c18.png" alt="在这里插入图片描述"></p><h1 id="蹲家生活"><a href="#蹲家生活" class="headerlink" title="蹲家生活"></a>蹲家生活</h1><p>我原本以为20年疫情的寒假，是我人生最长的假期<br>现在看来，是我太年轻了。</p><p>从12月31号离开学校，到7月3号的今天课设刚刚写完，已经整整过去半年的时间。不知不觉一个学期竟然在家中度过。</p><p>有些事想想真的很恍惚，即使在过去的12年学习生活中，虽然也是在家上学读书，但是大部分的时间其实都在学校，宅在家里的时间其实并不多，在这个半年里，在家几乎宅了半年。学习，生活全在家中解决，无论是以往的小学中学生活，还是以后步入社会的工作生活。呆在家里时间这么长的经历应该是绝无仅有的。我忍不住想，这样宝贵的人生阅历，到底是赢还是输呢？</p><h3 id="文化课学习"><a href="#文化课学习" class="headerlink" title="文化课学习"></a>文化课学习</h3><p>其实导员正式通知开学延期的时候，我对文化课的学习并不是很担心</p><p>20年疫情，线上学习半个学期回到学校，开学考试考的名次是高中里最好的一次，在家中学习必然会有折扣，只不过是多少问题，我觉得，过去十二年，从小学，到初中，再到大学；坎坎坷坷走到现在，支持我走下去的绝对不是自己的天资——我一直觉得自己是没有别人聪明的，理解同一个知识点也比别人慢半拍，坚持到现在，是靠着比别人更多的努力。笨鸟先飞，勤能补拙，本该如此而已。</p><h5 id="马原"><a href="#马原" class="headerlink" title="马原"></a>马原</h5><p><img src="https://img-blog.csdnimg.cn/408f37678cda4a3b9df916d1cbe33dd9.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/6be19f01d7e54d24823d54e4d9253aba.png" alt="在这里插入图片描述"><br>大学考试里，最先考的就是马原了。</p><p>说实话，马原考前真的让我挺着急的，3月29号正值上海疫情，自己所在的城市也有上海回来的阳性感染者，没过几天，快递停运，直接封城。那时候连书都没有，学校打印店的资料也寄不过来。那时候真的挺焦虑的，马原本身就要背书，我手头上没有实体书，快递停运也寄不过来，更何况马原课本有将近400面，很多概念听上去就已经晦涩难懂，学分占比3分，真的很让人头大。</p><p>实在没有办法，后来让学友发的顺丰航空，运费就花了70块钱，我自己还有点心疼，爸妈倒觉得无所谓，钱能解燃眉之急，再贵也值。<br><img src="https://img-blog.csdnimg.cn/d196db759200455cb876af766fac0ab0.jpeg" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/958e413621be40ce8cbd5cee6bc9fd45.jpeg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0521b6c8bbc94847b91f883928f3cedb.jpeg" alt="在这里插入图片描述"><br>（夺命连催）<br>资料到手，万事具备。从三月下旬，到五月中旬，我每天早上固定六点半起床背马原，一开始不习惯早起，坐在书桌前背书总是效率低下，总是打瞌睡，疫情封楼也无法外出，后来我想到一个办法——到单元楼的天台去背书，那段时间每天凌晨起来到顶楼背书，经常还会遇到一个今年高考的文科女生也在天台背书，有一次她问我是哪所中学，我尴尬的说我上大学（笑哭），她惊讶了很长时间：“上大学也这么辛苦吗？”</p><p>其实幸苦与否并也不是时间段决定，还是看个人追求吧。如果对上的大学无所谓，高中也可以天天玩乐过的很轻松；如果想在大学学到东西，天天起早贪黑辛苦程度也不亚于高中。只不过高中老师催得多，家长看的严，同学们也卷的明显；大学往往都淡化了。每个人都有自己的生活节奏，如人喝水，冷暖自知，自己觉得充实就好。<br><img src="https://img-blog.csdnimg.cn/2a04622bf4844117a8eae8ae649a13a8.jpeg" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/8e9d94b9b21f41818ef3eb3dcc2cbc99.jpeg" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/de9073f689a04e3ba6ac8efdcc784e34.jpeg" alt="在这里插入图片描述"><br>（反复翻旧的马原课本）<br>其实一开始背真的很绝望，感觉根本记不住，很难下手，总是不由自主用礼貌用语去问候作者父母，<br>但是随着一刷，二刷，三刷，慢慢觉得也没那么难记，到考前最后一刷，回顾这两个月的马原学习，我觉得书里的很多道理是很有用的，晦涩难懂的理论慢慢从理解也变成认同了。有时在饭后之余，我也会给父母讲一讲书本上学到的马克思的唯物论和唯物辩证法（？）</p><p>有时候也会去想：也许我去学文更合适？</p><p>后来马原也拿到了满意的分数，算是对得起两个月少睡的懒觉。感谢马克思，让我一学期保持了六点钟起床的好习惯。<br><img src="https://s2.loli.net/2022/07/04/6AXWvRfBzhCJ7oY.jpg" alt="清晨六点半的城市"><br>（早上六点半的风景）</p><p><del>这个城市，真的值得我守护吗？</del>（中二病犯了）</p><h5 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h5><p>大一上学期选的排球，老师有点严格， </p><p>（未完待续，先鸽了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;先挖一个坟，以纪念逝去的青春&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.</summary>
      
    
    
    
    <category term="大学生活" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="回忆" scheme="http://example.com/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>朝花夕拾-GPLT赛后遐想</title>
    <link href="http://example.com/2022/04/24/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BEGPLT%E8%B5%9B%E5%90%8E%E9%81%90%E6%83%B3/"/>
    <id>http://example.com/2022/04/24/%E6%9C%9D%E8%8A%B1%E5%A4%95%E6%8B%BEGPLT%E8%B5%9B%E5%90%8E%E9%81%90%E6%83%B3/</id>
    <published>2022-04-23T23:48:03.592Z</published>
    <updated>2022-04-24T02:10:29.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="朝花夕拾-GPLT赛后遐想"><a href="#朝花夕拾-GPLT赛后遐想" class="headerlink" title="朝花夕拾-GPLT赛后遐想"></a>朝花夕拾-GPLT赛后遐想</h1><p>2022年的GPLT圆满结束，在前有蓝桥杯结束不到半个月，后有一星期即将大学物理考试的情况下，说实话这个天梯赛时间上真的有点尴尬。</p><p>gplt（团体程序设计天梯赛），规则就是每个学校拉若干的队伍，每个队伍十个人，队伍排名按照是个人做出来题目得分的总和进行排名，每个学校获奖队伍只能有三个（想获奖还必须挤入学校队伍前三）。</p><p>三月下旬的时候，学校的竞赛队实行包分配制度，前三个队伍是拿奖队，汇聚了各路卷王和大二学长，成员大多是俱乐部名声在外的大佬。后面三队是大一同学(我在第五组)组成的队伍，定位其实是重在参与，为明年积累经验。</p><p>所以当时看到分队表，表中的队伍实力是从一到六逐级递减的，看到自己没能进入前三队，说实话，挺难受的说。</p><p>学校的这样的决策肯定是正确的，想让奖项最大化，优先让实力强劲的同学去组建前三队，这个策略很合理(换做我我也会这样去组织)，让大一先积累经验，大二再战。虽然知道如此,那几天心情都不太好，总觉得自己获奖无望了。之前寒假专门报了洛谷算法班，蓝桥杯从第六届做到了第十三届，gplt的往年真题在分队结果没出之前就一直在刷，当你紧锣密鼓严阵以待，最终结果大概率是一无所获。换谁都有点挫败吧。</p><p>3月25号，正好是星期六，和初中的铁哥们连麦打游戏，多年的哥们一听我的声音就知道我的心情不好，我说出事情的原委，哥们安慰之余，也鼓励我做好自己</p><p>“你还是认真准备，努力过了，就算获不了奖也要打出威风出来”</p><p>下号的时候他这么说。<br><img src="https://s2.loli.net/2022/04/24/Vzt6ysTB8gA3QmL.jpg"></p><p>分队结果过了几天后，其实自己也慢慢想开了，分队机制本来就很合理，自己还是自己，曾经付出的努力没有烟消云散，现在多了的是和我并肩作战的其他队员和继续走下去的决心。</p><p>3月26   号星期天，一大早我爬起来，昨天晚上我加了我们第五小组其他九名队员的QQ，今早陆续通过申请，我拉了一个“天梯赛第五小组”的交流群，群建好后，留在我草稿里的群公告反复删改，提出了自愿每日训练打卡的想法。</p><p>原先担心提议可能会遇到冷落，结果大家都纷纷赞成，我也暗自松了一口气，其实我一直觉得，只要大家一起努力，一起进步，结果怎么样，我都觉得没有遗憾了。<br><img src="https://s2.loli.net/2022/04/24/2vUQjqbculIAsGS.png"></p><p>时间转眼过了一个月，打卡活动井然有序，天梯赛如期而至。</p><p>考前其实一直抱着获不了奖的心态去准备，考试的时候也没想太多，感觉今年的题目和往年差别有点大，L1八道题没有一个是字符串问题，这和之前网上所流传的“天梯赛就是字符串大赛”完全不同，不过影响不大，前七道题都一遍ac，第八题第一次交内存超限，我想了想，换成stl动态数组存矩阵，也顺利ac。到了L2，真正的考验才刚刚开始，第一道栈的模拟，题目信息量过大再加上本来就是大一刚学底子薄弱，一道题写了将近一个小时，自己运行竟然跑不出来，后来赶紧跳过做了L2第二题，第二题部分通过，又赶紧去改第一题的代码，还好，运气不错，第一题顺利通过。</p><p>16：30到了，我在椅子上靠了一会，感觉自己考的不好，这次果然获奖无望了，我抱着吃瓜的心理去看了榜单，结果奇迹出现了。</p><p>这是我们比赛结果的榜单(河北省内)，第五小组是我们<br><img src="https://s2.loli.net/2022/04/24/KvWzoNu89JwImsr.png"></p><p>我们第五组，在学校定位是气氛组的我们，挤进了校内前三。</p><p>我激动了好一会，再回头看小组群，<br>已经是99+。</p><p><img src="https://s2.loli.net/2022/04/24/fkhOqBMl63wdmuc.jpg"><br><img src="https://s2.loli.net/2022/04/24/3r82jHQFiVKWaeM.jpg"><br><img src="https://s2.loli.net/2022/04/24/4iT82kqBQmbluXh.jpg"><br><strong>我只想说：xdm！牛逼！！！<br>在座的都是狠人！</strong></p><p>4月23日天梯赛考完当天晚上，又是周六<br>我和铁哥们又在晚上连麦打游戏，他得知这个消息之后，只是淡淡说了一句：</p><p>“意料之中”</p><p>晚上玩完游戏，躺在床上，忍不住想，觉得当初的自己其实也挺幼稚的，为什么会觉得自己不行呢，为什么要那么快否定自己呢。想起来曾经看过的一部传记电影《至暗时刻》的片尾丘吉尔名言，一直也很喜欢这句话。</p><p>“Success is not final, failure is not fatal — it is the courage to continue that counts”</p><p><strong>成功不是终点，失败也并非灾难：最重要的是前进的勇气</strong></p><p>致敬从未放弃的自己，也致敬给力的队友，也致敬风华正茂的年华。<br><img src="https://s2.loli.net/2022/04/24/lJ31MXvo6qdEFxD.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;朝花夕拾-GPLT赛后遐想&quot;&gt;&lt;a href=&quot;#朝花夕拾-GPLT赛后遐想&quot; class=&quot;headerlink&quot; title=&quot;朝花夕拾-GPLT赛后遐想&quot;&gt;&lt;/a&gt;朝花夕拾-GPLT赛后遐想&lt;/h1&gt;&lt;p&gt;2022年的GPLT圆满结束，在前有蓝桥杯结束不到半</summary>
      
    
    
    
    <category term="pta天梯赛" scheme="http://example.com/categories/pta%E5%A4%A9%E6%A2%AF%E8%B5%9B/"/>
    
    
    <category term="回忆" scheme="http://example.com/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>scanf和printf读入输出字符串的探讨</title>
    <link href="http://example.com/2022/04/15/scanf%E5%92%8Cprintf%E8%AF%BB%E5%85%A5%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>http://example.com/2022/04/15/scanf%E5%92%8Cprintf%E8%AF%BB%E5%85%A5%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%A2%E8%AE%A8/</id>
    <published>2022-04-15T14:07:03.379Z</published>
    <updated>2022-04-22T07:59:13.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scanf和printf读入输出字符串的探讨"><a href="#scanf和printf读入输出字符串的探讨" class="headerlink" title="scanf和printf读入输出字符串的探讨"></a>scanf和printf读入输出字符串的探讨</h1><h3 id="1-scanf读入char字符数组（char字符串）"><a href="#1-scanf读入char字符数组（char字符串）" class="headerlink" title="1. scanf读入char字符数组（char字符串）"></a>1. scanf读入char字符数组（char字符串）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">char</span> str[<span class="number">10000</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;len);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-cin-getline-整行读入char字符数组（char字符串）"><a href="#2-cin-getline-整行读入char字符数组（char字符串）" class="headerlink" title="2. cin.getline()整行读入char字符数组（char字符串）"></a>2. cin.getline()整行读入char字符数组（char字符串）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> remp[<span class="number">50</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(remp,<span class="number">10000</span>);</span><br><span class="line">cout&lt;&lt;remp&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,remp);</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(remp)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c490473344b24006b852cc0fa5a9ff3c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3-getline-读入string字符串，并且用printf强转输出"><a href="#3-getline-读入string字符串，并且用printf强转输出" class="headerlink" title="3. getline()读入string字符串，并且用printf强转输出"></a>3. getline()读入string字符串，并且用printf强转输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">string remp;</span><br><span class="line"><span class="built_in">getline</span>(cin,remp);</span><br><span class="line">cout&lt;&lt;remp&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;remp.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,remp.<span class="built_in">c_str</span>());</span><br><span class="line">cout&lt;&lt;remp.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a6993013441b443288984a86d43d3a54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="4-scanf和printf读入输出string"><a href="#4-scanf和printf读入输出string" class="headerlink" title="4. scanf和printf读入输出string"></a>4. scanf和printf读入输出string</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">string remp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,remp.<span class="built_in">c_str</span>());</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(remp.<span class="built_in">c_str</span>())&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;remp.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,remp.<span class="built_in">c_str</span>());</span><br><span class="line">cout&lt;&lt;<span class="built_in">strlen</span>(remp.<span class="built_in">c_str</span>())&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很有意思的是用scanf强转读入的string字符串，用其内置的length（）函数求其长度竟然使用不了，将string强转为char数组再用strlen（）求长度就能求出来了，真的很神奇<br><img src="https://img-blog.csdnimg.cn/05b925ca44df4b75b58e777e493c30ed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="5-string读入，printf输出-好像没啥用"><a href="#5-string读入，printf输出-好像没啥用" class="headerlink" title="5.string读入，printf输出(好像没啥用)"></a>5.string读入，printf输出(好像没啥用)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string remp;</span><br><span class="line">    <span class="built_in">getline</span>(cin, remp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, remp.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;scanf和printf读入输出字符串的探讨&quot;&gt;&lt;a href=&quot;#scanf和printf读入输出字符串的探讨&quot; class=&quot;headerlink&quot; title=&quot;scanf和printf读入输出字符串的探讨&quot;&gt;&lt;/a&gt;scanf和printf读入输出字符串的</summary>
      
    
    
    
    <category term="探讨" scheme="http://example.com/categories/%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉搜索树</title>
    <link href="http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/"/>
    <id>http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%EF%BC%88BST%EF%BC%89/</id>
    <published>2022-04-15T14:02:33.106Z</published>
    <updated>2022-04-16T02:40:06.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈BST"><a href="#浅谈BST" class="headerlink" title="浅谈BST"></a>浅谈BST</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 最近不顺心的事情有点多，再加上赶ptaL2 的题单，很久没做知识总结了 ，现在pta的题目告一段落，参考了某大佬 <del>（某卷王）</del> 总结的知识点，鸣谢大佬！总结一下BST问题的知识点，供以后参考。<br> 封面：<br> <img src="https://img-blog.csdnimg.cn/1eb941207e6b46578ce8055ab92fc6bc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> <em><strong>站在巨人 <del>（卷王）</del> 的肩上，才能看 <del>（卷）</del> 的更远</strong></em></p><h3 id="二叉搜索树的性质"><a href="#二叉搜索树的性质" class="headerlink" title="二叉搜索树的性质"></a>二叉搜索树的性质</h3><p> 一棵二叉搜索树可被递归地定义为具有下列性质的二叉树：对于任一结点</p><ul><li>其左子树中所有结点的键值小于该结点的键值；</li><li>其右子树中所有结点的键值大于等于该结点的键值；</li><li>其左右子树都是二叉搜索树。</li></ul><p>乍一看，其实感觉和二叉堆很像，不过二叉堆左右儿子之间没有可比性，因为二叉堆是根据与父亲节点大小关系建堆的，兄弟节点似乎无法比较，所以同一个序列，以不同顺序输入的生成的二叉堆序列也自然不同。<br>二叉搜索树也有类似的性质，但是二叉搜索树输入的节点不会发生位置交替，这和二叉堆边插入边排序不同，所以，同一组数字不同顺序输入二叉搜索树也会导致二叉搜索树结构不同。假如输入的数字过于玄学，会导致树的左右子树不平衡，如果将两个子树平衡，就变成了平衡树(Treap)</p><h3 id="二叉搜索树的操作"><a href="#二叉搜索树的操作" class="headerlink" title="二叉搜索树的操作"></a>二叉搜索树的操作</h3><h5 id="必要的初始化"><a href="#必要的初始化" class="headerlink" title="必要的初始化"></a>必要的初始化</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF -1</span></span><br><span class="line"><span class="type">int</span> BST[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">BST[i] = INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST[root] &gt;= x)<span class="comment">//说明该节点应该在其左边</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span>, x); <span class="comment">//左儿子比父亲小，右儿子更大</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, x); <span class="comment">//右儿子比父亲大，往右边放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>中序遍历其实就是序列从小到大排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="找最大"><a href="#找最大" class="headerlink" title="找最大"></a>找最大</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往右走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_max</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="找最小"><a href="#找最小" class="headerlink" title="找最小"></a>找最小</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往左走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_min</span>(root * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span> <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[root]) <span class="comment">//往右找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[root]) <span class="comment">//往左找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//找到了，开始修改</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = INF; <span class="comment">//没有儿子，直接封杀</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF) <span class="comment">//左子树存在，右子树无</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, BST[root * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF) <span class="comment">//左子树空，右子树存在</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, BST[root * <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[root * <span class="number">2</span>] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有两种修改方式！</span></span><br><span class="line"><span class="comment">//第一种是修改用后驱节点(右子树最小节点更换)</span></span><br><span class="line"><span class="comment">//第二种是用前驱节点修改(左子树最大节点更换)</span></span><br><span class="line"><span class="comment">//这里演示前者</span></span><br><span class="line"><span class="type">int</span> post_point = <span class="built_in">get_min</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">BST[root] = post_point;</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, post_point);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="汇总代码，实弹演习"><a href="#汇总代码，实弹演习" class="headerlink" title="汇总代码，实弹演习"></a>汇总代码，实弹演习</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">7</span><br><span class="line">8 10 11 8 6 7 5</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF -1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> BST[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST[root] &gt;= x)<span class="comment">//说明该节点应该在其左边</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span>, x); <span class="comment">//左儿子比父亲小，右儿子更大</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">build</span>(root * <span class="number">2</span> + <span class="number">1</span>, x); <span class="comment">//右儿子比父亲大，往右边放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">pre_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">in_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">in_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">post_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root] == INF)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">post_order</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; BST[root] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floor_order</span><span class="params">(<span class="type">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(root);</span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">empty</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fa = q.<span class="built_in">front</span>();</span><br><span class="line">cout &lt;&lt; BST[fa] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (BST[fa * <span class="number">2</span>] != INF)</span><br><span class="line">q.<span class="built_in">push</span>(fa * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (BST[fa * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">q.<span class="built_in">push</span>(fa * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_min</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往左走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_min</span>(root * <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_max</span><span class="params">(<span class="type">int</span> root)</span> <span class="comment">//一直往右走</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line"><span class="keyword">return</span> BST[root];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get_max</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> x)</span> <span class="comment">//查找某一个特殊的元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[now])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">search</span>(now * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[now])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">search</span>(now * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> x)</span> <span class="comment">//删除操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; BST[root]) <span class="comment">//往右找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &lt; BST[root]) <span class="comment">//往左找</span></span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, x);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//找到了，开始修改</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF)</span><br><span class="line">&#123;</span><br><span class="line">BST[root] = INF; <span class="comment">//没有儿子，直接封杀</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] == INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF) <span class="comment">//左子树存在，右子树无</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, BST[root * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[<span class="number">2</span> * root] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] == INF) <span class="comment">//左子树空，右子树存在</span></span><br><span class="line">&#123;</span><br><span class="line">BST[root] = BST[root * <span class="number">2</span>];</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span>, BST[root * <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST[root * <span class="number">2</span>] != INF &amp;&amp; BST[root * <span class="number">2</span> + <span class="number">1</span>] != INF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有两种修改方式！</span></span><br><span class="line"><span class="comment">//第一种是修改用后驱节点(右子树最小节点更换)</span></span><br><span class="line"><span class="comment">//第二种是用前驱节点修改(左子树最大节点更换)</span></span><br><span class="line"><span class="comment">//这里演示前者</span></span><br><span class="line"><span class="type">int</span> post_point = <span class="built_in">get_min</span>(root * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">BST[root] = post_point;</span><br><span class="line"><span class="built_in">modify</span>(root * <span class="number">2</span> + <span class="number">1</span>, post_point);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; maxn; i++)</span><br><span class="line">BST[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> remp;</span><br><span class="line">cin &gt;&gt; remp;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, remp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pre_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">post_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">in_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_max</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_min</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">in_order</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><img src="https://img-blog.csdnimg.cn/c277f4fd28ab478ab87798259efeae16.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="插一道题"><a href="#插一道题" class="headerlink" title="插一道题"></a>插一道题</h3><p><img src="https://img-blog.csdnimg.cn/64f02fa50dc142548aadcf90cecebf13.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这道题我是参考LP大佬的解法，鸣谢大佬！解法很巧妙，我们看题，它题目告诉我们它输入的序列有可能是正常的二叉搜索树，也可能是镜像的，那咋办捏？<br>判断两遍就可以了！先用当正常的遍历一下，试试水，如果成了就直接pass，不成了的话就用镜像的方式遍历一次<br>那么，我们怎么判断一个遍历是不是一个二叉搜索树捏？<br>以正常的为例子！<br>看图！</p><p><img src="https://img-blog.csdnimg.cn/6ed9337cc54b4fe0bc84b4106a82950c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><del>字有点丑不好意思我的锅</del><br>它生成的前序遍历应该是：<br><img src="https://img-blog.csdnimg.cn/9fc055e195d340dd8b629d0754336b09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>你会发现：对一段前序遍历，第一个元素是根节点，蓝色箭头之前到根节点都是小于根节点的！而绿色箭头都是大于根节点的！<br>而这两个箭头指的也是根节点的左右子树！<br>所以直接按这个规律进行判断！判断成功，就判断它的子树是否满足！</p><p>AC代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="type">int</span> pre[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge1</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> <span class="comment">//判断是否是正序</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// start是根节点</span></span><br><span class="line"><span class="keyword">if</span> (start &gt; end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> node1 = start + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> node2 = end;</span><br><span class="line"><span class="keyword">while</span> (node1 &lt;= end &amp;&amp; pre[node1] &lt; pre[start])</span><br><span class="line">node1++; <span class="comment">//从前往后寻找比根节点小的最后一个值</span></span><br><span class="line"><span class="keyword">while</span> (node2 &gt; start &amp;&amp; pre[node2] &gt;= pre[start])</span><br><span class="line">node2--; <span class="comment">//从后往前寻找比根节点大的最后一个值</span></span><br><span class="line"></span><br><span class="line">node1--; <span class="comment">//多加了</span></span><br><span class="line">node2++; <span class="comment">//多减了</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;node1&lt;&lt;&quot; &quot;&lt;&lt;node2&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span> (node2 != node1 + <span class="number">1</span>) <span class="comment">//只有两个指针中间只差一个(根节点)</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">judge1</span>(start + <span class="number">1</span>, node1);  <span class="comment">//验证左子树</span></span><br><span class="line"><span class="built_in">judge1</span>(node2, end);   <span class="comment">//查右子树</span></span><br><span class="line">ans.<span class="built_in">push_back</span>(pre[start]); <span class="comment">//后序遍历，最后放入</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">judge2</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> <span class="comment">//判断是否是镜像</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start &gt; end)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> node1 = start + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> node2 = end;</span><br><span class="line"><span class="keyword">while</span> (node1 &lt;= end &amp;&amp; pre[node1] &gt;= pre[start])</span><br><span class="line">node1++;</span><br><span class="line"><span class="keyword">while</span> (node2 &gt;= start &amp;&amp; pre[node2] &lt; pre[start])</span><br><span class="line">node2--;</span><br><span class="line"></span><br><span class="line">node1--;</span><br><span class="line">node2++;</span><br><span class="line"><span class="keyword">if</span> (node2 != node1 + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">judge2</span>(start + <span class="number">1</span>, node1);</span><br><span class="line"><span class="built_in">judge2</span>(node2, end);</span><br><span class="line">ans.<span class="built_in">push_back</span>(pre[start]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;pre[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">judge1</span>(<span class="number">1</span>, num);   <span class="comment">//先正序构造一下，试一下水</span></span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">size</span>() != num) <span class="comment">//试水失败，说明可能是镜像，再试一次水</span></span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">judge2</span>(<span class="number">1</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans.<span class="built_in">size</span>() == num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">if</span> (i != num - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈BST&quot;&gt;&lt;a href=&quot;#浅谈BST&quot; class=&quot;headerlink&quot; title=&quot;浅谈BST&quot;&gt;&lt;/a&gt;浅谈BST&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二叉堆（没写完）</title>
    <link href="http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E5%A0%86%EF%BC%88%E6%B2%A1%E5%86%99%E5%AE%8C%EF%BC%89/"/>
    <id>http://example.com/2022/04/15/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%8F%89%E5%A0%86%EF%BC%88%E6%B2%A1%E5%86%99%E5%AE%8C%EF%BC%89/</id>
    <published>2022-04-15T14:00:03.391Z</published>
    <updated>2022-04-16T02:39:55.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈二叉堆"><a href="#浅谈二叉堆" class="headerlink" title="浅谈二叉堆"></a>浅谈二叉堆</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>复习基础数据结构，供日后学习参考吧<br><img src="https://img-blog.csdnimg.cn/8f5d8f0b554542ed886f25e14829095e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><del>（放一个封面）</del></p><h3 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h3><p>二叉堆分为最大堆(大顶堆)和最小堆(小顶堆)，具体区别是：</p><p><strong>大顶堆父亲节点永远大于子节点(堆顶元素是最大的)</strong></p><p><strong>小顶堆父亲节点永远小于子节点(堆顶元素是最小的)</strong></p><p>那么二叉堆如何构建？</p><h3 id="二叉堆建立"><a href="#二叉堆建立" class="headerlink" title="二叉堆建立"></a>二叉堆建立</h3><ul><li>大顶堆构建：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">big_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b_Heap[++b_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = b_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b_Heap[son] &lt;= b_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(b_Heap[son], b_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>小顶堆构建<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">small_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_Heap[++s_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = s_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s_Heap[son] &gt;= s_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s_Heap[son], s_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>汇总完整代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 大顶堆和小顶堆的建立（最小堆+最大堆）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxn 100000</span></span><br><span class="line"><span class="type">int</span> s_Size, b_Size;</span><br><span class="line"><span class="type">int</span> s_Heap[maxn];</span><br><span class="line"><span class="type">int</span> b_Heap[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">small_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s_Heap[++s_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = s_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (s_Heap[son] &gt;= s_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(s_Heap[son], s_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">big_build</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">//堆顶下标是1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    b_Heap[++b_Size] = x;</span><br><span class="line">    <span class="type">int</span> son = b_Size;</span><br><span class="line">    <span class="keyword">while</span> (son &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa = son &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (b_Heap[son] &lt;= b_Heap[fa])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">swap</span>(b_Heap[son], b_Heap[fa]);</span><br><span class="line">        son = fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> remp;</span><br><span class="line">        cin &gt;&gt; remp;</span><br><span class="line">        <span class="built_in">big_build</span>(remp);</span><br><span class="line">        <span class="built_in">small_build</span>(remp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; s_Heap[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cout &lt;&lt; b_Heap[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉堆的元素删除操作"><a href="#二叉堆的元素删除操作" class="headerlink" title="二叉堆的元素删除操作"></a>二叉堆的元素删除操作</h3><del>有空再写吧，肚子饿了，吃饭去了</del><br><img src="https://img-blog.csdnimg.cn/2267460cdc4741b285969ad80c8e7090.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6Jyh56yU5bCP6YeRUUFR,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈二叉堆&quot;&gt;&lt;a href=&quot;#浅谈二叉堆&quot; class=&quot;headerlink&quot; title=&quot;浅谈二叉堆&quot;&gt;&lt;/a&gt;浅谈二叉堆&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前</summary>
      
    
    
    
    <category term="模板" scheme="http://example.com/categories/%E6%A8%A1%E6%9D%BF/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
